This is ipe.info, produced by makeinfo version 7.1 from ipe.texi.

Copyright © 2024 Brian Kavanagh

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with no Front-Cover Texts,
     and with no Back-Cover Texts.  A copy of the license is included in
     the section entitled "GNU Free Documentation License".
INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* ipe: (ipe).   Insert Pair Edit (ipe).
END-INFO-DIR-ENTRY


File: ipe.info,  Node: Top,  Next: Overview,  Up: (dir)

Insert Pair Edit (ipe)
**********************

This documentation describes the 'Insert Pair Edit' (ipe) *Emacs*
package.

* Menu:

* Overview::                 An overview of the 'Insert Pair Edit' (ipe) package.
* Installation::             How to install the 'Insert Pair Edit' (ipe) package.
* Usage::                    The 'ipe-insert-pair-edit' command.
* Core Edit Mode Bindings::  Core 'ipe-edit-mode' key bindings.
* Other Major Commands::     Other major 'ipe-insert-pair-edit-*' commands.
* Customization::            The 'ipe' customization group.
* Other Edit Mode Bindings:: Other 'ipe-edit-mode' key bindings.
* Other Features::           Other 'ipe' / 'ipe-edit-mode' features.
* Development::              Documentation for developers.
* Indexes::                  Indexes.


File: ipe.info,  Node: Overview,  Next: Installation,  Prev: Top,  Up: Top

1 Overview
**********

At its simplest, the 'Insert Pair Edit' (ipe) package is an *Emacs*
package that just supplies a command, ‘ipe-insert-pair-edit’.  This
command can be used to position and insert two pieces of text into an
*Emacs* buffer: an OPEN string, and a CLOSE string.  (Or, as it is named
within this package, a 'PAIR'.)

   For example, the ‘ipe-insert-pair-edit’ command can be used to
position and insert an open parenthesis "(", and, a close parenthesis
")", around a given piece of text.

   The particular PAIR to be inserted by the ‘ipe-insert-pair-edit’
command is identified by a customizable MNEMONIC, (usually a single
character) which is entered into the *Emacs* _minibuffer_ after running
the ‘ipe-insert-pair-edit’ command, at the "Insert Pair: " prompt.

   Once identified by the MNEMONIC, this PAIR is displayed within the
current buffer (as overlays) around a _lexical unit_ surrounding POINT,
and these overlays can then be moved about the buffer (using a set of
pre-configured movement keys) to visually define the position at which
the PAIR is to be inserted into the buffer.

   The 'Insert Pair Edit' (ipe) package offers features to:

   • Customize the PAIRs and MNEMONICs used.
   • Define _mode-specific_ PAIRs.
   • Define the _lexical unit_ used for initial positioning and initial
     movement of PAIRs.
   • Update / Delete / Replace _existing_ PAIRs.
   • Search for PAIRs.
   • Handle the editing / movement of multiple PAIRs at once.
   • Escape specific strings enclosed by a PAIR.
   • Indent the intervening lines within a PAIR.
   • Insert prefix strings (INFIXes) at the beginning of intervening
     lines within a PAIR.
   • Edit the text enclosed within the PAIR.
   • Re-position POINT and MARK on insert of a PAIR.

* Menu:

* Expected Usage::


File: ipe.info,  Node: Expected Usage,  Up: Overview

1.1 Expected Usage
==================

One target use for the functionality supplied by the 'Insert Pair Edit'
(ipe) package is _marking up_ text.

   For example:

   • Binding a set of HTML opening and closing tags:

          e.g.
            MNEMONIC: "1"  OPEN: "<h1>"     CLOSE: "</h1>"
            MNEMONIC: "e"  OPEN: "<em>"     CLOSE: "</em>"
            MNEMONIC: "s"  OPEN: "<strong>" CLOSE: "</strong>"
            etc...

     to a ‘html-mode’, and using the ‘ipe-insert-pair-edit’ command to
     add / edit these tags around existing text within a ‘.html’ file.

   • Binding a set of opening and closing strings representing
     _markdown_:

          e.g.
            MNEMONIC: "1"  OPEN: "#"   CLOSE: "#"
            MNEMONIC: "*"  OPEN: "**"  CLOSE: "**"
            MNEMONIC: "_"  OPEN: "_"   CLOSE: "_"
            etc...

     to a ‘markdown-mode’, and using the ‘ipe-insert-pair-edit’ to add /
     edit these tags around existing text within a ‘.md’ file.

   Another target use for this functionality is the addition of paired
programming constructs within a programming mode:

   For example:

   • Binding language specific paired quotes / keywords / comments:

          e.g.
            MNEMONIC: "/"  OPEN: "/*"   CLOSE: "*/"   INFIX: "**"
            MNEMONIC: "d"  OPEN: "/**"  CLOSE: " */"  INFIX: " * "
            MNEMONIC: ";"  OPEN: "// "  CLOSE: ""     INFIX: "// "
            etc...

     and using the ‘ipe-insert-pair-edit’ command to accelerate the
     process of writing in the given language.


File: ipe.info,  Node: Installation,  Next: Usage,  Prev: Overview,  Up: Top

2 Installation
**************

To install 'Insert Pair Edit' (ipe), either:

   • Download the ‘ipe’ package from _MELPA_:

          (require 'package)
          (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
          (package-initialize)
          (package-install 'ipe)

   • Or, download the ‘ipe’ package from:

     <https://github.com/BriansEmacs/insert-pair-edit.el>

     And add the downloaded package to the ‘'load-path’:

          (add-to-list 'load-path "<path-to-ipe-download-dir>")
          (add-to-list 'load-path "<path-to-ipe-download-dir>/modes")

   Then, add the following to your ‘.emacs’ file:

     (require 'ipe)

   Add your preferred key-binding for the ‘ipe-insert-pair-edit’
command.

   For example, to bind ‘ipe-insert-pair-edit’ to <META> + <(>:

     (global-set-key (kbd "M-(") 'ipe-insert-pair-edit)

   You may also want to:

   • Enable the 'Insert Pair Edit' "Pairs" menu by adding the following
     to your ‘.emacs’ file.

          (customize-save-variable 'ipe-menu-support-p t)

   • Add shortcut keybindings for the 'other' Major 'ipe' commands:

     For example:

          (global-set-key (kbd "A-(") 'ipe-insert-pair-edit-update)
          (global-set-key (kbd "H-(") 'ipe-insert-pair-edit-delete)
          (global-set-key (kbd "s-(") 'ipe-insert-pair-edit-replace)

   • Load the 'example' modal PAIR mappings:

          (require 'ipe-html-mode)
          (require 'ipe-markdown-mode)
          (require 'ipe-textinfo-mode)

   To configure the package:

   • Run the command:

          <M-x> customize-group <RET>

     And when prompted for a group via:

          Customize-Group:

     Enter:

          ipe

   • Or, if you've enabled the "Pairs" menu, select the:

          - Edit >
            ...
            - Pairs >
              ...
              - Options

     menu option

   Customize the ‘ipe’ package according to your preferences.  (*Note
Customization::)


File: ipe.info,  Node: Usage,  Next: Core Edit Mode Bindings,  Prev: Installation,  Up: Top

3 Usage
*******

The functionality supplied by the ‘ipe’ package can be accessed in two
main ways: using the ‘ipe-insert-pair-edit’ command, or, using the
‘Edit’ -> ‘Pairs’ menu.

* Menu:

* Running ipe-insert-pair-edit::
* The 'Edit' -> 'Pairs' Menu::


File: ipe.info,  Node: Running ipe-insert-pair-edit,  Next: The 'Edit' -> 'Pairs' Menu,  Up: Usage

3.1 Running ‘ipe-insert-pair-edit’
==================================

     <M-(> - (Suggested Binding)

   Running ‘ipe-insert-pair-edit’ (via a pre-configured key-binding)
(e.g.  <M-(>) will prompt the User (using the _minibuffer_) with the
string:

   ‘Insert Pair: ’

   At this prompt, the User can then enter one of a set of MNEMONICs
(*Note Customization::.)  The set of available MNEMONICs will be visible
using _minibuffer_ TAB completion.

   TAB completion will display prompts of the form:

     'MNEMONIC1' - Insert Opening 'OPEN1' and Closing 'CLOSE1'
     'MNEMONIC2' - Insert Opening 'OPEN2' and Closing 'CLOSE2'
     'MNEMONIC3' - Insert Opening 'OPEN3' and Closing 'CLOSE3'
     ...

   Entering a valid MNEMONIC will then cause a PAIR of overlays (*Note
Display Customization::) to be added to the current buffer (at positions
around POINT) for both the desired OPEN and CLOSE string.

   For example, assuming that:

   • The ‘ipe-insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>, and;
   • The buffer contains the following text:

          The quick brown |fox jumps over the lazy dog.

     (Where the <|> character represents the current position of POINT.)

   Then, inserting a PAIR using the following keystrokes:

     <M-(> <(>

   Will add the <(> <)> PAIR around "fox", resulting in the buffer:

     The quick brown (|fox) jumps over the lazy dog.

   (Where the <(> <)> strings are overlays that can be moved by the
‘ipe-edit-mode’ key-bindings (*Note Core Movement::))

   The initial position of the OPEN and CLOSE overlays will be
determined by the _lexical unit_ associated with the PAIR (either:
character, word, line or list.)  This can be set when customizing the
definition of the PAIR. (*Note Movement Units::)

   Once the overlays have been initially positioned, the
‘ipe-insert-pair-edit’ command will activate the ‘ipe-edit-mode’
minor-mode to allow these overlays to be further adjusted.

* Menu:

* ipe-edit-mode::
* Other `ipe-insert-pair-edit-*' Commands::


File: ipe.info,  Node: ipe-edit-mode,  Next: Other `ipe-insert-pair-edit-*' Commands,  Up: Running ipe-insert-pair-edit

3.1.1 ipe-edit-mode
-------------------

The ‘ipe-edit-mode’ will set up a set of simple key bindings (*Note Core
Edit Mode Bindings::) to move the OPEN and CLOSE overlays of the PAIR
selected by one of the ‘ipe-insert-pair-edit’ commands.  Movement is via
a selected _lexical unit_, either:

   • "by characters"
   • "by words"
   • "by lines"
   • "by lists".

   This "movement mode" can be changed.  (*Note Movement Units::.)

   The ‘ipe-edit-mode’ will also set up a set of simple key bindings to
either process or abort the insertion of this PAIR of strings into the
buffer.  (*Note Inserting and Aborting::)

   Inserting or aborting the PAIR will then remove all of the
‘ipe-edit-mode’ key bindings, and return the User to the normal *Emacs*
mode for the given buffer.


File: ipe.info,  Node: Other `ipe-insert-pair-edit-*' Commands,  Prev: ipe-edit-mode,  Up: Running ipe-insert-pair-edit

3.1.2 Other 'ipe-insert-pair-edit-*' Commands
---------------------------------------------

Prefixing the call to the ‘ipe-insert-pair-edit’ command with one or
more of the *Emacs* ‘universal-argument’ (Usually bound to <C-u> by
default) can be used to modify the behaviour of the
‘ipe-insert-pair-edit’ command.

   For example, if using the suggested <M-(> binding for
‘ipe-insert-pair-edit’, the following keystrokes can be used to invoke
_other_ 'Insert Pair Edit' (ipe) commands:

<C-u> <M-(>
     Update an existing PAIR. (*Note Updating PAIRs::)

     (Command: ‘ipe-insert-pair-edit-update’)

<C-u> <C-u> <M-(>
     Delete an existing PAIR. (*Note Deleting PAIRs::)

     (Command: ‘ipe-insert-pair-edit-delete’)

<C-u> <C-u> <C-u> <M-(>
     Replace an existing PAIR with a REPLACEMENT PAIR. (*Note Replacing
     PAIRs::)

     (Command: ‘ipe-insert-pair-edit-replace’)

   It is also possible to simply bind these _other_ commands to
different keystrokes, if the User feels so inclined.


File: ipe.info,  Node: The 'Edit' -> 'Pairs' Menu,  Prev: Running ipe-insert-pair-edit,  Up: Usage

3.2 The 'Edit' -> 'Pairs' Menu
==============================

     - Edit >
       ...
       - Pairs >
         - Insert PAIR >
           - 'OPEN' ... 'CLOSE'
           - ...
         - Update PAIR >
           - 'OPEN' ... 'CLOSE'
           - ...
         - Delete PAIR >
           - 'OPEN' ... 'CLOSE'
           - ...
         - Edit PAIR Definitions >
           - ...
         - Options
         - Info
         - Help

   If running *Emacs* in a graphical environment which supports menus,
the ‘ipe’ package can add an extra ‘Pairs’ menu item to the standard
*Emacs* ‘Edit’ menu.

   The set of PAIRs listed under the ‘Insert PAIR’ / ‘Update PAIR’ /
‘Delete PAIR’ sub-menus will change dynamically based upon the current
buffer's ‘major-mode’.

   Selecting a menu item under ‘Insert PAIR’ will insert the selected
PAIR into the current buffer around POINT, and enter ‘ipe-edit-mode’.

   Selecting a menu item under ‘Update PAIR’ will update the _nearest_
(*Note Update Search Process::) PAIR to POINT (of the given type) and
enter ‘ipe-edit-mode’.

   Selecting a menu item under ‘Delete PAIR’ will delete the _nearest_
(*Note Update Search Process::) PAIR to POINT (of the given type) and
remain in the current *Emacs* mode.

* Menu:

* Enabling the 'Edit' -> 'Pairs' Menu::


File: ipe.info,  Node: Enabling the 'Edit' -> 'Pairs' Menu,  Up: The 'Edit' -> 'Pairs' Menu

3.2.1 Enabling the 'Edit' -> 'Pairs' Menu
-----------------------------------------

By default, the 'Insert Pair Edit' (ipe) menu item is disabled.  To
enable it, set the ‘ipe-menu-support-p’ option.  (Default: *nil*)).

   To set this option, either:

   • After loading the ‘ipe’ package, run the following commands:

          M-x eval-expression RET
          (customize-save-variable 'ipe-menu-support-p t) RET

   • Or, add the following to your ‘.emacs’ file (somewhere after the
     ‘(require 'ipe)’ statement):

          (setq ipe-menu-support-p t)
          (ipe-menu--install)


File: ipe.info,  Node: Core Edit Mode Bindings,  Next: Other Major Commands,  Prev: Usage,  Up: Top

4 Core Edit Mode Bindings
*************************

The following sections describe the core key bindings (and associated
commands) that are active when the ‘ipe-edit-mode’ is activated.

* Menu:

* Core Movement::          Keys to move OPEN and CLOSE overlays.
* Core Movement Options::  Alternate movement keys.
* Inserting and Aborting::  Keys to exit ‘ipe-edit-mode’.
* Movement Units::          Keys to change OPEN and CLOSE movement.
* Changing PAIRs::          Keys to change OPEN and CLOSE strings.
* Mouse Movement::          Movement enacted by mouse actions.


File: ipe.info,  Node: Core Movement,  Next: Core Movement Options,  Up: Core Edit Mode Bindings

4.1 Core Movement
=================

Once ‘ipe-edit-mode’ is activated, the OPEN and CLOSE overlays of a PAIR
can be moved about the buffer.  By default, this is expected to be
achieved using a set of _twelve_ key-bindings.  _Six_ that control the
direction of movement of the OPEN overlay, and _six_ that control the
direction of movement of the CLOSE overlay.

   These core movement key bindings can be configured using the
customization option, ‘ipe-edit-movement-keyset’, which can be used to
control which of a set of _pre-canned_ key bindings is activated when
‘ipe-edit-mode’ is active, or, can be used to set up a _user-defined_
set of bindings.

   By default, ‘ipe-edit-movement-keyset’ is set to activate the
following key bindings, which are similar to those normally used for
standard *Emacs* character and word movement.

                 <C-p>                            <M-p>
                   ^                                ^
                   |                                |
     <C-a> <C-b>  OPEN  <M-f> <M-e>  <M-a> <M-b>  CLOSE  <C-f> <C-e>
                   |                                |
                   v                                v
                 <M-n>                            <C-n>

<C-a>
     Move OPEN to the 'beginning' (Command: ‘ipe-edit--open-beg’)
<C-p>
     Move OPEN 'up' (Command: ‘ipe-edit--open-up’)
<C-b>
     Move OPEN 'backward' (Command: ‘ipe-edit--open-backward’)
<M-f>
     Move OPEN 'forward' (Command: ‘ipe-edit--open-forward’)
<M-n>
     Move OPEN 'down' (Command: ‘ipe-edit--open-down’)
<M-e>
     Move OPEN to the 'end' (Command: ‘ipe-edit--open-end’)

<M-a>
     Move CLOSE to the 'beginning' (Command: ‘ipe-edit--close-beg’)
<M-p>
     Move CLOSE 'up' (Command: ‘ipe-edit--close-up’)
<M-b>
     Move CLOSE 'backward' (Command: ‘ipe-edit--close-backward’)
<C-f>
     Move CLOSE 'forward' (Command: ‘ipe-edit--close-forward’)
<C-n>
     Move CLOSE 'down' (Command: ‘ipe-edit--close-down’)
<C-e>
     Move CLOSE to the 'end' (Command: ‘ipe-edit--close-end’)

   The amount each command moves its overlay is dependent upon the
current "movement mode", which is controlled using the IPE-MOVEMENT
variable.

   By default, IPE-MOVEMENT is set to ‘word’, which means that the keys
for the forward (‘ipe-edit--open-forward’ / ‘ipe-edit--close-forward’)
and backward (‘ipe-edit--open-backward’ / ‘ipe-edit--close-backward’)
commands will move the OPEN and CLOSE overlays forward and backward "by
words", and, up and down "by lines".


File: ipe.info,  Node: Core Movement Options,  Next: Inserting and Aborting,  Prev: Core Movement,  Up: Core Edit Mode Bindings

4.2 Core Movement Options
=========================

The set of _movement_ key bindings that are active within
‘ipe-edit-mode’, can be changed using the customizable option
‘ipe-edit-movement-keyset’.

   To configure this option, run the command:

     <M-x> customize-variable <RET> ipe-edit-movement-keyset <RET>

   This option allows for the definition of either one or more
pre-canned "keysets" (_Alphabetic_, _Arrows_, _Modifiers_, _WASD_, _VI_)
to be toggled on and off independently, or, for a "user defined" keyset
to be installed.

   (i.e.  If using the pre-canned keyset, it is possible to activate
both the _Alphabetic_ and the _Arrows_ options, and be able to move the
OPEN and CLOSE overlays using both the alphabetic and arrows keys, or,
the User can simply define their own preferred movement key bindings and
use those instead.)

* Menu:

* Core Movement (Alphabetic)::
* Core Movement (Arrows)::
* Core Movement (WASD)::
* Core Movement (VI)::
* Core Movement (Custom)::


File: ipe.info,  Node: Core Movement (Alphabetic),  Next: Core Movement (Arrows),  Up: Core Movement Options

4.2.1 Alphabetic
----------------

If the ‘ipe-edit-movement-keyset’ option includes the _Alphabetic_ flag,
then, when in ‘ipe-edit-mode’, the core movement of the OPEN and CLOSE
overlays is controlled by the same set of key bindings as the standard
*Emacs* character movement keys, but without the keyboard modifiers.

             <p>                    <P>
              ^                      ^
              |                      |
     <a> <b> OPEN <F> <E>  <A> <B> CLOSE <f> <e>
              |                      |
              v                      v
             <N>                    <n>

<a>
     Move OPEN to the 'beginning' (Command: ‘ipe-edit--open-beg’)
<p>
     Move OPEN 'up' (Command: ‘ipe-edit--open-up’)
<b>
     Move OPEN 'backward' (Command: ‘ipe-edit--open-backward’)
<F>
     Move OPEN 'forward' (Command: ‘ipe-edit--open-forward’)
<N>
     Move OPEN 'down' (Command: ‘ipe-edit--open-down’)
<E>
     Move OPEN to the 'end' (Command: ‘ipe-edit--open-end’)

<A>
     Move CLOSE to the 'beginning' (Command: ‘ipe-edit--close-beg’)
<P>
     Move CLOSE 'up' (Command: ‘ipe-edit--close-up’)
<B>
     Move CLOSE 'backward' (Command: ‘ipe-edit--close-backward’)
<f>
     Move CLOSE 'forward' (Command: ‘ipe-edit--close-forward’)
<n>
     Move CLOSE 'down' (Command: ‘ipe-edit--close-down’)
<e>
     Move CLOSE to the 'end' (Command: ‘ipe-edit--close-end’)


File: ipe.info,  Node: Core Movement (Arrows),  Next: Core Movement (WASD),  Prev: Core Movement (Alphabetic),  Up: Core Movement Options

4.2.2 Arrows
------------

If the ‘ipe-edit-movement-keyset’ option includes the _Arrows_ flag,
then, when in ‘ipe-edit-mode’, the core movement of the OPEN and CLOSE
overlays is controlled by the arrows keys (<up>, <left>, <right>,
<down>), the <home> and <end> keys, and the <CTRL> modifier.

                   <up>                                      <C-up>
                    ^                                          ^
                    |                                          |
     <home> <left> OPEN <C-right> <C-end>  <C-home> <C-left> CLOSE <right> <end>
                    |                                          |
                    v                                          v
                 <C-down>                                    <down>

<home>
     Move OPEN to the 'beginning' (Command: ‘ipe-edit--open-beg’)
<up>
     Move OPEN 'up' (Command: ‘ipe-edit--open-up’)
<left>
     Move OPEN 'backward' (Command: ‘ipe-edit--open-backward’)
<C-right>
     Move OPEN 'forward' (Command: ‘ipe-edit--open-forward’)
<C-down>
     Move OPEN 'down' (Command: ‘ipe-edit--open-down’)
<C-end>
     Move OPEN to the 'end' (Command: ‘ipe-edit--open-end’)

<C-home>
     Move CLOSE to the 'beginning' (Command: ‘ipe-edit--close-beg’)
<C-up>
     Move CLOSE 'up' (Command: ‘ipe-edit--close-up’)
<C-left>
     Move CLOSE 'backward' (Command: ‘ipe-edit--close-backward’)
<right>
     Move CLOSE 'forward' (Command: ‘ipe-edit--close-forward’)
<down>
     Move CLOSE 'down' (Command: ‘ipe-edit--close-down’)
<end>
     Move CLOSE to the 'end' (Command: ‘ipe-edit--close-end’)


File: ipe.info,  Node: Core Movement (WASD),  Next: Core Movement (VI),  Prev: Core Movement (Arrows),  Up: Core Movement Options

4.2.3 WASD
----------

If the ‘ipe-edit-movement-keyset’ option includes the _WASD_ flag, then,
when in ‘ipe-edit-mode’, the core movement of the OPEN and CLOSE
overlays is controlled by the (<q>, <w>, <a>, <s>, <d>, <e>) keys and
their uppercase counterparts.

             <w>                    <W>
              ^                      ^
              |                      |
     <q> <a> OPEN <D> <E>  <Q> <A> CLOSE <d> <e>
              |                      |
              v                      v
             <S>                    <s>

<q>
     Move OPEN to the 'beginning' (Command: ‘ipe-edit--open-beg’)
<w>
     Move OPEN 'up' (Command: ‘ipe-edit--open-up’)
<a>
     Move OPEN 'backward' (Command: ‘ipe-edit--open-backward’)
<D>
     Move OPEN 'forward' (Command: ‘ipe-edit--open-forward’)
<S>
     Move OPEN 'down' (Command: ‘ipe-edit--open-down’)
<E>
     Move OPEN to the 'end' (Command: ‘ipe-edit--open-end’)

<Q>
     Move CLOSE to the 'beginning' (Command: ‘ipe-edit--close-beg’)
<W>
     Move CLOSE 'up' (Command: ‘ipe-edit--close-up’)
<A>
     Move CLOSE 'backward' (Command: ‘ipe-edit--close-backward’)
<d>
     Move CLOSE 'forward' (Command: ‘ipe-edit--close-forward’)
<s>
     Move CLOSE 'down' (Command: ‘ipe-edit--close-down’)
<e>
     Move CLOSE to the 'end' (Command: ‘ipe-edit--close-end’)


File: ipe.info,  Node: Core Movement (VI),  Next: Core Movement (Custom),  Prev: Core Movement (WASD),  Up: Core Movement Options

4.2.4 VI
--------

If the ‘ipe-edit-movement-keyset’ option includes the _VI_ flag, then,
when in ‘ipe-edit-mode’, the core movement of the OPEN and CLOSE
overlays is controlled by the VI core character movement keys (<k>, <h>,
<l>, <j>) and their uppercase counterparts, plus the VI start and end of
line keys (<0>, <$>), and the VI word movement keys (<B> and <W>) for
the ‘ipe-edit--open-beg’ / ‘ipe-edit--open-end’ / ‘ipe-edit--close-beg’
/ ‘ipe-edit--close-end’ commands.

             <k>                    <K>
              ^                      ^
              |                      |
     <0> <h> OPEN <L> <B>  <W> <H> CLOSE <l> <$>
              |                      |
              v                      v
             <J>                    <j>

<0>
     Move OPEN to the 'beginning' (Command: ‘ipe-edit--open-beg’)
<k>
     Move OPEN 'up' (Command: ‘ipe-edit--open-up’)
<h>
     Move OPEN 'backward' (Command: ‘ipe-edit--open-backward’)
<L>
     Move OPEN 'forward' (Command: ‘ipe-edit--open-forward’)
<J>
     Move OPEN 'down' (Command: ‘ipe-edit--open-down’)
<B>
     Move OPEN to the 'end' (Command: ‘ipe-edit--open-end’)

<W>
     Move CLOSE to the 'beginning' (Command: ‘ipe-edit--close-beg’)
<K>
     Move CLOSE 'up' (Command: ‘ipe-edit--close-up’)
<H>
     Move CLOSE 'backward' (Command: ‘ipe-edit--close-backward’)
<l>
     Move CLOSE 'forward' (Command: ‘ipe-edit--close-forward’)
<j>
     Move CLOSE 'down' (Command: ‘ipe-edit--close-down’)
<$>
     Move CLOSE to the 'end' (Command: ‘ipe-edit--close-end’)


File: ipe.info,  Node: Core Movement (Custom),  Prev: Core Movement (VI),  Up: Core Movement Options

4.2.5 Custom Movement Keyset
----------------------------

A "user defined" set of 'Insert Pair Edit' (ipe) ‘ipe-edit-mode’
movement key bindings can be set using the customization option
‘ipe-edit--custom-movement-keyset’.

   To configure this option, run the command:

     <M-x> customize-variable <RET> ipe-edit--custom-movement-keyset <RET>

   Or, select the _'Insert Pair Edit' - Movement Keys: Custom Key Set_
option from the ‘Edit’ -> ‘Pairs’ menu:

     - Edit >
       ...
       - Pairs >
         ...
         - Options
           ...
           * 'Insert Pair Edit' - Movement Keys: Custom Key Set

   menu option.


File: ipe.info,  Node: Inserting and Aborting,  Next: Movement Units,  Prev: Core Movement Options,  Up: Core Edit Mode Bindings

4.3 Inserting and Aborting
==========================

To exit ‘ipe-edit-mode’, the User either _inserts_ the PAIR, or
_aborts_.

4.3.1 Inserting
---------------

<RET> (in ‘ipe-edit-mode’)

   Once the OPEN and CLOSE overlays have been used to correctly position
the OPEN and CLOSE strings of an 'Insert Pair Edit' (ipe) PAIR within
the buffer, they can be inserted into the buffer using the command:
‘ipe-edit--insert-pair’.

 -- Function: ipe-edit--insert-pair ()

     This command will insert the OPEN and CLOSE strings of an 'Insert
     Pair Edit' (ipe) PAIR into the buffer, exit the ‘ipe-edit-mode’,
     and, restore all key bindings to normal.

   Other "Insert And..."  commands are available.  (*Note 'Insert
And...' Commands::)

4.3.2 Aborting
--------------

<C-g> (in ‘ipe-edit-mode’)

   If it is not desirable to insert the OPEN and CLOSE strings
represented by the overlays within ‘ipe-edit-mode’, the mode can be
aborted using the command: ‘ipe-edit--abort’.

 -- Function: ipe-edit--abort ()

     This command will exit the ‘ipe-edit-mode’ and restore all key
     bindings to normal, without inserting the OPEN or CLOSE strings
     into the buffer.


File: ipe.info,  Node: Movement Units,  Next: Changing PAIRs,  Prev: Inserting and Aborting,  Up: Core Edit Mode Bindings

4.4 Movement Units
==================

The _default_ movement unit for a given 'Insert Pair Edit' (ipe) PAIR is
"by words", however, each individual PAIR can define its own _initial
movement_ (*Note Customization::.)

   Movement can be:

     "by characters"
     "by words"
     "by lines"
     "by lists"

   In addition to each PAIR defining its own _initial movement_,
movement can be changed in ‘ipe-edit-mode’ using the following commands,
(Bound to the <m> prefix in ‘ipe-edit-mode’ by default.)

     <m> <c> (in ‘ipe-edit-mode’)

      -- Function: ipe-edit--movement-by-char ()

          Changes the movement made by the ‘ipe-edit-mode’ core movement
          (*Note Core Movement::) commands to be "by characters".

     <m> <w> (in ‘ipe-edit-mode’)

      -- Function: ipe-edit--movement-by-word ()

          Changes the movement made by the ‘ipe-edit-mode’ core movement
          (*Note Core Movement::) commands to be "by words".

     <m> <l> (in ‘ipe-edit-mode’)

      -- Function: ipe-edit--movement-by-line ()

          Changes the movement made by the ‘ipe-edit-mode’ core movement
          (*Note Core Movement::) commands to be "by lines".  (*Note
          Line Movement::)

     <m> <x> (in ‘ipe-edit-mode’)

      -- Function: ipe-edit--movement-by-list ()

          Changes the movement made by the ‘ipe-edit-mode’ core movement
          (*Note Core Movement::) commands to be "by lists".  (*Note
          List Movement::)


File: ipe.info,  Node: Changing PAIRs,  Next: Mouse Movement,  Prev: Movement Units,  Up: Core Edit Mode Bindings

4.5 Changing PAIRs
==================

The text to be inserted by the OPEN and CLOSE overlays of an 'Insert
Pair Edit' (ipe) PAIR can be changed on the fly.

   <(> (in ‘ipe-edit-mode’)

 -- Function: ipe-edit--change-pair (replace)

     Prompts for a MNEMONIC used to identify a PAIR from the
     ‘customize’-able IPE-PAIRS / IPE-MODE-PAIRS variables, and replaces
     the currently displayed strings within the OPEN and CLOSE overlays
     with the OPEN and CLOSE strings for the newly identified PAIR.

   For example, assuming that:

   • The ‘ipe-insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>; and
   • The <[> MNEMONIC is bound to the PAIR <[> <]>.

   If you had originally used the keystrokes:

     <M-(> <(>

   To insert a <(> <)> PAIR into the buffer, you could change the this
to a <[> <]> PAIR after entering ‘ipe-edit-mode’ by using the
keystrokes:

     <(> <[>

   This can be especially useful when _Updating_ PAIRs, as a PAIR with a
given MNEMONIC can be selected by using the keystrokes:

     <M-u> <M-(> _MNEMONIC_

   And then changed to a new PAIR using the keystrokes:

     <(> _NEW-MNEMONIC_


File: ipe.info,  Node: Mouse Movement,  Prev: Changing PAIRs,  Up: Core Edit Mode Bindings

4.6 Mouse Movement
==================

If enabled via the ‘ipe-mouse-support-p’ option (Default: *t*), 'Insert
Pair Edit' (ipe) PAIRs can be moved using the Mouse.

<mouse-1> (in ‘ipe-edit-mode’)
     Left clicking on a location within the buffer, will reposition the
     currently displayed OPEN overlay to the start of the closest
     _lexical unit_.

     (Command: ‘ipe-mouse--open’)

<mouse-2> (in ‘ipe-edit-mode’)
     Clicking on a location within the buffer with the _mouse-2_ button,
     will reposition the currently displayed CLOSE overlay to the end of
     the closest _lexical unit_.

     (Command: ‘ipe-mouse--close’)

<drag-mouse-1> (in ‘ipe-edit-mode’)
     Selecting a _region_ by left clicking, and dragging the mouse from
     one location to another, will position the OPEN overlay at the
     _lexical unit_ closest to the start of the _region_, and the CLOSE
     overlay at the _lexical unit_ closest to the end of the _region_.

     (Command: ‘ipe-mouse--region’)

<wheel-up> / <wheel-down> (in ‘ipe-edit-mode’)
     If available, mouse wheel actions can be used to move the OPEN and
     CLOSE overlays forward and backward.

     (Commands: ‘ipe-mouse--open-backward’ / ‘ipe-mouse--close-forward’)

<C-wheel-up> / <C-wheel-down> (in ‘ipe-edit-mode’)
     Holding the <CTRL> key while using the mouse wheel can be used to
     move the OPEN and CLOSE overlays in the opposite directions.

     (Commands: ‘ipe-mouse--open-forward’ / ‘ipe-mouse--close-backward’)

<S-wheel-up> / <S-wheel-down> / <C-S-wheel-up> / <C-S-wheel-down> (in ‘ipe-edit-mode’)
     Holding the <SHIFT> key while using the mouse wheel can be used to
     move the OPEN and CLOSE overlays using alternate movements (i.e.
     "by-char" regardless of the current _Movement Mode_)

      (Commands: 
      ‘ipe-mouse--open-forward-alt’ / 
      ‘ipe-mouse--close-backward-alt’ / 
      ‘ipe-mouse--open-backward-alt’ / 
      ‘ipe-mouse--close-forward-alt’ 
      )

<M-wheel-up> / <M-wheel-down> (in ‘ipe-edit-mode’)
     Holding the <META> key while using the mouse wheel can be used to
     change the current "movement mode".

     (Commands: ‘ipe-mouse--next-movement’ /
     ‘ipe-mouse--previous-movement’)


File: ipe.info,  Node: Other Major Commands,  Next: Customization,  Prev: Core Edit Mode Bindings,  Up: Top

5 Other Major Insert-Pair-Edit Commands
***************************************

The following sections describe the other _Major_ 'Insert Pair Edit'
(ipe) commands.

* Menu:

* Updating PAIRs::  Commands to update existing PAIRs.
* Deleting PAIRs::  Commands to delete existing PAIRs.
* Replacing PAIRs:: Commands to replace existing PAIRs.


File: ipe.info,  Node: Updating PAIRs,  Next: Deleting PAIRs,  Up: Other Major Commands

5.1 Updating PAIRs
==================

     <C-u> <M-(> _MNEMONIC_

   The positions of existing PAIRs within a buffer can be _updated_ by
using the command:

 -- Function: ipe-insert-pair-edit-update (mnemonic)

     This command updates the position of the OPEN and CLOSE strings of
     an 'Insert Pair Edit' (ipe) PAIR. The OPEN and CLOSE strings of the
     PAIR are determined by: prompting for, and looking up, a MNEMONIC
     in the ‘customize’-able IPE-PAIRS / IPE-MODE-PAIRS variables.

   Calling the ‘ipe-insert-pair-edit-update’ command will search the
current buffer for a PAIR which matches the OPEN and CLOSE strings for
the given MNEMONIC. It will replace the OPEN and CLOSE strings with
overlays, which can then be moved using the standard 'Insert Pair Edit'
(ipe) commands (*Note Core Movement::).

   This command can be also be invoked by invoking the
'universal-argument' (Generally bound to <C-u>), before a call to
‘ipe-insert-pair-edit’.

   For example, assuming that:

   • The ‘ipe-insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>;
   • The _Modifiers_ ‘ipe-edit-movement-keyset’ has been enabled, and;
   • The buffer contains the following text:

          The quick brown (|fox) jumps over the lazy dog.

     (*Where*: The <|> character is used to represent the current
     position of POINT.)

   To update the position of the <(> <)> PAIR around "fox" you would use
the keystrokes:

     <C-u> <M-(> <(>

   Which will call ‘ipe-insert-pair-edit-update’, select the <(> <)>
PAIR around "fox", and enter ‘ipe-edit-mode’.

   To then move the existing parenthesis around "fox" to "over", you
would then use the keystroke:

     <M-f>

   Which will result in the buffer:

     The quick brown |fox (jumps) over the lazy dog.

   To then insert the <(> <)> PAIR into the buffer use the keystroke:

     <RET>

   *NOTE*: The ‘ipe-insert-pair-edit-update’ command will search for the
_nearest_ (*Note Update Search Process::) PAIR to POINT. The direction
of the search is determined by the option ‘ipe-update-forward-first-p’.


File: ipe.info,  Node: Deleting PAIRs,  Next: Replacing PAIRs,  Prev: Updating PAIRs,  Up: Other Major Commands

5.2 Deleting PAIRs
==================

     <C-u> <C-u> <M-(> _MNEMONIC_

   Existing PAIRs within a buffer can be _deleted_ by using the command:

 -- Function: ipe-insert-pair-edit-delete (mnemonic)

     This command deletes the OPEN and CLOSE strings of an 'Insert Pair
     Edit' (ipe) PAIR. The OPEN and CLOSE strings of the PAIR are
     determined by: prompting for, and looking up, a MNEMONIC in the
     ‘customize’-able IPE-PAIRS / IPE-MODE-PAIRS variables.

   (*Note Delete Customization::)

   Calling the ‘ipe-insert-pair-edit-delete’ command will search the
current buffer for a PAIR which matches the OPEN and CLOSE strings
corresponding the given MNEMONIC. If a PAIR is found, it will delete the
OPEN and CLOSE strings.

   This command can be also be invoked by invoking the
‘universal-argument’ (Generally bound to <C-u>), twice before a call to
‘ipe-insert-pair-edit’.

   For example, assuming that:

   • The ‘ipe-insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>, and;
   • The buffer contains the following text:

          The quick brown (|fox) jumps over the lazy dog.

     (*Where*: the <|> character is used to represent the current
     position of POINT.)

   To delete the parenthesis around "fox" you would use the keystrokes:

     <C-u> <C-u> <M-(> <(>

   Which will result in the buffer:

     The quick brown |fox jumps over the lazy dog.

   NOTE: The ‘ipe-insert-pair-edit-delete’ command will search for the
_nearest_ (*Note Update Search Process::) PAIR to POINT. The direction
of the search is determined by the ‘ipe-update-forward-first-p’ option.


File: ipe.info,  Node: Replacing PAIRs,  Prev: Deleting PAIRs,  Up: Other Major Commands

5.3 Replacing PAIRs
===================

     <C-u> <C-u> <C-u> <M-(> _MNEMONIC_

   An existing PAIR within a buffer can be _replaced_ with the OPEN and
CLOSE string of another PAIR by using the command:

 -- Function: ipe-insert-pair-edit-replace (mnemonic replacement)

     This command replaces the OPEN and CLOSE strings of an 'Insert Pair
     Edit' (ipe) PAIR. The OPEN and CLOSE strings of the PAIR to be
     replaced are determined by: prompting for, and looking up, a
     MNEMONIC in the ‘customize’-able IPE-PAIRS / IPE-MODE-PAIRS
     variables.  The PAIR specifying the replacement OPEN and CLOSE
     strings is also determined by prompting for, and looking up, a
     MNEMONIC in the ‘customize’-able IPE-PAIRS / IPE-MODE-PAIRS
     variables

   The ‘ipe-insert-pair-edit-replace’ command will search the current
buffer for a PAIR which matches the OPEN and CLOSE strings corresponding
the given MNEMONIC. If a PAIR is found, it will replace the OPEN and
CLOSE strings with overlays containing the new OPEN and CLOSE strings
for the PAIR identified by the second REPLACEMENT MNEMONIC. These new
OPEN and CLOSE strings can then be moved using the standard 'Insert Pair
Edit' (ipe) core movement (*Note Core Movement::) commands.

   This command can be also be invoked by invoking the
‘universal-argument’ (Generally bound to <C-u>), three times before a
call to ‘ipe-insert-pair-edit’.

   For example, assuming that:

   • The ‘ipe-insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>;
   • The <[> MNEMONIC is bound to the PAIR <[> <]>, and;
   • The buffer contains the following text:

          The quick brown (|fox) jumps over the lazy dog.

     (*Where*: The <|> character is used to represent the current
     position of POINT.)

   To replace the <(> <)> PAIR around "fox" with <[> <]>, you would use
the keystrokes:

     <C-u> <C-u> <C-u> <M-(> <(> <[>

   Which will result in the buffer:

     The quick brown [|fox] jumps over the lazy dog.

   NOTE: The ‘ipe-insert-pair-edit-replace’ command will search for the
_nearest_ (*Note Update Search Process::) PAIR to POINT. The direction
of the search is determined by the ‘ipe-update-forward-first-p’ option.


File: ipe.info,  Node: Customization,  Next: Other Edit Mode Bindings,  Prev: Other Major Commands,  Up: Top

6 Customization
***************

The set of PAIRs that can be inserted, updated or deleted using the
‘ipe-insert-pair-edit’ command is controlled by the:

     IPE-PAIRS
     IPE-MODE-PAIRS

   Variables.

   These variables can be used to define several different _types_ of
PAIRs (*Note Types of PAIR Definition::.)

   These variables can be edited in a number of ways:

* Menu:

* Types of PAIR Definition::
* Customization Using 'customize'::
* Customization Using the 'Pairs' Menu::
* Inline Customization::
* Display Customization::


File: ipe.info,  Node: Types of PAIR Definition,  Next: Customization Using 'customize',  Up: Customization

6.1 Types of PAIR Definition
============================

There are four _types_ of 'Insert Pair Edit' (ipe) PAIR definition:

     BASIC - A simple PAIR definition with just an OPEN and CLOSE
     string.
     INTERMEDIATE - A more complex PAIR definition which can have a
     predefined initial movement, an INFIX string, escapes, and can be
     _Auto-Inserted_.
     ADVANCED - An even more complex PAIR definition which can have all
     of the of customization an INTERMEDIATE PAIR, but with additional
     properties that define the position at which POINT is placed when a
     PAIR is inserted, a custom _indentation_ function, and a _menu_
     definition.
     CUSTOM MOVEMENT - A PAIR definition based upon a _custom movement_
     function.  (See: *Note Defining Custom 'ipe--movement' Functions::)

   Each customization option: (Using 'customize'; Using the "Edit" menu;
or _inline_) offers options to select the _type_ of PAIR that is to be
_added_, _edited_, or _deleted_.


File: ipe.info,  Node: Customization Using 'customize',  Next: Customization Using the 'Pairs' Menu,  Prev: Types of PAIR Definition,  Up: Customization

6.2 Customization Using 'customize'
===================================

To edit the global set of 'Insert Pair Edit' (ipe) PAIRs using the
*Emacs* ‘customize’ package, run the command:

     <M-x> customize-variable <RET> ipe-pairs <RET>

   This will display a ‘custom-mode’ buffer in which the values within
the IPE-PAIRS variable can be edited using standard *Emacs* ‘customize’
widgets.  These widgets can be used to enter the four _types_ of PAIRs
(*Note Types of PAIR Definition::) (Identified by the *Emacs*
‘customize’ VALUE MENU.)

   To edit a _Mode-Specific_ set of PAIRs using the *Emacs* ‘customize’
package, run the command:

     <M-x> customize-variable <RET> ipe-mode-pairs <RET>

   This will display a ‘custom-mode’ buffer in which the values within
the IPE-MODE-PAIRS variable can be edited using standard *Emacs*
‘customize’ widgets.  Each entry within the IPE-MODE-PAIRS variable,
associates a _mode_ with a set of PAIR definitions.


File: ipe.info,  Node: Customization Using the 'Pairs' Menu,  Next: Inline Customization,  Prev: Customization Using 'customize',  Up: Customization

6.3 Customization Using the 'Pairs' Menu
========================================

     - Edit >
       ...
       - Pairs >
         ...
         - Edit PAIR Definitions >
           ...

   If running in a graphical environment which supports a menu bar, (and
the *Emacs* ‘menu-bar-mode’ has been enabled) the 'Insert Pair Edit'
(ipe) package can be customized using the *Emacs* menu bar.

   *NOTE*: The 'Insert Pair Edit' (ipe) menu item is enabled using the
‘ipe-menu-support-p’ option.  (Default: *nil*) (*Note Enabling the
'Edit' -> 'Pairs' Menu::)

   The ‘Edit Pair Definitions >’ sub-menu contains a number of sub-menus
which can be used to _Add_, _Modify_ and _Delete_ 'Insert Pair Edit'
(ipe) PAIR definitions.

   ‘Edit Pair Definitions >’ sub menus:

‘Add PAIR Definition...’
     Displays a Window in which the definition of a new _Global_ PAIR
     can be edited using *Emacs* widgets.

‘Add Mode-Specific PAIR Definition...’
     Prompts the user for a MAJOR-MODE, and then displays a Window in
     which the definition of a new _Mode-Specific_ PAIR can be edited
     using *Emacs* widgets.

‘Edit PAIR Definition’
     Offers a sub-menu for each _Global_ PAIR, which if selected,
     displays a Window in which the definition of the selected _Global_
     PAIR can be edited using *Emacs* widgets.

‘Edit Mode-Specific PAIR Definition’
     Offers a sub-menu for each _Mode-Specific_ PAIR (for the current
     ‘major-mode’), which if selected, displays a Window in which the
     definition of the selected _Mode-Specific_ PAIR can be edited using
     *Emacs* widgets.  (This menu will only be enabled if there are
     existing _Mode-Specific_ PAIR definitions for the current buffer's
     ‘major-mode’.)

‘Edit MNEMONIC Definition...’
     Prompts the User for an MNEMONIC for an existing _Global_ PAIR
     (using the _minibuffer_), then prompts the User for a REPLACEMENT
     mnemonic, and then changes the MNEMONIC for the given _Global_ PAIR
     to the given REPLACEMENT MNEMONIC.

‘Edit Mode-Specific MNEMONIC Definition...’
     Prompts the User for an MNEMONIC for an existing _Mode-Specific_
     PAIR (using the _minibuffer_), then prompts the User for a
     REPLACEMENT MNEMONIC, and then changes the MNEMONIC for the given
     _Mode-Specific_ PAIR to the given REPLACEMENT mnemonic.  (This menu
     will only be enabled if there are existing _Mode-Specific_ PAIR
     definitions for the current buffer's ‘major-mode’.)

‘Delete PAIR Definition’
     Offers a sub-menu for each _Global_ PAIR, which if selected,
     deletes the given _Global_ PAIR.

‘Delete Mode-Specific PAIR Definition’
     Offers a sub-menu for each _Mode-Specific_ PAIR (for the current
     ‘major-mode’), which if selected, deletes the given _Mode-Specific_
     PAIR from the current mode.  (This menu will only be enabled if
     there are existing _Mode-Specific_ PAIR definitions for the current
     buffer's ‘major-mode’.)

‘Delete PAIR Definition...’
     Prompts the User for a MNEMONIC for an existing _Global_ PAIR
     (using the _minibuffer_), and then deletes the selected _Global_
     PAIR definition from the IPE-PAIRS variable.

‘Delete Mode-Specific PAIR Definition...’
     Prompts the User for a ‘major-mode’ and a MNEMONIC for an existing
     _Mode-Specific_ PAIR (using the _minibuffer_), and then deletes the
     selected _Mode-Specific_ PAIR from the IPE-MODE-PAIRS variable.


File: ipe.info,  Node: Inline Customization,  Next: Display Customization,  Prev: Customization Using the 'Pairs' Menu,  Up: Customization

6.4 Inline Customization
========================

'Insert Pair Edit' (ipe) PAIR definitions can also be added / updated or
deleted _inline_, by using key bindings which execute customization
commands from within the ‘ipe’ _minibuffer_ prompt, or when within the
‘ipe-edit-mode’ itself.

   Bindings are supplied for the following commands:

<C-+> (at the "Insert Pair: " prompt or in ‘ipe-edit-mode’)
     Prompts the User (using the ‘minibuffer’) to create a new 'Insert
     Pair Edit' (ipe) PAIR definition for a given MNEMONIC.

     (Command: ‘ipe-defn--edit-pair’)

<M-+> (at the "Insert Pair: " prompt or in ‘ipe-edit-mode’)
     Prompts the User (using the ‘minibuffer’) to create a new
     _Mode-Specific_ 'Insert Pair Edit' (ipe) PAIR definition for a
     given MNEMONIC.

     (Command: ‘ipe-defn--edit-mode-pair’)

<C-%> (at the "Insert Pair: " prompt or in ‘ipe-edit-mode’)
     Prompts the User (using the ‘minibuffer’) to change the MNEMONIC
     for an existing 'Insert Pair Edit' (ipe) PAIR.

     (Command: ‘ipe-defn--change-pair-mnemonic’)

<M-%> (at the "Insert Pair: " prompt or in ‘ipe-edit-mode’)
     Prompts the User (using the ‘minibuffer’) to change the MNEMONIC
     for an existing _Mode-Specific_ 'Insert Pair Edit' (ipe) PAIR.

     (Command: ‘ipe-defn--change-mode-pair-mnemonic’)

<C-*> (at the "Insert Pair: " prompt or in ‘ipe-edit-mode’)
     Prompts the User (using the ‘minibuffer’) to delete an existing
     'Insert Pair Edit' (ipe) PAIR.

     (Command: ‘ipe-defn--delete-pair’)

<M-*> (at the "Insert Pair: " prompt or in ‘ipe-edit-mode’)
     Prompts the User (using the ‘minibuffer’) to delete an existing
     _Mode-Specific_ 'Insert Pair Edit' (ipe) PAIR.

     (Command: ‘ipe-defn--delete-mode-pair’)

* Menu:

* Inline Customization Prompts::


File: ipe.info,  Node: Inline Customization Prompts,  Up: Inline Customization

6.4.1 Inline Customization Prompts
----------------------------------

When creating a new 'Insert Pair Edit' (ipe) PAIR (or editing an
existing PAIR) using the _Inline Customization_ commands, the User will
be prompted to enter the following information (using the ‘minibuffer’):

‘Create new 'Insert Pair Edit' PAIR for - MNEMONIC:’
     At this prompt, enter the (generally single character) MNEMONIC
     that will be used at the "Insert Pair: " prompt to identify the
     PAIR. (*Note Running ipe-insert-pair-edit::)

‘OPEN:’
     At this prompt, enter the OPEN string of the 'Insert Pair Edit'
     (ipe) PAIR to be associated with the given MNEMONIC.

‘CLOSE:’
     At this prompt, enter the CLOSE string of the 'Insert Pair Edit'
     (ipe) PAIR to be associated with the given MNEMONIC.

‘Set 'Intermediate' options?’
     At this prompt, enter a ‘y’ / ‘n’ answer.  Entering ‘n’ will
     complete the PAIR definition and exit the ‘minibuffer’.

‘Movement:’
     At this prompt, enter either:

        • characters
        • words
        • lines
        • lists

     This will define the _Initial Movement_ (*Note Movement Units::) of
     the PAIR to be associated with the given MNEMONIC.

‘INFIX:’
     If the ‘Movement:’ is set to ‘lines’, the User will be prompted to
     enter an (optional) ‘INFIX’.  (*Note Defining line PAIRs with an
     INFIX::.)  This may be left blank if no ‘INFIX’ is desired for the
     PAIR to be associated with MNEMONIC.

‘Include Escapes?’
     At this prompt, enter a ‘y’ / ‘n’ answer.  Entering ‘y’ will prompt
     the User to enter a list of ESCAPE / REPLACEMENT strings for the
     PAIR to be associated with MNEMONIC. (*Note Escaping Text within a
     PAIR::.)  This may be left blank if no ‘ESCAPEs’ are desired for
     the PAIR to be associated with MNEMONIC.

‘Escape Match Text:’
     If the ‘Include Escapes?’ is set to ‘y’, the ‘Escape Match Text:’
     prompt will be displayed.  At this prompt, enter ESCAPE text.
     Matches to this substring found between the OPEN and CLOSE strings
     will be replaced with the text entered at the next prompt.  (To
     ignore escaping completely, or to exit the ‘Escape Match Text’
     input after entering multiple ESCAPE / REPLACEMENT strings, leave
     this prompt blank and press <RET>.)

‘Escape Replacement Text:’
     If the ‘Include Escapes?’ is set to ‘y’, the ‘Escape Replacement
     Text:’ prompt will be displayed after entering an ESCAPE within the
     ‘Escape Match Text’ prompt.  At this prompt, enter the REPLACEMENT
     text corresponding to the ESCAPE text entered at the previous
     prompt.  Matches to the ESCAPE text found between the OPEN and
     CLOSE strings will be replaced with this text.  After entering the
     REPLACEMENT string, the User will be returned to the ‘Escape Match
     Text:’ prompt to enter further ESCAPES.

‘Auto-Insert?’
     At this prompt, enter a ‘y’ / ‘n’ answer.  Entering ‘y’ will
     indicate that when this PAIR is selected using the "Insert Pair: "
     prompt, the OPEN and CLOSE strings will be instantly inserted into
     the buffer without entering ‘ipe-edit-mode’.  (*Note Auto
     Insertion::)

‘Set 'Advanced' options?’
     At this prompt, enter a ‘y’ / ‘n’ answer.  Entering ‘n’ will
     complete the PAIR definition and exit the ‘minibuffer’.

‘Move Point on Insert:’
     At this prompt, enter either:

        • close-beg
        • close-end
        • open-beg
        • open-end
        • resume

     This will define the position at which POINT is set when the PAIR
     is inserted into the buffer (*Note Positioning POINT and MARK::.)

‘Indent Function:’
     At this prompt, enter either:

        • none
        • current
        • previous

     Indicating the position at which to indent the PAIR / intervening
     text for PAIRS with an _Initial Movement_ of "by lines".

‘Menu:’
     At this prompt, enter a string indicating the location of the newly
     defined PAIR within the various 'Insert Pair Edit' (ipe) ‘Pairs ->
     Edit’ sub-menus.  Setting this option will cause the PAIR
     definition to appear within sub-menus under the 'Insert Pair Edit'
     sub-menus.  (Further sub-menus can be defined by using a "/"
     character as a separator within this menu string.)  If left blank,
     the PAIR will appear at the root of the 'Insert Pair Edit' (ipe)
     sub-menus along with the other _Global_ PAIRS.


File: ipe.info,  Node: Display Customization,  Prev: Inline Customization,  Up: Customization

6.5 Display Customization
=========================

The fonts and colours used by the overlays that display the position of
the OPEN and CLOSE strings in ‘ipe-edit-mode’ can be customized by:

   Using ‘customize-face’ command for the following *Emacs* _faces_:

   • IPE-OPEN-HIGHLIGHT - The face used by OPEN overlay.

     It can be ‘customize’'d by running the command:

          <M-x> customize-face <RET> ipe-open-highlight <RET>

     (By default, the OPEN overlay will be displayed using the HIGHLIGHT
     face.)

   • IPE-CLOSE-HIGHLIGHT - The face used by the CLOSE overlay.

     It can be ‘customize’'d by running the command:

          <M-x> customize-face <RET> ipe-close-highlight <RET>

     (By default, the CLOSE overlay will be displayed using the
     SHOW-PAREN-MATCH face.)

   Or by using the *Emacs* menu option:

     - Edit >
       ...
       - Pairs >
         ...
         - Options

   And selecting ‘'Insert Pair Edit' - Display Options’;

   Other faces used by the ‘ipe-edit-mode’ are:

   • IPE-ESCAPE-HIGHLIGHT - The face used by the ESCAPE overlays.

     (*Note Escaping Text within a PAIR::)

   • IPE-HIGHLIGHT-INFIX - The Face used by the INFIX overlays.

     (*Note Defining line PAIRs with an INFIX::)

   • IPE-EMPTY-PAIR-HIGHLIGHT - The face used to highlight EMPTY OPEN /
     CLOSE string positions.

     (*Note PAIRs With Empty OPEN / CLOSE::)

   • IPE-DELETE-HIGHLIGHT - The face used to highlight the PAIR to be
     deleted when IPE-DELETE-ACTION is set to either ‘'highlight’ ,
     ‘'fade’ or ‘'prompt’.

     (*Note Delete Customization::)


File: ipe.info,  Node: Other Edit Mode Bindings,  Next: Other Features,  Prev: Customization,  Up: Top

7 Other Edit Mode Bindings
**************************

The following sections describe some of the other key-bindings /
commands available within ‘ipe-edit-mode’.

* Menu:

* 'Insert And...' Commands::
* Edit CONTENTS Commands::
* Next / Previous Commands::
* Multiple PAIRs Commands::
* Escaping Text within a PAIR::


File: ipe.info,  Node: 'Insert And...' Commands,  Next: Edit CONTENTS Commands,  Up: Other Edit Mode Bindings

7.1 'Insert And...' Commands
============================

When in ‘ipe-edit-mode’, to perform an action on insert of a PAIR (*Note
Inserting and Aborting::), the following keystrokes / commands can be
used:

<O> (in ‘ipe-edit-mode’)
     Insert the current PAIR at the given location and move POINT to the
     start of the OPEN string.  (Ignoring the _per-PAIR_ and default
     ‘ipe-set-mark-on-insert’ settings.)

     (Command: ‘ipe-edit--ia-goto-open’)

<C> (in ‘ipe-edit-mode’)
     Insert the current PAIR at the given location and move POINT to the
     start of the CLOSE string.  (Ignoring the _per-PAIR_ and default
     ‘ipe-set-mark-on-insert’ settings.)

     (Command: ‘ipe-edit--ia-goto-close’)

<M> (in ‘ipe-edit-mode’)
     Insert the current PAIR at the given location and leave POINT at
     its original location (Ignoring the _per-PAIR_ and default
     ‘ipe-set-mark-on-insert’ settings.)

     (Command: ‘ipe-edit--ia-resume’)

<Y> (in ‘ipe-edit-mode’)
     Insert the current PAIR and copy the text between the OPEN and
     CLOSE strings to the _kill-ring_.

     (Command: ‘ipe-edit--ia-copy-text’)

<K> (in ‘ipe-edit-mode’)
     Insert the current PAIR and kill the text between the OPEN and
     CLOSE strings.

     (Command: ‘ipe-edit--ia-kill-text’)

<u> (in ‘ipe-edit-mode’)
     Insert the current PAIR, prompt for another MNEMONIC, and then
     attempt to update the next PAIR that matches the PAIR definition
     associated with the MNEMONIC.

     (Command: ‘ipe-edit--ia-update-forward’)

<U> (in ‘ipe-edit-mode’)
     Insert the current PAIR, prompt for another MNEMONIC, and then
     attempt to update the previous PAIR that matches the PAIR
     definition associated with the MNEMONIC.

     (Command: ‘ipe-edit--ia-update-backward’)


File: ipe.info,  Node: Edit CONTENTS Commands,  Next: Next / Previous Commands,  Prev: 'Insert And...' Commands,  Up: Other Edit Mode Bindings

7.2 Edit CONTENTS Commands
==========================

When in ‘ipe-edit-mode’, to edit the _text_ between the OPEN and CLOSE
overlays (without exiting ‘ipe-edit-mode’), the following keystrokes /
commands can be used:

<C-k> (in ‘ipe-edit-mode’)
     Kill the text between the OPEN and CLOSE overlays, and remain in
     ‘ipe-edit-mode’.

     (Command: ‘ipe-edit--contents-kill’)

<M-w> (in ‘ipe-edit-mode’)
     Copy the text between the OPEN and CLOSE overlays to the *Emacs*
     _kill-ring_, and remain in ‘ipe-edit-mode’.

     (Command: ‘ipe-edit--contents-copy’)

<C-y> (in ‘ipe-edit-mode’)
     Paste the last killed text between the OPEN and CLOSE overlays
     (replacing the existing text), and remain in ‘ipe-edit-mode’.

     (Command: ‘ipe-edit--contents-yank’)

<%> (in ‘ipe-edit-mode’)
     Prompt the User for replacement text, and replace the text between
     the OPEN and CLOSE overlays with the text entered by the User.

     (Command: ‘ipe-edit--contents-replace’)

<C-SPC> (in ‘ipe-edit-mode’)
     Remove whitespace around the text between the OPEN and CLOSE
     overlays, and remain in ‘ipe-edit-mode’.

     (Command: ‘ipe-edit--contents-trim’)

<M-u> (in ‘ipe-edit-mode’)
     Convert the text between the OPEN and CLOSE overlays to uppercase,
     and remain in ‘ipe-edit-mode’.

     (Command: ‘ipe-edit--contents-upcase’)

<M-c> (in ‘ipe-edit-mode’)
     Capitalize the text between the OPEN and CLOSE overlays, and remain
     in ‘ipe-edit-mode’.

     (Command: (‘ipe-edit--contents-capitalize’))

<M-l> (in ‘ipe-edit-mode’)
     Convert the text between the OPEN and CLOSE overlays to lowercase,
     and remain in ‘ipe-edit-mode’.

     (Command: (‘ipe-edit--contents-downcase’))


File: ipe.info,  Node: Next / Previous Commands,  Next: Multiple PAIRs Commands,  Prev: Edit CONTENTS Commands,  Up: Other Edit Mode Bindings

7.3 Next / Previous Commands
============================

* Menu:

* Next / Previous PAIRs::
* Next / Previous CONTENTS::
* Next / Previous OPEN / CLOSE::


File: ipe.info,  Node: Next / Previous PAIRs,  Next: Next / Previous CONTENTS,  Up: Next / Previous Commands

7.3.1 Next / Previous PAIRs
---------------------------

To search for the next or previous PAIR (while in ‘ipe-edit-mode’) use
the commands:

   • <C-r> (in ‘ipe-edit-mode’)

     (Command: ‘ipe-edit--update-previous-pair’)

   • <C-s> (in ‘ipe-edit-mode’)

     (Command: ‘ipe-edit--update-next-pair’)

   These commands will search for the _next_ or _previous_ OPEN and
CLOSE string, and, if found, insert the current PAIR; create a new PAIR
of overlays over the next / previous PAIR, and; remain in
‘ipe-edit-mode’, allowing the User to continue editing the new PAIR.

   For example, assuming that:

   • The ‘ipe-insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>, and;
   • The buffer contains the following text:

          The (quick) brown (|fox) jumps (over) the lazy dog.

     (Where the <|> character represents the current position of POINT.)

   Then, updating a PAIR using the following keystrokes:

     <C-u> <M-(> <(>

   Will enter ‘ipe-edit-mode’ and edit the <(> <)> PAIR around "fox".

   Searching forward using the keystroke:

     <C-s>

   Will edit the <(> <)> PAIR around "over".

   Searching backward using the keystrokes:

     <C-r> <C-r>

   Will edit the <(> <)> PAIR around "quick".


File: ipe.info,  Node: Next / Previous CONTENTS,  Next: Next / Previous OPEN / CLOSE,  Prev: Next / Previous PAIRs,  Up: Next / Previous Commands

7.3.2 Next / Previous CONTENTS
------------------------------

To create a new PAIR around text which matches the CONTENTS contained
between the OPEN and CLOSE strings of an 'Insert Pair Edit' (ipe) PAIR
(while in ‘ipe-edit-mode’) use the commands:

   • <M-r> (in ‘ipe-edit-mode’)

     (Command: ‘ipe-edit--update-previous-contents’)

   • <M-s> (in ‘ipe-edit-mode’)

     (Command: ‘ipe-edit--update-next-contents’)

   These commands will search for the _next_ or _previous_ piece of text
which matches the text currently contained between the selected OPEN and
CLOSE strings, and, if found, insert the current PAIR; create a new PAIR
of overlays around the next / previous piece of text, and; remain in
‘ipe-edit-mode’, allowing the User to continue editing the new PAIR.

   For example, assuming that:

   • The ‘ipe-insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>, and;
   • The buffer contains the following text:

          The Quick Brown Fox |Jumps Over (The) Lazy Dog.

     (Where the <|> character represents the current position of POINT.)

   Then, updating a PAIR using the following keystrokes:

     <C-u> <M-(> <(>

   Will enter ‘ipe-edit-mode’ and edit the <(> <)> PAIR around the
second "The".

   Searching backward for the text "The" using the keystroke:

     <M-r>

   Will insert the brackets around the second "The", and add a new <(>
<)> PAIR around the first "The".

   Which will result in the buffer:

     (The) Quick Brown Fox |Jumps Over (The) Lazy Dog.


File: ipe.info,  Node: Next / Previous OPEN / CLOSE,  Prev: Next / Previous CONTENTS,  Up: Next / Previous Commands

7.3.3 Next / Previous OPEN / CLOSE
----------------------------------

To change the matched location of either the OPEN or CLOSE string of an
'Insert Pair Edit' (ipe) PAIR _individually_ (while in ‘ipe-edit-mode’)
use the commands:

   • <C-<> (in ‘ipe-edit-mode’)

     (Command: ‘ipe-edit--update-previous-open’)

   • <M->> (in ‘ipe-edit-mode’)

     (Command: ‘ipe-edit--update-next-open’)

   • <M-<> (in ‘ipe-edit-mode’)

     (Command: ‘ipe-edit--update-previous-close’)

   • <C->> (in ‘ipe-edit-mode’)

     (Command: ‘ipe-edit--update-next-close’)

   These commands will search for the _next_ or _previous_ OPEN or CLOSE
string of an 'Insert Pair Edit' (ipe) PAIR, and, if found, insert just
the current OPEN or CLOSE string (without inserting its corresponding
partner.)  The command will then create a new overlay over the next /
previous OPEN or CLOSE and remain in ‘ipe-edit-mode’, allowing the User
to continue editing the new PAIR.

   *NOTE*: Searches for OPEN and CLOSE strings will be bounded by their
corresponding partner string.  It will not be possible to select a CLOSE
before the currently selected OPEN, or to select an OPEN after the
currently selected CLOSE.

   For example, assuming that:

   • The ‘ipe-insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>, and;
   • The buffer contains the following text:

          The (quick) brown (|fox) jumps (over) the lazy dog.

     (Where the <|> character represents the current position of POINT.)

   Then, updating a PAIR using the following keystrokes:

     <C-u> <M-(> <(>

   Will enter ‘ipe-edit-mode’ and edit the <(> <)> PAIR around "fox".

   Searching forward for the next CLOSE using the keystroke:

     <C->>

   Will edit the <(> <)> PAIR around "fox jumps over".

   Searching backward for the previous OPEN using the keystroke:

     <C-<>

   Will edit the <(> <)> PAIR around "quick brown fox jumps over".


File: ipe.info,  Node: Multiple PAIRs Commands,  Next: Escaping Text within a PAIR,  Prev: Next / Previous Commands,  Up: Other Edit Mode Bindings

7.4 Multiple PAIRs Commands
===========================

When in ‘ipe-edit-mode’, it is possible to edit multiple PAIRs at once.
All core ‘ipe-edit-mode’ movement commands (*Note Core Movement::) will
operate on all active PAIRs, and all commands which edit the CONTENTS of
a PAIR (*Note Edit CONTENTS Commands::), will also operate on the
CONTENTS all active PAIRs.

   Adding / removing multiple PAIRs can be done in a number of different
ways:

* Menu:

* Adding Multiple PAIRs Using the Emacs Region::
* Adding Multiple PAIRs Using insert-pair-edit::
* Adding Multiple PAIRs Using Existing OPEN / CLOSE::
* Adding Multiple PAIRs Using PAIR CONTENT::
* Adding Multiple PAIRs Using the Mouse::
* Inserting Multiple PAIRs::
* Removing PAIRs::


File: ipe.info,  Node: Adding Multiple PAIRs Using the Emacs Region,  Next: Adding Multiple PAIRs Using insert-pair-edit,  Up: Multiple PAIRs Commands

7.4.1 Adding Multiple PAIRs Using the Emacs Region
--------------------------------------------------

If the *Emacs* _region_ is _active_ when running one of the 'Insert Pair
Edit' (ipe) commands:

   • ‘ipe-insert-pair-edit-update’
   • ‘ipe-insert-pair-edit-replace’

   These commands will operate upon all PAIRs found within the _region_.
OPEN and CLOSE overlays will be created for each PAIR found within the
active *Emacs* _region_.

   For example, assuming that:

   • The ‘ipe-insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The _Modifiers_ ‘ipe-edit-movement-keyset’ has been enabled;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>, and;
   • The buffer contains the following text:

          |The (quick) brown (fox) jumps (over) the lazy dog.@

     (Where the <|> character represents the current position of POINT,
     and the <@> character represents the current position of MARK for
     an active *Emacs* _region_.)

   Then, updating the set of PAIRs using the following keystrokes:

     <C-u> <M-(> <(>

   Will enter ‘ipe-edit-mode’ and edit all three of the <(> <)> PAIRs
(around "quick", "fox" and "over"):

   Moving the PAIRs forward one word using the following keystroke:

     <M-f>

   Which will result in the buffer:

     |The quick (brown) fox (jumps) over (the) lazy dog.@


File: ipe.info,  Node: Adding Multiple PAIRs Using insert-pair-edit,  Next: Adding Multiple PAIRs Using Existing OPEN / CLOSE,  Prev: Adding Multiple PAIRs Using the Emacs Region,  Up: Multiple PAIRs Commands

7.4.2 Adding Multiple PAIRs Using insert-pair-edit
--------------------------------------------------

The simplest way to add additional 'Insert Pair Edit' (ipe) PAIRs when
already in ‘ipe-edit-mode’ is to re-run the ‘ipe-insert-pair-edit’
command.  When already in ‘ipe-edit-mode’ mode, re-running
‘ipe-insert-pair-edit’ will insert another PAIR (with the same OPEN and
CLOSE strings as the active PAIR) at POINT.

   For example, assuming that:

   • The ‘ipe-insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The _Modifiers_ ‘ipe-edit-movement-keyset’ has been enabled;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>, and;
   • The buffer contains the following text:

          The quick brown (|fox) jumps over the lazy dog.

     (Where the <|> character represents the current position of POINT.)

   Then, updating a PAIR using the following keystrokes:

     <C-u> <M-(> <(>

   Will enter ‘ipe-edit-mode’ and edit the <(> <)> PAIR around "fox".

   Moving the PAIR forward two words using the following keystrokes:

     <M-f> <M-f>

   Which will result in the buffer:

     The quick brown |fox jumps (over) the lazy dog.

   And then running ‘ipe-insert-pair-edit’ again (without exiting
‘ipe-edit-mode’), using the keystroke:

     <M-(>

   Will add a second PAIR around "fox":

   Which will result in the buffer:

     The quick brown (|fox) jumps (over) the lazy dog.

   Both of which can be moved one word forward using the keystroke:

     <M-f>

   Which will result in the buffer:

     The quick brown |fox (jumps) over (the) lazy dog.


File: ipe.info,  Node: Adding Multiple PAIRs Using Existing OPEN / CLOSE,  Next: Adding Multiple PAIRs Using PAIR CONTENT,  Prev: Adding Multiple PAIRs Using insert-pair-edit,  Up: Multiple PAIRs Commands

7.4.3 Adding Multiple PAIRs Using Existing OPEN / CLOSE
-------------------------------------------------------

Additional 'Insert Pair Edit' (ipe) PAIRs from can be added within
‘ipe-edit-mode’ by searching the buffer for existing text which matches
the OPEN and CLOSE strings of the currently active PAIR. This can be
useful when _marking up_ a common set of existing PAIRs.

   Keystrokes / commands are supplied in ‘ipe-edit-mode’ to:

<s> (in ‘ipe-edit-mode’)
     Search forward (from the end of the current CLOSE overlay) for
     matches to the current OPEN and CLOSE strings, and, if they exist,
     delete them from the buffer and replace them with a new 'Insert
     Pair Edit' (ipe) PAIR.

     (Command: ‘ipe-edit--add-next-pair’)

<r> (in ‘ipe-edit-mode’)
     Search backward (from the start of the current OPEN overlay) for
     matches to the current OPEN and CLOSE strings, and, if they exist,
     delete them from the buffer and replace them with a new 'Insert
     Pair Edit' (ipe) PAIR.

     (Command: ‘ipe-edit--add-previous-pair’)

   For example, assuming that:

   • The ‘ipe-insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The _Modifiers_ ‘ipe-edit-movement-keyset’ has been enabled;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>;
   • The <[> MNEMONIC is bound to the PAIR <[> <]>, and;
   • The buffer contains the following text:

          The (quick) brown (|fox) jumps (over) the lazy dog.

     (Where the <|> character represents the current position of POINT.)

   Then, updating a PAIR using the following keystrokes:

     <C-u> <M-(> <(>

   Will enter ‘ipe-edit-mode’ and edit the <(> <)> PAIR around the
"fox".

   Searching forward for another <(> <)> PAIR can be achieved using the
following keystroke:

     <s>

   Which will result in the PAIR around "over" being added as a second
'Insert Pair Edit' (ipe) PAIR.

   Searching backward for another <(> <)> PAIR can be achieved using the
following keystroke:

     <r>

   Which will result in the PAIR around "quick" being added as a third
'Insert Pair Edit' (ipe) PAIR.

   These three PAIRs can then be edited as one by the ‘ipe-edit-mode’
commands.

   For example, to change all of the PAIRs from <(> <)> PAIRs, to <[>
<]> PAIRs, you would enter the keystrokes:

     <(> <[>

   Which will result in the buffer:

     The [quick] brown [|fox] jumps [over] the lazy dog.


File: ipe.info,  Node: Adding Multiple PAIRs Using PAIR CONTENT,  Next: Adding Multiple PAIRs Using the Mouse,  Prev: Adding Multiple PAIRs Using Existing OPEN / CLOSE,  Up: Multiple PAIRs Commands

7.4.4 Adding Multiple PAIRs Using PAIR CONTENT
----------------------------------------------

Additional 'Insert Pair Edit' (ipe) PAIRs can be added within
‘ipe-edit-mode’ by searching the buffer for existing text which matches
the text between OPEN and CLOSE strings of the currently active PAIR.
This can be useful when _marking up_ the same word / phrase with a
common PAIR.

   Keystrokes / commands are supplied in ‘ipe-edit-mode’ to:

<S> (in ‘ipe-edit-mode’)
     Search forward (from the end of the current CLOSE overlay) for
     matches to the text between the current OPEN and CLOSE strings,
     and, if it exists, add a new 'Insert Pair Edit' (ipe) PAIR around
     the text.

     (Command: ‘ipe-edit--add-next-contents’)

<R> (in ‘ipe-edit-mode’)
     Search backward (from the start of the current OPEN overlay) for
     matches to the text between the current OPEN and CLOSE strings,
     and, if it exists, add a new 'Insert Pair Edit' (ipe) PAIR around
     the text.

     (Command: ‘ipe-edit--add-previous-contents’)

   For example, assuming that:

   • The ‘ipe-insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The _Modifiers_ ‘ipe-edit-movement-keyset’ has been enabled;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>;
   • The <[> MNEMONIC is bound to the PAIR <[> <]>, and;
   • The buffer contains the following text:

          The quick brown fox jumps over the lazy dog.
          The quick brown (|fox) jumps over the lazy dog.
          The quick brown fox jumps over the lazy dog.

     (Where the <|> character represents the current position of POINT.)

   Then, updating a PAIR using the following keystrokes:

     <C-u> <M-(> <(>

   Will enter ‘ipe-edit-mode’ and edit the <(> <)> PAIR around the
middle "fox".

   Searching forward for another match to the string "fox" can be
achieved using the following keystroke:

     <S>

   Which will result in a new PAIR being added around "fox" on the third
line.

   Which will result in the buffer:

     The quick brown fox jumps over the lazy dog.
     The quick brown (|fox) jumps over the lazy dog.
     The quick brown (fox) jumps over the lazy dog.

   Searching backward for another "fox" string can be achieved using the
following keystroke:

     <R>

   Which will result in a new PAIR being added around "fox" on the first
line.

   Which will result in the buffer:

     The quick brown (fox) jumps over the lazy dog.
     The quick brown (|fox) jumps over the lazy dog.
     The quick brown (fox) jumps over the lazy dog.

   These three PAIRs can then be edited as one by the ‘ipe-edit-mode’
commands.

   For example, To change all of the PAIRs from <(> <)> PAIRs, to <[>
<]> PAIRs, use the following keystrokes:

     <(> <[>

   Which will result in the buffer:

     The quick brown [fox] jumps over the lazy dog.
     The quick brown [|fox] jumps over the lazy dog.
     The quick brown [fox] jumps over the lazy dog.


File: ipe.info,  Node: Adding Multiple PAIRs Using the Mouse,  Next: Inserting Multiple PAIRs,  Prev: Adding Multiple PAIRs Using PAIR CONTENT,  Up: Multiple PAIRs Commands

7.4.5 Adding Multiple PAIRs Using the Mouse
-------------------------------------------

Additional 'Insert Pair Edit' (ipe) PAIRs can be added within
‘ipe-edit-mode’ using mouse clicks.  This can be useful when _marking
up_ lots of different text with a common PAIR in a graphical
environment.

   Bindings are supplied in ‘ipe-edit-mode’ to:

<C-mouse-1> (in ‘ipe-edit-mode’)
     Add a PAIR around the appropriate _lexical unit_ closest to the
     position at which the mouse is clicked.

     (Command: ‘ipe-mouse--add-pair’)

<C-drag-mouse-1> (in ‘ipe-edit-mode’)
     Add a PAIR around the appropriate _lexical units_ closest to the
     region specified by a mouse drag.  (i.e.  The OPEN and CLOSE
     overlays will be placed at the start and end of the region given by
     the closest lexical unit positions to the points at which the mouse
     was first clicked and at which the mouse was released.)

     (Command: ‘ipe-mouse--add-pair-region’)

   For example, assuming that:

   • The ‘ipe-menu-support-p’ option has been enabled;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>, and;
   • The buffer contains the following text:

          The quick brown (|fox) jumps over the lazy dog.

     (Where the <|> character represents the current position of POINT.)

   Then, updating a PAIR from the:

     - Edit >
       ...
       - Pairs >
         ...
         - Update PAIR >
           - ( ... )

   Menu item.

   Will enter ‘ipe-edit-mode’ and edit the <(> <)> PAIR around "fox".

   Holding the <CTRL> key and clicking on the "i" within the word
"quick" with the ‘mouse-1’ button, will add another PAIR around "quick".

   Which will result in the buffer:

     The (quick) brown (|fox) jumps over the lazy dog.

   Holding the <CTRL> key and dragging the mouse from the "o" at the
start of the word "over" to the "y" at the end of "lazy" with the
‘mouse-1’ button, will add a third PAIR around "over the lazy".

   Which will result in the buffer:

     The (quick) brown (|fox) jumps (over the lazy) dog.


File: ipe.info,  Node: Inserting Multiple PAIRs,  Next: Removing PAIRs,  Prev: Adding Multiple PAIRs Using the Mouse,  Up: Multiple PAIRs Commands

7.4.6 Inserting Multiple PAIRs
------------------------------

To insert a PAIR when using ‘ipe-edit-mode’ to edit multiple PAIRs at
once, the following keystrokes / commands are supplied:

<M-j> (in ‘ipe-edit-mode’)
     Insert the first 'Insert Pair Edit' (ipe) OPEN and CLOSE overlay.
     If there are no remaining PAIRs after the first PAIR has been
     inserted, it will exit ‘ipe-edit-mode’.

     With a prefix ‘ARG’, insert the ‘ARG’'th PAIR.

     (Command: ‘ipe-edit--insert-first-pair’)

<C-j> (in ‘ipe-edit-mode’)
     Insert the last 'Insert Pair Edit' (ipe) OPEN and CLOSE overlay.
     If there are no remaining PAIRs after the last PAIR has been
     inserted, it will exit ‘ipe-edit-mode’.

     With a prefix ‘ARG’, insert the ‘ARG’'th PAIR from the end.

     (Command: ‘ipe-edit--insert-last-pair’)

   For example, assuming that:

   • The ‘ipe-insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>, and;
   • The buffer contains the following text:

          |The quick (brown) (fox) (jumps) (over) (the) lazy dog.

     (Where the <|> character represents the current position of POINT.)

   Then, selecting the entire buffer and updating all of the <(> <)>
PAIRs using the following keystrokes:

     <C-x> <h> <C-u> <M-(>

   Should select five PAIRs (around 'brown', 'fox', 'jumps', 'over' and
'the'.)

   To just insert the PAIR around 'brown', use the keystroke:

     <M-j>

   To just insert the PAIR around 'the', use the keystroke:

     <C-j>

   To then remove the remaining PAIRs (*Note Removing PAIRs::), use the
keystroke:

     <DEL>

   This should leave the buffer:

     |The quick (brown) fox jumps over (the) lazy dog.


File: ipe.info,  Node: Removing PAIRs,  Prev: Inserting Multiple PAIRs,  Up: Multiple PAIRs Commands

7.4.7 Removing PAIRs
--------------------

To remove a PAIR when using ‘ipe-edit-mode’ to edit multiple PAIRs at
once, the following keystrokes / commands are supplied:

<M-d> (in ‘ipe-edit-mode’)
     Remove the first 'Insert Pair Edit' (ipe) OPEN and CLOSE overlay.
     If there are no remaining PAIRs after the first PAIR has been
     removed, it will exit ‘ipe-edit-mode’.

     (Command: ‘ipe-edit--delete-first-pair’)

<DEL> (in ‘ipe-edit-mode’)
     Remove all 'Insert Pair Edit' (ipe) OPEN and CLOSE overlays.  As
     there will be no remaining PAIRs after all of the PAIRs have been
     removed, exit ‘ipe-edit-mode’.

     (Command: ‘ipe-edit--delete-all-pairs’)

<C-d> (in ‘ipe-edit-mode’)
     Remove the last 'Insert Pair Edit' (ipe) OPEN and CLOSE overlay.
     If there are no remaining PAIRs after the last PAIR has been
     removed, it will exit ‘ipe-edit-mode’.

     (Command: ‘ipe-edit--delete-last-pair’)

<C-mouse-2> (in ‘ipe-edit-mode’)
     Remove the _nearest_ 'Insert Pair Edit' (ipe) OPEN and CLOSE
     overlay to the point at which the mouse is clicked.  If there are
     no remaining PAIRs after the last PAIR has been removed, it will
     exit ‘ipe-edit-mode’.

     (Command: ‘ipe-mouse--delete-pair’)

   *NOTE*: Unmodified mouse click / drag commands (*Note Mouse
Movement::) will always remove all but one PAIR.


File: ipe.info,  Node: Escaping Text within a PAIR,  Prev: Multiple PAIRs Commands,  Up: Other Edit Mode Bindings

7.5 Escaping Text within a PAIR
===============================

_Intermediate_ and _Advanced_ (*Note Types of PAIR Definition::) 'Insert
Pair Edit' (ipe) PAIRs can define ESCAPE strings.

   When present between an OPEN and CLOSE overlay within
‘ipe-edit-mode’, ESCAPE strings will be _replaced_ with overlays
displaying a REPLACEMENT string.  These REPLACEMENT strings will also be
inserted into the buffer if the PAIR is inserted into the buffer using
the ‘ipe-edit--insert-pair’ command.

   This can be useful when using the 'Insert Pair Edit' (ipe) library to
insert PAIRs of "quotes".

   REPLACEMENT strings will be displayed using the IPE-ESCAPE-HIGHLIGHT
face.

   For example, if an 'Insert Pair Edit' (ipe) PAIR was defined with:

   • A MNEMONIC <'>;
   • <'> as its OPEN string, and;
   • <'> as its CLOSE string.

   The User could define an ESCAPE for the PAIR which replaced internal
<'> strings between the OPEN and CLOSE string with <\'> (backslash +
quote) strings, thus allowing internal quote strings to be distinguished
from the outer PAIR of quotes.

   For example, assuming that:

   • The ‘ipe-insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The _Modifiers_ ‘ipe-edit-movement-keyset’ has been enabled;
   • The <'> MNEMONIC is bound to the PAIR <'> <'>;
   • The _ESCAPES_ for the <'> MNEMONIC have been defined as:

      
      ' -> \' 
      \ -> \\ 
      

     and;
   • The buffer contains the following text:

          The quick brown '|fox' jumps over the lazy dog.

     (Where the <|> character represents the current position of POINT.)

   Then, inserting a PAIR using the following keystrokes:

     <M-(> <'>

   And then moving the OPEN backward and the CLOSE forward using the
following keystrokes:

     <C-b> <C-f>

   Will position the <'> characters around the phrase "brown fox jumps",
and ESCAPE the <'> characters around "fox", by replacing them with <\'>
REPLACEMENTS.

   Which will result in the buffer:

     The quick 'brown \'fox\' jumps' over the lazy dog.

   *NOTE*: The 'Insert Pair Edit' (ipe) _Update_ commands (*Note
Updating Existing PAIRs::) recognise ESCAPE strings, and adjust their
matching algorithms accordingly.


File: ipe.info,  Node: Other Features,  Next: Development,  Prev: Other Edit Mode Bindings,  Up: Top

8 Other Features
****************

The following sections describe the more advanced features (and
associated commands / key-bindings) of the 'Insert Pair Edit' (ipe)
package.

* Menu:

* Line Movement::
* List Movement::
* Defining line PAIRs with an INFIX::
* Auto Insertion::
* Positioning POINT and MARK::
* Centering the Display on a PAIR::
* PAIRs With Empty OPEN / CLOSE::
* Updating Existing PAIRs::
* Delete Customization::


File: ipe.info,  Node: Line Movement,  Next: List Movement,  Up: Other Features

8.1 Line Movement
=================

_Intermediate_ and _Advanced_ (*Note Types of PAIR Definition::) 'Insert
Pair Edit' (ipe) PAIRs can be defined with an _Initial Movement_ of "by
lines".  (The User can also change the current movement lexical unit
_on-the-fly_ within ‘ipe-edit-mode’ to "by lines" using the
‘ipe-edit--movement-by-line’ command.  (*Note Movement Units::))

   The behaviour of the core movement (*Note Core Movement::) commands
is modified for PAIRs with a "by lines" movement type.

   The _up_ and _down_ commands:

   • ‘ipe-edit--open-up’
   • ‘ipe-edit--open-down’
   • ‘ipe-edit--close-up’
   • ‘ipe-edit--close-down’

   operate as per other movement modes ("by characters", "by words".)

   However, the other core movement commands are re-bound to have
different behaviour:

* Menu:

* Line Movement - Forward / Backward::
* Line Movement - Beginning / End::


File: ipe.info,  Node: Line Movement - Forward / Backward,  Next: Line Movement - Beginning / End,  Up: Line Movement

8.1.1 Line Movement - Forward / Backward
----------------------------------------

The Forward / Backward core movement (*Note Core Movement::) of 'Insert
Pair Edit' (ipe) PAIRS with an _Initial Movement_ of "by lines" is
modified from the standard pattern used by the "by characters" / "by
words" movements.

   The:

   • ‘ipe-edit--open-forward’
   • ‘ipe-edit--open-backward’
   • ‘ipe-edit--close-forward’
   • ‘ipe-edit--close-backward’

   commands, are re-bound so that instead of moving the OPEN and CLOSE
overlays, they are used to insert whitespace at the beginning of each
intervening line between the OPEN and CLOSE overlays.

   For example, assuming that:

   • The ‘ipe-insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The _Modifiers_ ‘ipe-edit-movement-keyset’ has been enabled;
   • The <{> MNEMONIC is bound to the PAIR <{> and <}>;
   • The _Initial Movement_ for the <{> MNEMONIC is "by lines", and;
   • The buffer contains the following text:

          {
          The quick brown fox jumps over the lazy dog.
          The quick brown fox jumps over the lazy dog.
          The quick brown fox jumps over the lazy dog.
          }

   To indent the lines between the <{> and <}> in the following text by
two spaces you would used the keystrokes:

     <C-u> <M-(> <{>

   Which will edit the <{> <}> PAIR and enter ‘ipe-edit-mode’.

   You would then use the keystrokes:

     <C-f> <C-f>

   To indent the text between the <{> <}> by two spaces.

   Which will result in the buffer:

     {
       The quick brown fox jumps over the lazy dog.
       The quick brown fox jumps over the lazy dog.
       The quick brown fox jumps over the lazy dog.
     }

   To remove the indent of the text between the <{> <}>, you would use
the keystrokes:

     <M-b> <M-b>

   Which will result in the buffer:

     {
     The quick brown fox jumps over the lazy dog.
     The quick brown fox jumps over the lazy dog.
     The quick brown fox jumps over the lazy dog.
     }


File: ipe.info,  Node: Line Movement - Beginning / End,  Prev: Line Movement - Forward / Backward,  Up: Line Movement

8.1.2 Line Movement - Beginning / End
-------------------------------------

The Beginning / End core movement (*Note Core Movement::) of 'Insert
Pair Edit' (ipe) PAIRS with an _Initial Movement_ of "by lines" is
modified from the standard pattern used by the "by characters" / "by
words" movements.

   The:

   • ‘ipe-edit--open-beg’
   • ‘ipe-edit--open-end’
   • ‘ipe-edit--close-beg’
   • ‘ipe-edit--close-end’

   commands, are re-bound so that instead of moving the OPEN and CLOSE
overlays to beginning / end of a line, they are instead used to _toggle_
the insertion of an empty line before / after the OPEN / CLOSE overlay.

   For example, assuming that:

   • The ‘ipe-insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The _Modifiers_ ‘ipe-edit-movement-keyset’ has been enabled;
   • The <{> MNEMONIC is bound to the PAIR <{> and <}>;
   • The _Initial Movement_ for the <{> MNEMONIC is "by lines", and;
   • The buffer contains the following text:

          The quick brown fox jumps over the lazy dog.
          {The quick brown fox jumps over the lazy dog.}
          The quick brown fox jumps over the lazy dog.

   To add extra empty lines before and after the <{> and <}>, you would
first use the keystrokes:

     <C-u> <M-(> <{>

   Which will update the existing <{> <}> PAIR, and enter
‘ipe-edit-mode’.

   You would then use the keystrokes:

     <C-a>

   Which will add an empty line before the OPEN overlay.

   Which will result in the buffer:

     The quick brown fox jumps over the lazy dog.
     {
     The quick brown fox jumps over the lazy dog.}
     The quick brown fox jumps over the lazy dog.

   And you would then use the keystrokes:

     <C-e>

   To add an empty line after the CLOSE overlay.

   Which will result in the buffer:

     The quick brown fox jumps over the lazy dog.
     {
     The quick brown fox jumps over the lazy dog.
     }
     The quick brown fox jumps over the lazy dog.

   These empty lines can be removed by the ‘ipe-edit--open-end’ /
‘ipe-edit--close-beg’ commands, using the keystrokes:

     <M-a> <M-e>

   Which will result in the buffer:

     The quick brown fox jumps over the lazy dog.
     {The quick brown fox jumps over the lazy dog.}
     The quick brown fox jumps over the lazy dog.


File: ipe.info,  Node: List Movement,  Next: Defining line PAIRs with an INFIX,  Prev: Line Movement,  Up: Other Features

8.2 List Movement
=================

_Intermediate_ and _Advanced_ (*Note Types of PAIR Definition::) 'Insert
Pair Edit' (ipe) PAIRs can be defined with an _Initial Movement_ of "by
lists".  (The User can also change the current movement lexical unit
_on-the-fly_ within ‘ipe-edit-mode’ to "by lists" using the
‘ipe-edit--movement-by-list’ command.  (*Note Movement Units::))

   The behaviour of the core movement (*Note Core Movement::) commands
is modified for PAIRs with a "by lists" movement type.

* Menu:

* List Movement - Forward / Backward::
* List Movement - Up / Down::
* List Movement - Beginning / End::


File: ipe.info,  Node: List Movement - Forward / Backward,  Next: List Movement - Up / Down,  Up: List Movement

8.2.1 List Movement - Forward / Backward
----------------------------------------

The Forward / Backward core movement (*Note Core Movement::) of 'Insert
Pair Edit' (ipe) PAIRS with an _Initial Movement_ of "by lists" is
modified from the standard pattern used by the "by characters" / "by
words" movements.

   The:

   • ‘ipe-edit--open-forward’
   • ‘ipe-edit--open-backward’
   • ‘ipe-edit--close-forward’
   • ‘ipe-edit--close-backward’

   commands, are re-bound so that instead of moving the OPEN and CLOSE
overlays forward / backward over text, they instead move as per the
*Emacs* ‘forward-list’ / ‘backward-list’ commands.

   For example, assuming that:

   • The ‘ipe-insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The _Modifiers_ ‘ipe-edit-movement-keyset’ has been enabled;
   • The <[> MNEMONIC is bound to the PAIR <[> <]>;
   • The _Initial Movement_ for the <[> MNEMONIC is "by lists", and;
   • The buffer contains the following text:

          ([(a b c)](d e f)(g h i))

   To edit the <[> <]> PAIR, you would enter the keystrokes:

     <C-u> <M-(> <[>

   Which will edit the <[> <]> PAIR around "(a b c)", and enter
‘ipe-edit-mode’.

   Then, to move the _closing_ <]> around "(a b c)" _forward_, you would
use the keystroke:

     <C-f>

   Which will move the <]> forward "by list".

   Which will result in the buffer:

     ([(a b c)(d e f)](g h i))

   Then, to move the _opening_ square bracket around "(a b c)(d e f)"
_forward_, you would use the keystroke:

     <M-f>

   Which will move the <[> forward "by list".

   Which will result in the buffer:

     ((a b c)[(d e f)](g h i))


File: ipe.info,  Node: List Movement - Up / Down,  Next: List Movement - Beginning / End,  Prev: List Movement - Forward / Backward,  Up: List Movement

8.2.2 List Movement - Up / Down
-------------------------------

The Up / Down core movement (*Note Core Movement::) of 'Insert Pair
Edit' (ipe) PAIRS with an _Initial Movement_ of "by lists" is modified
from the standard pattern used by the "by characters" / "by words"
movements.

   The:

   • ‘ipe-edit--open-up’
   • ‘ipe-edit--open-down’
   • ‘ipe-edit--close-up’
   • ‘ipe-edit--close-down’

   commands, are re-bound so that instead of moving the OPEN and CLOSE
overlays up / down lines of text, they instead move as per the *Emacs*
‘up-list’ / ‘down-list’ commands.

   For example, assuming that:

   • The ‘ipe-insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The _Modifiers_ ‘ipe-edit-movement-keyset’ has been enabled;
   • The <[> MNEMONIC is bound to the PAIR <[> <]>;
   • The _Initial Movement_ for the <[> MNEMONIC is "by lists", and;
   • The buffer contains the following text:

          ([(a b c)](d e f)(g h i))

   To edit the <[> <]> PAIR, you would enter the keystrokes:

     <C-u> <M-(> <[>

   Which will edit the <[> <]> PAIR around "(a b c)", and enter
‘ipe-edit-mode’.

   Then, to move the <[> <]> PAIR around "(a b c)" _up_, you would use
the keystroke:

     <C-p>

   Which will move the <[> <]> PAIR up "by list".

   Which will result in the buffer:

     [((a b c)(d e f)(g h i))]

   Then, to move the <[> <]> PAIR around the entire buffer back _down_,
you would use the keystroke:

     <M-n>

   Which will move the <[> <]> PAIR down "by list".

   Which will result in the buffer:

     ([(a b c)(d e f)(g h i)])

   To move the <[> <]> PAIR now around the "(a b c)(d e f)(g h i)"
further _down_, you would used the keystroke:

     <M-n>

   Which will move the <[> <]> PAIR down "by list".

   Which will result in the buffer:

     (([a b c])(d e f)(g h i))


File: ipe.info,  Node: List Movement - Beginning / End,  Prev: List Movement - Up / Down,  Up: List Movement

8.2.3 List Movement - Beginning / End
-------------------------------------

The Beginning / End movement (*Note Core Movement::) of 'Insert Pair
Edit' (ipe) PAIRS with an _Initial Movement_ of "by lists" is modified
from the standard pattern used by the "by characters" / "by words"
movements.

   The:

   • ‘ipe-edit--open-beg’
   • ‘ipe-edit--open-end’
   • ‘ipe-edit--close-beg’
   • ‘ipe-edit--close-end’

   commands, are re-bound so that instead of moving the OPEN and CLOSE
overlays to the beginning / end of lines, they instead move as per the
*Emacs* ‘beginning-of-defun’ / ‘end-of-defun’ commands.

   For example, assuming that:

   • The ‘ipe-insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The _Modifiers_ ‘ipe-edit-movement-keyset’ has been enabled;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>;
   • The <[> MNEMONIC is bound to the PAIR <[> <]>;
   • The _Initial Movement_ for the <[> MNEMONIC is "by lists", and;
   • The buffer contains the following text:

          ((a b c)(d [e] f)(g h i))

   To edit the <[> <]> PAIR, you would enter the keystrokes:

     <C-u> <M-(> <[>

   Which will edit the <[> <]> around "e", and enter ‘ipe-edit-mode’.

   Then, to move the <[> <]> PAIR around "e" to the _beginning_, you
would use the keystroke:

     <C-a>

   Which will result in the buffer:

     []((a b c)(d e f)(g h i))

   Then, to move the <[> <]> PAIR to the _end_, you would use the
keystroke:

     <C-e>

   Which will result in the buffer:

     ((a b c)(d e f)(g h i))[]


File: ipe.info,  Node: Defining line PAIRs with an INFIX,  Next: Auto Insertion,  Prev: List Movement,  Up: Other Features

8.3 Defining line PAIRs with an INFIX
=====================================

_Intermediate_ and _Advanced_ (*Note Types of PAIR Definition::) 'Insert
Pair Edit' (ipe) PAIRs that are defined with an _Initial Movement_ of
"by lines" can also define an INFIX.

   This INFIX will be inserted at the start of each intervening line
between the OPEN and CLOSE overlays.

   The _indent_ (*Note Line Movement::) commands:

   • ‘ipe-edit--open-forward’
   • ‘ipe-edit--open-backward’
   • ‘ipe-edit--close-forward’
   • ‘ipe-edit--close-backward’

   Can be used to add indentation both _before_ and _after_ the INFIX.

   For example, assuming that:

   • The ‘ipe-insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The _Modifiers_ ‘ipe-edit-movement-keyset’ has been enabled;
   • The </> MNEMONIC is bound to the PAIR </* > < */>;
   • The _Initial Movement_ for the </> MNEMONIC is 'by line';
   • The INFIX for the </> PAIR is < **>, and;
   • The current buffer contains the following text:

          The quick brown fox jumps over the lazy dog.
          The quick brown fox jumps over the lazy dog.
          The quick brown |fox jumps over the lazy dog.
          The quick brown fox jumps over the lazy dog.
          The quick brown fox jumps over the lazy dog.

   To insert and indent C-style comments around the text, you would
enter the keystrokes:

     <M-(> </>

   Which will insert a ‘/*’ ‘*/’ PAIR around the middle line, and enter
‘ipe-edit-mode’.

   Which will result in the buffer:

     The quick brown fox jumps over the lazy dog.
     The quick brown fox jumps over the lazy dog.
     /* The quick brown |fox jumps over the lazy dog. */
     The quick brown fox jumps over the lazy dog.
     The quick brown fox jumps over the lazy dog.

   And then, to move the OPEN overlay up a line, and the CLOSE overlay
down a line, you would enter the keystrokes:

     <C-n> <C-p>

   Which will result in the buffer:

     The quick brown fox jumps over the lazy dog.
     /* The quick brown fox jumps over the lazy dog.
     ** The quick brown |fox jumps over the lazy dog.
     ** The quick brown fox jumps over the lazy dog. */
     The quick brown fox jumps over the lazy dog.

   To then indent the comment two spaces, you would enter the
keystrokes:

   <C-b> <C-b>

   Which will result in the buffer:

     The quick brown fox jumps over the lazy dog.
       /* The quick brown fox jumps over the lazy dog.
       ** The quick brown fox jumps over the lazy dog.
       ** The quick brown fox jumps over the lazy dog. */
     The quick brown fox jumps over the lazy dog.

   And then, to indent the text after the comment two spaces, you would
enter the keystrokes:

     <C-f> <C-f>

   Which will result in the buffer:

     The quick brown fox jumps over the lazy dog.
       /*   The quick brown fox jumps over the lazy dog.
       **   The quick brown fox jumps over the lazy dog.
       **   The quick brown fox jumps over the lazy dog. */
     The quick brown fox jumps over the lazy dog.

   These actions can be reversed by the corresponding
‘ipe-edit--open-forward’ / ‘ipe-edit--close-backward’ commands:

     <M-f> <M-f> <M-b> <M-b>


File: ipe.info,  Node: Auto Insertion,  Next: Positioning POINT and MARK,  Prev: Defining line PAIRs with an INFIX,  Up: Other Features

8.4 Auto Insertion
==================

_Intermediate_ and _Advanced_ (*Note Types of PAIR Definition::) 'Insert
Pair Edit' (ipe) PAIRs can be defined with an _Auto-Insert_ flag equal
to ‘y’.

   Running ‘ipe-insert-pair-edit’ and entering the MNEMONIC for a PAIR
with an _Auto-Insert_ equal to ‘y’, will instantly insert the OPEN and
CLOSE strings for the given PAIR without entering ‘ipe-edit-mode’.
(This can be used to offer behaviour similar to the standard *Emacs*
‘insert-parentheses’, but for different PAIRs.)

   PAIRs with an _Auto-Insert_ equal to ‘y’ will still honour the
_Initial Movement_ PAIR option, so inserting a PAIR of this type with:

   • An _Initial Movement_ equal to ‘character’

     Will insert a PAIR around POINT.

   • An _Initial Movement_ equal to ‘word’

     Will insert a PAIR around the nearest word.

   • An _Initial Movement_ equal to ‘line’

     Will insert a PAIR around the current line.

   To _edit_ a PAIR with an _Auto-Insert_ equal to ‘y’, execute the
command ‘ipe-insert-pair-edit-update’ using the keystrokes:

     <C-u> <M-(> _MNEMONIC_

   After the PAIR has been inserted.


File: ipe.info,  Node: Positioning POINT and MARK,  Next: Centering the Display on a PAIR,  Prev: Auto Insertion,  Up: Other Features

8.5 Positioning POINT and MARK
==============================

The position at which POINT (the *Emacs* cursor) is placed on insert of
an 'Insert Pair Edit' (ipe) PAIR is controlled by:

 -- User Option: ipe-move-point-on-insert

     This option is consulted when inserting (*Note Inserting and
     Aborting::) an 'Insert Pair Edit' (ipe) PAIR into the buffer.

     If *nil*, POINT will remain at the position it was when the PAIR
     was first inserted.

     If *non-nil*, this option is expected to be one of the following
     values:

        • resume - POINT will remain at its original position before the
          PAIR was inserted.
        • open-beg - POINT will be moved to the beginning of the OPEN
          string.
        • open-end - POINT will be moved to the end of the OPEN string.
        • close-beg - POINT will be moved to the beginning of the CLOSE
          string.
        • close-end - POINT will be moved to the end of the CLOSE
          string.

   The position at which the *Emacs* MARK is placed on insert of a PAIR
controlled by:

 -- User Option: ipe-set-mark-on-insert

     This option is consulted when inserting (*Note Inserting and
     Aborting::) an 'Insert Pair Edit' (ipe) PAIR into the buffer.

     If *nil*, MARK will not be set.

     If *non*-nil, this option is expected to be one of the following
     values:

        • open-beg - MARK will be set to the beginning of the OPEN
          string.
        • open-end - MARK will be set to the end of the OPEN string.
        • close-beg - MARK will be set to the beginning of the CLOSE
          string.
        • close-end - MARK will be set to the end of the CLOSE string.

   _Advanced_ (*Note Types of PAIR Definition::) 'Insert Pair Edit'
(ipe) PAIRs can define the position at which to place POINT on _insert_
of the PAIR into the buffer 'per-PAIR'.


File: ipe.info,  Node: Centering the Display on a PAIR,  Next: PAIRs With Empty OPEN / CLOSE,  Prev: Positioning POINT and MARK,  Up: Other Features

8.6 Centering the Display on a PAIR
===================================

If the 'Insert Pair Edit' (ipe) minor mode (‘ipe-edit-mode’) is active
but a PAIR(s) is not visible within the *Emacs* window, the *Emacs*
window can be centered on the PAIR using the command:

 -- Function: ipe-edit--recenter-pair (arg)

     This command is used within the 'Insert Pair Edit' (ipe) minor-mode
     (‘ipe-edit-mode’) to position the current window such that the OPEN
     and CLOSE overlays of the ‘ARG’'th PAIR are visible.

     If both the OPEN and CLOSE cannot be displayed at once, recenter on
     the OPEN overlay.


File: ipe.info,  Node: PAIRs With Empty OPEN / CLOSE,  Next: Updating Existing PAIRs,  Prev: Centering the Display on a PAIR,  Up: Other Features

8.7 PAIRs With Empty OPEN / CLOSE
=================================

'Insert Pair Edit' (ipe) PAIRs can be defined with an _empty_ OPEN or
CLOSE string.

   The position of an _empty_ OPEN or CLOSE string will still be
maintained within ‘ipe-edit-mode’, and can be moved about the buffer
using the ‘ipe-edit-mode’ movement keys (*Note Core Movement::.)  Empty
OPEN and CLOSE strings can be used to delimit operations which act upon
the CONTENTS of a PAIR (*Note Edit CONTENTS Commands::.)

   The position of an empty OPEN or CLOSE string is displayed within
‘ipe-edit-mode’ by overlays containing:

 -- User Option: ipe-empty-open-string
     (Default: ‘(’)

 -- User Option: ipe-empty-close-string
     (Default: ‘)’)

   These overlays are highlighted using the _face_:

 -- User Option: ipe-empty-pair-highlight
     (Default: ‘warning’)

   The ‘ipe-empty-open-string’ / ‘ipe-empty-close-string’ strings are
_not_ inserted into the buffer by ‘ipe-edit--insert-pair’.


File: ipe.info,  Node: Updating Existing PAIRs,  Next: Delete Customization,  Prev: PAIRs With Empty OPEN / CLOSE,  Up: Other Features

8.8 Updating Existing PAIRs
===========================

In addition to inserting PAIRs, the 'Insert Pair Edit' (ipe) package
also offers a number of commands to _update_ the PAIRs which already
exist within an *Emacs* buffer.

   • *Note Updating PAIRs::
   • *Note Deleting PAIRs::
   • *Note Replacing PAIRs::

   The following sub-sections describe some of the more advanced
features of these commands, and some of the options used to update PAIRS
when within ‘ipe-edit-mode’.

* Menu:

* Update Search Process::
* Update PAIR Matching::
* Updates on a Region::


File: ipe.info,  Node: Update Search Process,  Next: Update PAIR Matching,  Up: Updating Existing PAIRs

8.8.1 Update Search Process
---------------------------

The PAIRs updated by the 'Insert Pair Edit' (ipe) commands:

   • ‘ipe-insert-pair-edit-update’ (*Note Updating PAIRs::);
   • ‘ipe-insert-pair-edit-delete’ (*Note Deleting PAIRs::), and;
   • ‘ipe-insert-pair-edit-replace’ (*Note Replacing PAIRs::.)

   All locate the PAIRs to be updated by searching for the _nearest_
PAIR (or, if the _region_ is active, for all the PAIRs within the
_region_.)

   The direction of the search is determined by the
‘ipe-update-forward-first-p’ option.  (Default: *nil*)

 -- User Option: ipe-update-forward-first-p

     If nil, the PAIR to be updated by any of the
     _ipe-insert-pair-edit-*_ commands will be searched for by:

        • Searching backward from POINT for an OPEN string, then:
        • Searching _forward_ from the OPEN string for a _matching_
          CLOSE string, or;
        • If no OPEN string is found by searching _backward_, by
          searching _forward_ from POINT for an OPEN string, then:
        • Searching _forward_ from the OPEN string for a _matching_
          CLOSE string.

     If non-nil, the PAIR to be updated by the previous set of commands
     will first be searched for by:

        • Searching _forward_ from POINT for an OPEN string, then:
        • Searching _forward_ from the OPEN string for a _matching_
          CLOSE string, or;
        • If no OPEN string is found by searching _forward_, by
          searching _backward_ from POINT for an OPEN string, then:
        • Searching _forward_ from the OPEN string for a _matching_
          CLOSE string.


File: ipe.info,  Node: Update PAIR Matching,  Next: Updates on a Region,  Prev: Update Search Process,  Up: Updating Existing PAIRs

8.8.2 Update PAIR Matching
--------------------------

The PAIRs selected by the 'Insert Pair Edit' (ipe) commands are
_matched_, thus allowing the OPEN and CLOSE strings of a PAIR to be
nested.  Searching forward / backward for PAIRs (*Note Update Search
Process::) will attempt to match the _corresponding_ OPEN and CLOSE
strings.

   For example, assuming that:

   • The ‘ipe-insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>;
   • The <[> MNEMONIC is bound to the PAIR <[> <]>, and;
   • The buffer contains the following text:

          The (quick (|brown (fox) jumps) over) the lazy dog.

     (Where the <|> character represents the current position of POINT.)

   Then, to update the <(> <)> PAIR you would enter the keystrokes:

     <C-u> <M-(> <(>

   Which will match the PAIR around the text "brown fox jumps".
(Because the <(> <)> PAIR around "fox" is _nested_ within the outer PAIR
around "brown fox jumps".)

   Changing the PAIR using the keystrokes:

     <(> <[>

   Will result in the buffer:

     The (quick [|brown (fox) jumps] over) the lazy dog.


File: ipe.info,  Node: Updates on a Region,  Prev: Update PAIR Matching,  Up: Updating Existing PAIRs

8.8.3 Updates on Region
-----------------------

If the *Emacs* _region_ is active, running any of the 'Insert Pair Edit'
(ipe) commands:

   • ‘ipe-insert-pair-edit-update’
   • ‘ipe-insert-pair-edit-delete’
   • ‘ipe-insert-pair-edit-replace’

   Will act upon all of the PAIRs within the _region_.  This will allow
multiple PAIRs to be edited at once.

   (*Note Multiple PAIRs Commands::.)

   For example, assuming that:

   • The ‘ipe-insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>, and;
   • The buffer contains the following text:

          The quick (brown) fox jumps (over) the lazy dog.
          |The quick (brown) fox jumps (over) the lazy dog.
          The quick (brown) fox jumps (over) the lazy dog.@

     (Where the <|> character represents the current position of POINT,
     and the <@> key represents the current position of MARK for an
     active *Emacs* _region_.)

   Then, deleting a PAIR using the following keystrokes:

     <C-u> <C-u> <M-(> <(>

   Will delete all of the <(> <)> PAIRs between POINT and MARK.

   Which will result in the buffer:

     The quick (brown) fox jumps (over) the lazy dog.
     |The quick brown fox jumps over the lazy dog.
     The quick brown fox jumps over the lazy dog.@


File: ipe.info,  Node: Delete Customization,  Prev: Updating Existing PAIRs,  Up: Other Features

8.9 Delete Customization
========================

The processing performed by the 'Insert Pair Edit' (ipe) _delete_
commands:

   • ‘ipe-insert-pair-edit-delete’
   • <C-u> <C-u> ‘ipe-insert-pair-edit’
   • _Pairs > Delete PAIR_ Menu Item

   Can be _customized_ by the:

     IPE-DELETE-ACTION
     IPE-DELETE-HIGHLIGHT
     IPE-DELETE-HIGHLIGHT-WAIT

   Variables.

 -- User Option: ipe-delete-action

     This option can be set to either:

        • 'delete
        • 'highlight
        • 'fade
        • 'prompt

     When IPE-DELETE-ACTION is set to ‘'delete’, calling an 'Insert Pair
     Edit' (ipe) _delete_ command will simply remove a PAIR from the
     buffer.

     When IPE-DELETE-ACTION is set to ‘'highlight’, calling an 'Insert
     Pair Edit' (ipe) _delete_ command will center the buffer window
     around the PAIR to be deleted, highlight the PAIR to be deleted
     with the IPE-DELETE-HIGHLIGHT face for IPE-DELETE-HIGHLIGHT-WAIT
     seconds, then remove the PAIR from the buffer.

     When IPE-DELETE-ACTION is set to ‘'fade’, calling an 'Insert Pair
     Edit' (ipe) _delete_ command will center the buffer window around
     the PAIR to be deleted, highlight the PAIR to be deleted with the
     IPE-DELETE-HIGHLIGHT face, and fade the IPE-DELETE-HIGHLIGHT face
     for IPE-DELETE-HIGHLIGHT-WAIT seconds, then remove the PAIR from
     the buffer.

     When IPE-DELETE-ACTION is set to ‘'prompt’, calling an 'Insert Pair
     Edit' (ipe) _delete_ command will center the buffer window around
     the PAIR to be deleted, highlight the PAIR to be deleted with the
     IPE-DELETE-HIGHLIGHT face, and then prompt the user via the
     minibuffer as to whether or not they want to delete the PAIR.

   This variable can be ‘customize’'d by running the command:

     <M-x> customize-variable <RET> ipe-delete-action <RET>

 -- User Option: ipe-delete-highlight

     The face used to highlight the PAIR to be deleted when
     IPE-DELETE-ACTION is set to either ‘'highlight’ , ‘'fade’
     or‘'prompt’.

     (By default, text to be deleted will be displayed using the WARNING
     face.)

   This variable can be ‘customize’'d by running the command:

     <M-x> customize-face <RET> ipe-delete-highlight <RET>

 -- User Option: ipe-delete-highlight-wait

     The time (in seconds) to highlight the PAIR to be deleted when
     IPE-DELETE-ACTION is set to either ‘'highlight’ or ‘'fade’.

   This variable can be ‘customize’'d by running the command:

     <M-x> customize-variable <RET> ipe-delete-highlight-wait <RET>


File: ipe.info,  Node: Development,  Next: Indexes,  Prev: Other Features,  Up: Top

9 Development
*************

* Menu:

* Creating 'ipe-mode-pairs' PAIRs Using Emacs Lisp::
* Binding MNEMONICs to Keys::
* Defining Custom 'ipe--movement' Functions::
* Adding 'ipe' ERTs (Emacs Regression Tests)::


File: ipe.info,  Node: Creating 'ipe-mode-pairs' PAIRs Using Emacs Lisp,  Next: Binding MNEMONICs to Keys,  Up: Development

9.1 Creating 'ipe-mode-pairs' PAIRs Using Emacs Lisp
====================================================

The 'Insert Pair Edit' (ipe) package is specifically designed to cater
for _Mode-Specific_ PAIR bindings.  Several _Mode-Specific_ bindings
come bundled with the 'Insert Pair Edit' (ipe) package:

   • texinfo-mode - (‘modes/ipe-texinfo-mode.el’)
   • c-mode - (‘modes/ipe-c-mode.el’)
   • html-mode - (‘modes/ipe-html-mode.el’)
   • mhtml-mode - (‘modes/ipe-html-mode.el’)
   • markdown-mode - (‘modes/ipe-markdown-mode.el’)

   These bindings are automatically activated whenever one of the
'Insert Pair Edit' (ipe) commands is invoked within a buffer with the
given ‘major-mode’.

   While bindings for _Major Modes_ can be added dynamically using the
'Insert Pair Edit' customization options (*Note Customization::), they
can also be added using *Emacs Lisp*.  This may be a more desirable
option for Users wanting to supply 'Insert Pair Edit' (ipe) PAIRs for
their own *Emacs* ‘major-mode’.

   To add new 'Insert Pair Edit' (ipe) PAIR bindings for a new *Emacs*
‘major-mode’ using *Emacs Lisp*, use the following functions (available
from the ‘ipe-custom.el’ / ‘ipe.el’ libraries.)

   • ‘ipe-custom--pair-list-get’
   • ‘ipe-mode-pairs-add’

 -- Function: ipe-custom--pair-list-get (defn)

     Converts a list (‘DEFN’) describing a set of 'Insert Pair Edit'
     (ipe) PAIRs into the format used by the *Emacs* ‘customize’
     widgets.

     The list to be converted is expected to a list of ‘PAIR
     DEFINITIONS’ of the form:

            (MNEMONIC OPEN CLOSE)
          or
            (MNEMONIC OPEN CLOSE (PLIST))

     Where:

        • ‘MNEMONIC’ Is a string input into the minibuffer by the User
          after calling ‘ipe-insert-pair-edit’ to indicate which OPEN
          and CLOSE strings are to be inserted.
        • ‘OPEN’ Is a string placed at the beginning of a lexical unit,
          and then moved by the 'Insert Pair Edit' commands.
        • ‘CLOSE’ Is a string placed at the end of a lexical unit, and
          then moved by the 'Insert Pair Edit' commands.
        • ‘PLIST’ Is a property list specifying a set of optional
          _Intermediate_ / _Advanced_ options that can be included to
          specify extra configuration passed to _specialised_ movement
          functions.  (see: ‘ipe-move-by-movements’)

          Known PLIST properties are:

               :movement        MOVEMENT
               :infix           INFIX
               :escapes         ESCAPES
               :auto-insert     AUTO-INSERT
               :move-point      MOVE-POINT
               :indent-function INDENT-FUNCTION
               :menu            MENU

             - MOVEMENT The initial lexical unit indicating the type of
               movements made by the 'Insert Pair Edit' commands.
               (pre-defined values: 'char, 'word, 'line, 'list; default:
               'word.)
             - INFIX A string added to the front of lines between the
               OPEN and CLOSE PAIR when ‘MOVEMENT’ = 'line.
             - ESCAPES Is a list of pairs of strings.  Each pair of
               strings (MATCH REPLACE) represents an escape sequence.
               Each MATCH between OPEN and CLOSE will be replaced by
               REPLACE.
             - AUTO-INSERT If non-nil, will cause the
               ‘ipe-insert-pair-edit’ function to automatically insert
               the PAIR without entering ‘ipe-edit-mode’.
             - MOVE-POINT Indicates where to move _POINT_ when a new
               PAIR is inserted.  This is a PAIR-specific override to
               the global IPE-MOVE-POINT-ON-INSERT setting, and takes
               the same values ('resume, 'open-beg, 'open-end,
               'close-beg, 'close-end)
             - INDENT-FUNCTION is either *nil*, or a function used to
               indent the OPEN and CLOSE strings.
             - MENU Is a forward slash ('/') separated string of the
               names of the menus under which the PAIR is displayed
               within the *Emacs* 'Insert Pair Edit' sub-menus.

 -- Function: ipe-mode-pairs-add (mode defn)

     Adds a binding for the PAIR definition list (‘DEFN’) to the
     IPE-MODE-PAIRS variable for the given ‘MODE’.

   For example, for a fictional ‘xxx-mode’, to create a set of _Mode
Specific_ 'ipe' PAIR Definitions, create a new file, ‘ipe-xxx-mode.el’,
and add the following *Emacs Lisp*:

     ;;; ipe-xxx-mode.el --- Insert Pair Edit - xxx-mode definitions

     (require 'ipe-custom)
     (require 'ipe)

     ; Create a new 'Insert Pair Edit' mode-specific PAIRs variable
     ; 'ipe-xxx-pairs' which maps:
     ;
     ;   o => <open> / <close>
     ;   - => -      / -
     ;   ; => ;      / ;       (with a ';' INFIX)
     ;
     (defcustom
       ipe-xxx-pairs
       (ipe-custom--pair-list-get
       '((o" "<open>" "<close>")
         ("-" "-"      "-"       (:movement char))
         (";" ";"      ";"       (:movement line :infix ";"))))
       "'insert-pair-edit' customizations for 'xxx-mode'."
       :group 'ipe-mode-pairs
       :tag   "'Insert Pair Edit' - xxx-mode PAIRs"
       :link  '(function-link ipe-insert-pair-edit)
       :set   'ipe-custom-pair-list-set
       :get   'ipe-custom-pair-list-get
       :type  '(ipe-custom-pair-list
     	   :tag "PAIRs used by 'insert-pair-edit' in 'xxx-mode'."))

     ; Activate the new 'ipe-xxx-pairs' whenever in 'xxx-mode'.
     (ipe-mode-pairs-add 'xxx-mode 'ipe-xxx-pairs)

     (provide 'ipe-xxx-mode)
     ;;; ipe-xxx-mode.el ends here


File: ipe.info,  Node: Binding MNEMONICs to Keys,  Next: Defining Custom 'ipe--movement' Functions,  Prev: Creating 'ipe-mode-pairs' PAIRs Using Emacs Lisp,  Up: Development

9.2 Binding MNEMONICs to Keys
=============================

To bind an 'Insert Pair Edit' (ipe) PAIR directly to the key
representing its MNEMONIC (so that typing the MNEMONIC inserts the
PAIR), use the function:

 -- Function: ipe-insert-pair-edit-cmd (mnemonic)

   For example:

     (local-set-key "(" 'ipe-insert-pair-edit-cmd)

   This will bind the <(> key to the 'Insert Pair Edit' (ipe) MNEMONIC
<(>.  Typing <(> within a buffer where this has been set will insert the
PAIR associated with the <(> MNEMONIC, and enter ‘ipe-edit-mode’.

   If the PAIR definition for the given MNEMONIC has an _Auto-Insert_
flag set to ‘y’, this can be used to automatically enter matched PAIRS
every time the OPEN key for the PAIR is pressed.  (Without entering
‘ipe-edit-mode’.)


File: ipe.info,  Node: Defining Custom 'ipe--movement' Functions,  Next: Adding 'ipe' ERTs (Emacs Regression Tests),  Prev: Binding MNEMONICs to Keys,  Up: Development

9.3 Defining Custom 'ipe-movement Functions
===========================================

The movements (‘character’, ‘word’, ‘line’, ‘list’) supplied within
‘ipe-edit-mode’ are _pluggable_.

   They are defined by entries within:

 -- Variable: ipe-move-by-movements

     This is a _list_ of 4-tuples:

          (SYMBOL MOVE-BY-FUNCTION POS-SET-FUNCTION DESCRIPTION)

        • *SYMBOL* is the identifier defining the type of movement.

        • *MOVE-BY-FUNCTION*

          Is a function that returns the position of the OPEN and CLOSE
          strings for a given _lexical unit_ movement mode.  It should
          have a signature of the form:

               (MOVE-BY-FUNCTION DEFN N SIDE ACTION POS OTHER UNITS PUSH)

          Where:

             - DEFN - Is the definition of the PAIR from IPE-PAIRS.
             - N - Is the position of the PAIR in IPE-PAIR-POS-LIST.
             - SIDE - Is either ‘'open’ or ‘'close’.
             - ACTION - Is either ‘'init’, ‘'beg’, ‘'up’, ‘'backward’,
               ‘'forward’, ‘'down’, ‘'end’, or ‘'reset’.
             - POS - Is the position from which the movement begins.
             - OTHER - Is the position of the other member of the PAIR.
             - UNITS - Are the number of units to move.
             - PUSH - Indicates that this is a _push_ move from the
               other member of the PAIR.

          It should return the position to which the given part of the
          PAIR (‘'open’ or ‘'close’) is set when the given movement
          command (‘'beg’, ‘'up’, ‘'down’, ‘'backward’, ‘'forward’,
          ‘'end’) is entered by the User.

          If ‘POS’ is nil, movement should be calculated from ‘POINT’.

        • POS-SET-FUNCTION

          Is an (optional) function that is called whenever
          ‘ipe--pos-property-set’ is called to perform movement specific
          updates to the ‘ipe--pair-pos-list’ state variable.  It should
          have a signature of the form:

               (POS-SET-FUNCTION N)

          Where:

             - N Is the position of the PAIR in ‘ipe--pair-pos-list’ for
               which a ‘ipe--pos-property-set’ call has just been made.

        • DESCRIPTION Is the text output to the echo area to describe
          the movement.

   To create a new _movement_:

   • Create a new _move-by_ function.
   • Add a new entry to IPE-MOVE-BY-MOVEMENTS variable (See:
     ‘ipe-move-by-install’.)
   • Add a new binding to the IPE-EDIT-MODE-MOVEMENT-MAP for new
     movement mode.


File: ipe.info,  Node: Adding 'ipe' ERTs (Emacs Regression Tests),  Prev: Defining Custom 'ipe--movement' Functions,  Up: Development

9.4 Adding 'ipe' ERT (Emacs Regression Tests)
=============================================

If you have downloaded the 'Insert Pair Edit' (ipe) package as source
code rather than a package library, it will include a set of *Emacs* ERT
(_Emacs Regression Test_)) tests.

   New regression tests can be defined using the *Emacs* macro (found
within the ‘./tests/ipe-tests.el’ source file within the ‘ipe’ source
distribution.)

 -- Macro: ipe-test-def-kbd NAME PARAM DOC CUSTOM SETUP BUFFER-TEXT
          EXPECTED KEYSTROKES &optional TEARDOWN)

     Customized version of ‘ert-deftest’ for 'ipe' unit testing.

     This macro will define an ERT test, which runs a set of keyboard
     commands, KEYSTROKES, against the BUFFER-TEXT within a temporary
     buffer, and compares the resulting text in the buffer after the
     commands have been run, to the EXPECTED result.

     For this test, the ‘ipe-insert-pair-edit’ command will be bound to
     <M-(>.

        • ‘NAME’ The name of the 'ert' test.  This will be prefixed with
          ’ipe-test-’.
        • ‘PARAM’ Placeholder - for future ERT extensibility.
        • ‘DOC’ Documentation string for the ‘ert-deftest’ definition.
        • ‘CUSTOM’ List of ’ipe’ customizations for the test.
        • ‘SETUP’ Commands used to initialize the temporary test buffer.
        • ‘BUFFER-TEXT’ Starting text within the temporary buffer.
        • ‘EXPECTED’ Expected text within the temporary buffer after
          test completion.
        • ‘KEYSTROKES’ A string representing the keystrokes to be
          executed as user input against the temporary buffer.  (This
          should be in a format that can be parsed by the ‘kbd’
          command.)
        • ‘TEARDOWN’ Commands used to clean up the temporary test
          buffer.

   The text within both ‘BUFFER-TEXT’ and ‘EXPECTED’ can contain the
characters:

   • <|> - To represent the position of POINT.
   • <@> - To represent the position of MARK.
   • <!> - To represent the position of a secondary "multiple-cursors"
     cursor.

     (setq ipe-test-xxx-options
           '((ipe-edit--movement-keysets '(modifiers))
             (ipe-pairs                  '(("(" "(" ")" (:movement char))
                                           ("[" "[" "]"))))

     (ipe-test-def-kbd xxx-test ()
       "Test `ipe-insert-pair-edit'"
       ipe-test-xxx-options
       nil
       "|The quick brown fox jumps over the lazy dog."
       "(|)The quick brown fox jumps over the lazy dog."
       "M-( ( RET")

* Menu:

* Running 'ipe' ERTs (Emacs Regression Tests)::


File: ipe.info,  Node: Running 'ipe' ERTs (Emacs Regression Tests),  Up: Adding 'ipe' ERTs (Emacs Regression Tests)

9.4.1 Running 'ipe' ERTs (Emacs Regression Tests)
-------------------------------------------------

To run _Emacs Regression Test_s defined by the ‘ipe-test-def-kbd’ macro,
the following convenience functions are supplied:

 -- Function: ipe-test-run (pattern)

     An interactive function to run an *ERT* test that has prefix
     ‘ipe-test--’.

     Prompt for the name of an ‘ipe-test-def’ or ‘ipe-test-def-kbd’ test
     to be run, and run it.  The input PATTERN is a regular expression
     that will match the NAMEs of the tests to be run.

 -- Function: ipe-test-run-all

     An interactive function to run all of the *ERT* test cases that
     start with ‘ipe-test--’.

     This interactive function runs all of the tests created using the
     ‘ipe-test-def’ or ‘ipe-test-def-kbd’ macros.


File: ipe.info,  Node: Indexes,  Prev: Development,  Up: Top

Indexes
*******

* Menu:

* Concept Index::  Concept index.
* Function Index:: Function index.
* Keys Index::     Keys index.
* Variable Index:: Variable index.


File: ipe.info,  Node: Concept Index,  Next: Function Index,  Up: Indexes

Concept Index
=============

 [index ]
* Menu:

* Changing PAIRs:                        Changing PAIRs.       (line  6)
* Core Edit Mode Bindings:               Core Edit Mode Bindings.
                                                               (line  6)
* Core Movement:                         Core Movement.        (line  6)
* Core Movement (Alphabetic):            Core Movement (Alphabetic).
                                                               (line  6)
* Core Movement (Arrows):                Core Movement (Arrows).
                                                               (line  6)
* Core Movement (Custom):                Core Movement (Custom).
                                                               (line  6)
* Core Movement (Modifiers):             Core Movement.        (line 22)
* Core Movement (VI):                    Core Movement (VI).   (line  6)
* Core Movement (WASD):                  Core Movement (WASD). (line  6)
* Customization:                         Customization.        (line  6)
* Customization Using 'customize':       Customization Using 'customize'.
                                                               (line  6)
* Customization Using the 'Pairs' Menu:  Customization Using the 'Pairs' Menu.
                                                               (line  6)
* Deleting PAIRs:                        Deleting PAIRs.       (line  6)
* Development:                           Development.          (line  6)
* Expected Usage:                        Expected Usage.       (line  6)
* Inline Customization:                  Inline Customization. (line  6)
* Inserting and Aborting:                Inserting and Aborting.
                                                               (line  6)
* Installation:                          Installation.         (line  6)
* Mouse Movement:                        Mouse Movement.       (line  6)
* Movement Units:                        Movement Units.       (line  6)
* Other Edit Mode Bindings:              Other Edit Mode Bindings.
                                                               (line  6)
* Other Features:                        Other Features.       (line  6)
* Other Major Insert-Pair-Edit Commands: Other Major Commands. (line  6)
* Overview:                              Overview.             (line  6)
* Replacing PAIRs:                       Replacing PAIRs.      (line  6)
* Running ipe-insert-pair-edit:          Running ipe-insert-pair-edit.
                                                               (line  6)
* The 'Edit' -> 'Pairs' Menu:            The 'Edit' -> 'Pairs' Menu.
                                                               (line  6)
* Types of PAIR Definition:              Types of PAIR Definition.
                                                               (line  6)
* Updating PAIRs:                        Updating PAIRs.       (line  6)
* Usage:                                 Usage.                (line  6)


File: ipe.info,  Node: Function Index,  Next: Keys Index,  Prev: Concept Index,  Up: Indexes

Function Index
==============

 [index ]
* Menu:

* ipe-custom--pair-list-get:             Creating 'ipe-mode-pairs' PAIRs Using Emacs Lisp.
                                                               (line 33)
* ipe-defn--change-mode-pair-mnemonic:   Inline Customization. (line 32)
* ipe-defn--change-pair-mnemonic:        Inline Customization. (line 26)
* ipe-defn--delete-mode-pair:            Inline Customization. (line 44)
* ipe-defn--delete-pair:                 Inline Customization. (line 38)
* ipe-defn--edit-mode-pair:              Inline Customization. (line 19)
* ipe-defn--edit-pair:                   Inline Customization. (line 13)
* ipe-edit--abort:                       Inserting and Aborting.
                                                               (line 37)
* ipe-edit--add-next-contents:           Adding Multiple PAIRs Using PAIR CONTENT.
                                                               (line 14)
* ipe-edit--add-next-pair:               Adding Multiple PAIRs Using Existing OPEN / CLOSE.
                                                               (line 13)
* ipe-edit--add-previous-contents:       Adding Multiple PAIRs Using PAIR CONTENT.
                                                               (line 22)
* ipe-edit--add-previous-pair:           Adding Multiple PAIRs Using Existing OPEN / CLOSE.
                                                               (line 21)
* ipe-edit--change-pair:                 Changing PAIRs.       (line 11)
* ipe-edit--close-backward:              Core Movement.        (line 48)
* ipe-edit--close-beg:                   Core Movement.        (line 44)
* ipe-edit--close-down:                  Core Movement.        (line 52)
* ipe-edit--close-end:                   Core Movement.        (line 54)
* ipe-edit--close-forward:               Core Movement.        (line 50)
* ipe-edit--close-up:                    Core Movement.        (line 46)
* ipe-edit--contents-capitalize:         Edit CONTENTS Commands.
                                                               (line 46)
* ipe-edit--contents-copy:               Edit CONTENTS Commands.
                                                               (line 16)
* ipe-edit--contents-downcase:           Edit CONTENTS Commands.
                                                               (line 52)
* ipe-edit--contents-kill:               Edit CONTENTS Commands.
                                                               (line 10)
* ipe-edit--contents-replace:            Edit CONTENTS Commands.
                                                               (line 28)
* ipe-edit--contents-trim:               Edit CONTENTS Commands.
                                                               (line 34)
* ipe-edit--contents-upcase:             Edit CONTENTS Commands.
                                                               (line 40)
* ipe-edit--contents-yank:               Edit CONTENTS Commands.
                                                               (line 22)
* ipe-edit--delete-all-pairs:            Removing PAIRs.       (line 16)
* ipe-edit--delete-first-pair:           Removing PAIRs.       (line  9)
* ipe-edit--delete-last-pair:            Removing PAIRs.       (line 23)
* ipe-edit--ia-copy-text:                'Insert And...' Commands.
                                                               (line 31)
* ipe-edit--ia-goto-close:               'Insert And...' Commands.
                                                               (line 17)
* ipe-edit--ia-goto-open:                'Insert And...' Commands.
                                                               (line 10)
* ipe-edit--ia-kill-text:                'Insert And...' Commands.
                                                               (line 37)
* ipe-edit--ia-resume:                   'Insert And...' Commands.
                                                               (line 24)
* ipe-edit--ia-update-backward:          'Insert And...' Commands.
                                                               (line 50)
* ipe-edit--ia-update-forward:           'Insert And...' Commands.
                                                               (line 43)
* ipe-edit--insert-first-pair:           Inserting Multiple PAIRs.
                                                               (line  9)
* ipe-edit--insert-last-pair:            Inserting Multiple PAIRs.
                                                               (line 18)
* ipe-edit--insert-pair:                 Inserting and Aborting.
                                                               (line 19)
* ipe-edit--movement-by-char:            Movement Units.       (line 23)
* ipe-edit--movement-by-line:            Movement Units.       (line 37)
* ipe-edit--movement-by-list:            Movement Units.       (line 45)
* ipe-edit--movement-by-word:            Movement Units.       (line 30)
* ipe-edit--open-backward:               Core Movement.        (line 35)
* ipe-edit--open-beg:                    Core Movement.        (line 31)
* ipe-edit--open-down:                   Core Movement.        (line 39)
* ipe-edit--open-end:                    Core Movement.        (line 41)
* ipe-edit--open-forward:                Core Movement.        (line 37)
* ipe-edit--open-up:                     Core Movement.        (line 33)
* ipe-edit--recenter-pair:               Centering the Display on a PAIR.
                                                               (line 10)
* ipe-edit--recenter-pair <1>:           Centering the Display on a PAIR.
                                                               (line 10)
* ipe-edit--update-next-close:           Next / Previous OPEN / CLOSE.
                                                               (line 22)
* ipe-edit--update-next-contents:        Next / Previous CONTENTS.
                                                               (line 14)
* ipe-edit--update-next-open:            Next / Previous OPEN / CLOSE.
                                                               (line 14)
* ipe-edit--update-next-pair:            Next / Previous PAIRs.
                                                               (line 13)
* ipe-edit--update-previous-close:       Next / Previous OPEN / CLOSE.
                                                               (line 18)
* ipe-edit--update-previous-contents:    Next / Previous CONTENTS.
                                                               (line 10)
* ipe-edit--update-previous-open:        Next / Previous OPEN / CLOSE.
                                                               (line 10)
* ipe-edit--update-previous-pair:        Next / Previous PAIRs.
                                                               (line  9)
* ipe-edit-mode:                         ipe-edit-mode.        (line  6)
* ipe-insert-pair-edit:                  Running ipe-insert-pair-edit.
                                                               (line  6)
* ipe-insert-pair-edit-cmd:              Binding MNEMONICs to Keys.
                                                               (line 10)
* ipe-insert-pair-edit-delete:           Deleting PAIRs.       (line 10)
* ipe-insert-pair-edit-replace:          Replacing PAIRs.      (line 11)
* ipe-insert-pair-edit-update:           Updating PAIRs.       (line 11)
* ipe-mode-pairs-add:                    Creating 'ipe-mode-pairs' PAIRs Using Emacs Lisp.
                                                               (line 94)
* ipe-mouse--add-pair:                   Adding Multiple PAIRs Using the Mouse.
                                                               (line 13)
* ipe-mouse--add-pair-region:            Adding Multiple PAIRs Using the Mouse.
                                                               (line 19)
* ipe-mouse--close:                      Mouse Movement.       (line 16)
* ipe-mouse--close-backward:             Mouse Movement.       (line 37)
* ipe-mouse--close-backward-alt:         Mouse Movement.       (line 43)
* ipe-mouse--close-forward:              Mouse Movement.       (line 31)
* ipe-mouse--close-forward-alt:          Mouse Movement.       (line 43)
* ipe-mouse--delete-pair:                Removing PAIRs.       (line 30)
* ipe-mouse--next-movement:              Mouse Movement.       (line 55)
* ipe-mouse--open:                       Mouse Movement.       (line  9)
* ipe-mouse--open-backward:              Mouse Movement.       (line 31)
* ipe-mouse--open-backward-alt:          Mouse Movement.       (line 43)
* ipe-mouse--open-forward:               Mouse Movement.       (line 37)
* ipe-mouse--open-forward-alt:           Mouse Movement.       (line 43)
* ipe-mouse--previous-movement:          Mouse Movement.       (line 55)
* ipe-mouse--region:                     Mouse Movement.       (line 23)
* ipe-test-def-kbd:                      Adding 'ipe' ERTs (Emacs Regression Tests).
                                                               (line 14)
* ipe-test-run:                          Running 'ipe' ERTs (Emacs Regression Tests).
                                                               (line  9)
* ipe-test-run-all:                      Running 'ipe' ERTs (Emacs Regression Tests).
                                                               (line 18)


File: ipe.info,  Node: Keys Index,  Next: Variable Index,  Prev: Function Index,  Up: Indexes

Keys Index
==========

 [index ]
* Menu:

* (:                                     Changing PAIRs.       (line  9)
* %:                                     Edit CONTENTS Commands.
                                                               (line 28)
* a:                                     Core Movement (Alphabetic).
                                                               (line 20)
* A:                                     Core Movement (Alphabetic).
                                                               (line 33)
* b:                                     Core Movement (Alphabetic).
                                                               (line 24)
* B:                                     Core Movement (Alphabetic).
                                                               (line 37)
* C:                                     'Insert And...' Commands.
                                                               (line 17)
* C-*:                                   Inline Customization. (line 38)
* C-%:                                   Inline Customization. (line 26)
* C-+:                                   Inline Customization. (line 13)
* C-<:                                   Next / Previous OPEN / CLOSE.
                                                               (line 10)
* C->:                                   Next / Previous OPEN / CLOSE.
                                                               (line 22)
* C-a:                                   Core Movement.        (line 31)
* C-b:                                   Core Movement.        (line 35)
* C-d:                                   Removing PAIRs.       (line 23)
* C-e:                                   Core Movement.        (line 54)
* C-f:                                   Core Movement.        (line 50)
* C-g:                                   Inserting and Aborting.
                                                               (line 31)
* C-j:                                   Inserting Multiple PAIRs.
                                                               (line 18)
* C-k:                                   Edit CONTENTS Commands.
                                                               (line 10)
* C-l:                                   Centering the Display on a PAIR.
                                                               (line 10)
* C-n:                                   Core Movement.        (line 52)
* C-p:                                   Core Movement.        (line 33)
* C-r:                                   Next / Previous PAIRs.
                                                               (line  9)
* C-s:                                   Next / Previous PAIRs.
                                                               (line 13)
* C-SPC:                                 Edit CONTENTS Commands.
                                                               (line 34)
* C-u C-u C-u M-(:                       Replacing PAIRs.      (line  6)
* C-u C-u M-(:                           Deleting PAIRs.       (line  6)
* C-u M-(:                               Updating PAIRs.       (line  6)
* C-y:                                   Edit CONTENTS Commands.
                                                               (line 22)
* DEL:                                   Removing PAIRs.       (line 16)
* E:                                     Core Movement (Alphabetic).
                                                               (line 30)
* e:                                     Core Movement (Alphabetic).
                                                               (line 43)
* F:                                     Core Movement (Alphabetic).
                                                               (line 26)
* f:                                     Core Movement (Alphabetic).
                                                               (line 39)
* function keys, C-down:                 Core Movement (Arrows).
                                                               (line 28)
* function keys, C-end:                  Core Movement (Arrows).
                                                               (line 30)
* function keys, C-home:                 Core Movement (Arrows).
                                                               (line 33)
* function keys, C-left:                 Core Movement (Arrows).
                                                               (line 37)
* function keys, C-right:                Core Movement (Arrows).
                                                               (line 26)
* function keys, C-up:                   Core Movement (Arrows).
                                                               (line 35)
* function keys, down:                   Core Movement (Arrows).
                                                               (line 41)
* function keys, end:                    Core Movement (Arrows).
                                                               (line 43)
* function keys, home:                   Core Movement (Arrows).
                                                               (line 20)
* function keys, left:                   Core Movement (Arrows).
                                                               (line 24)
* function keys, right:                  Core Movement (Arrows).
                                                               (line 39)
* function keys, up:                     Core Movement (Arrows).
                                                               (line 22)
* K:                                     'Insert And...' Commands.
                                                               (line 37)
* M:                                     'Insert And...' Commands.
                                                               (line 24)
* m c:                                   Movement Units.       (line 21)
* m l:                                   Movement Units.       (line 35)
* m w:                                   Movement Units.       (line 28)
* m x:                                   Movement Units.       (line 43)
* M-(:                                   Running ipe-insert-pair-edit.
                                                               (line  6)
* M-*:                                   Inline Customization. (line 44)
* M-%:                                   Inline Customization. (line 32)
* M-+:                                   Inline Customization. (line 19)
* M-<:                                   Next / Previous OPEN / CLOSE.
                                                               (line 18)
* M->:                                   Next / Previous OPEN / CLOSE.
                                                               (line 14)
* M-a:                                   Core Movement.        (line 44)
* M-b:                                   Core Movement.        (line 48)
* M-c:                                   Edit CONTENTS Commands.
                                                               (line 46)
* M-d:                                   Removing PAIRs.       (line  9)
* M-e:                                   Core Movement.        (line 41)
* M-f:                                   Core Movement.        (line 37)
* M-j:                                   Inserting Multiple PAIRs.
                                                               (line  9)
* M-l:                                   Edit CONTENTS Commands.
                                                               (line 52)
* M-n:                                   Core Movement.        (line 39)
* M-p:                                   Core Movement.        (line 46)
* M-r:                                   Next / Previous CONTENTS.
                                                               (line 10)
* M-s:                                   Next / Previous CONTENTS.
                                                               (line 14)
* M-u:                                   Edit CONTENTS Commands.
                                                               (line 40)
* M-w:                                   Edit CONTENTS Commands.
                                                               (line 16)
* mouse, C-drag-mouse-1:                 Adding Multiple PAIRs Using the Mouse.
                                                               (line 19)
* mouse, C-mouse-1:                      Adding Multiple PAIRs Using the Mouse.
                                                               (line 13)
* mouse, C-mouse-2:                      Removing PAIRs.       (line 30)
* mouse, C-S-wheel-down:                 Mouse Movement.       (line 43)
* mouse, C-S-wheel-up:                   Mouse Movement.       (line 43)
* mouse, C-wheel-down:                   Mouse Movement.       (line 37)
* mouse, C-wheel-up:                     Mouse Movement.       (line 37)
* mouse, drag-mouse-1:                   Mouse Movement.       (line 23)
* mouse, M-wheel-down:                   Mouse Movement.       (line 55)
* mouse, M-wheel-up:                     Mouse Movement.       (line 55)
* mouse, mouse-1:                        Mouse Movement.       (line  9)
* mouse, mouse-2:                        Mouse Movement.       (line 16)
* mouse, S-wheel-down:                   Mouse Movement.       (line 43)
* mouse, S-wheel-up:                     Mouse Movement.       (line 43)
* mouse, wheel-down:                     Mouse Movement.       (line 31)
* mouse, wheel-up:                       Mouse Movement.       (line 31)
* N:                                     Core Movement (Alphabetic).
                                                               (line 28)
* n:                                     Core Movement (Alphabetic).
                                                               (line 41)
* O:                                     'Insert And...' Commands.
                                                               (line 10)
* p:                                     Core Movement (Alphabetic).
                                                               (line 22)
* P:                                     Core Movement (Alphabetic).
                                                               (line 35)
* r:                                     Adding Multiple PAIRs Using Existing OPEN / CLOSE.
                                                               (line 21)
* R:                                     Adding Multiple PAIRs Using PAIR CONTENT.
                                                               (line 22)
* RET:                                   Inserting and Aborting.
                                                               (line 12)
* s:                                     Adding Multiple PAIRs Using Existing OPEN / CLOSE.
                                                               (line 13)
* S:                                     Adding Multiple PAIRs Using PAIR CONTENT.
                                                               (line 14)
* u:                                     'Insert And...' Commands.
                                                               (line 43)
* U:                                     'Insert And...' Commands.
                                                               (line 50)
* Y:                                     'Insert And...' Commands.
                                                               (line 31)


File: ipe.info,  Node: Variable Index,  Prev: Keys Index,  Up: Indexes

Variable Index
==============

 [index ]
* Menu:

* ipe-close-highlight:                   Display Customization.
                                                               (line 20)
* ipe-delete-action:                     Delete Customization. (line 15)
* ipe-delete-action <1>:                 Delete Customization. (line 21)
* ipe-delete-highlight:                  Display Customization.
                                                               (line 54)
* ipe-delete-highlight <1>:              Delete Customization. (line 16)
* ipe-delete-highlight <2>:              Delete Customization. (line 57)
* ipe-delete-highlight-wait:             Delete Customization. (line 17)
* ipe-delete-highlight-wait <1>:         Delete Customization. (line 70)
* ipe-empty-close-string:                PAIRs With Empty OPEN / CLOSE.
                                                               (line 21)
* ipe-empty-open-string:                 PAIRs With Empty OPEN / CLOSE.
                                                               (line 18)
* ipe-empty-pair-highlight:              Display Customization.
                                                               (line 49)
* ipe-empty-pair-highlight <1>:          PAIRs With Empty OPEN / CLOSE.
                                                               (line 26)
* ipe-escape-highlight:                  Display Customization.
                                                               (line 41)
* ipe-menu-support-p:                    Enabling the 'Edit' -> 'Pairs' Menu.
                                                               (line  6)
* ipe-mode-pairs:                        Customization.        (line 10)
* ipe-move-by-movements:                 Defining Custom 'ipe--movement' Functions.
                                                               (line 11)
* ipe-move-point-on-insert:              Positioning POINT and MARK.
                                                               (line  9)
* ipe-open-highlight:                    Display Customization.
                                                               (line 11)
* ipe-pairs:                             Customization.        (line  9)
* ipe-set-mark-on-insert:                Positioning POINT and MARK.
                                                               (line 33)
* ipe-update-forward-first-p:            Updating PAIRs.       (line 62)
* ipe-update-forward-first-p <1>:        Deleting PAIRs.       (line 48)
* ipe-update-forward-first-p <2>:        Replacing PAIRs.      (line 56)
* ipe-update-forward-first-p <3>:        Update Search Process.
                                                               (line 19)



Tag Table:
Node: Top614
Node: Overview1466
Node: Expected Usage3385
Node: Installation5016
Node: Usage7101
Node: Running ipe-insert-pair-edit7466
Node: ipe-edit-mode9690
Node: Other `ipe-insert-pair-edit-*' Commands10617
Node: The 'Edit' -> 'Pairs' Menu11768
Node: Enabling the 'Edit' -> 'Pairs' Menu13209
Node: Core Edit Mode Bindings13916
Node: Core Movement14599
Node: Core Movement Options17285
Node: Core Movement (Alphabetic)18416
Node: Core Movement (Arrows)19964
Node: Core Movement (WASD)21752
Node: Core Movement (VI)23263
Node: Core Movement (Custom)25006
Node: Inserting and Aborting25757
Node: Movement Units27095
Node: Changing PAIRs28720
Node: Mouse Movement30065
Node: Other Major Commands32457
Node: Updating PAIRs32911
Node: Deleting PAIRs35185
Node: Replacing PAIRs37008
Node: Customization39410
Node: Types of PAIR Definition40067
Node: Customization Using 'customize'41172
Node: Customization Using the 'Pairs' Menu42313
Node: Inline Customization45965
Node: Inline Customization Prompts47982
Node: Display Customization52688
Node: Other Edit Mode Bindings54434
Node: 'Insert And...' Commands54863
Node: Edit CONTENTS Commands56829
Node: Next / Previous Commands58794
Node: Next / Previous PAIRs59096
Node: Next / Previous CONTENTS60549
Node: Next / Previous OPEN / CLOSE62313
Node: Multiple PAIRs Commands64475
Node: Adding Multiple PAIRs Using the Emacs Region65378
Node: Adding Multiple PAIRs Using insert-pair-edit66914
Node: Adding Multiple PAIRs Using Existing OPEN / CLOSE68769
Node: Adding Multiple PAIRs Using PAIR CONTENT71442
Node: Adding Multiple PAIRs Using the Mouse74655
Node: Inserting Multiple PAIRs76912
Node: Removing PAIRs78857
Node: Escaping Text within a PAIR80368
Node: Other Features82739
Node: Line Movement83277
Node: Line Movement - Forward / Backward84281
Node: Line Movement - Beginning / End86471
Node: List Movement88947
Node: List Movement - Forward / Backward89699
Node: List Movement - Up / Down91523
Node: List Movement - Beginning / End93571
Node: Defining line PAIRs with an INFIX95286
Node: Auto Insertion98675
Node: Positioning POINT and MARK99993
Node: Centering the Display on a PAIR102008
Node: PAIRs With Empty OPEN / CLOSE102786
Node: Updating Existing PAIRs103944
Node: Update Search Process104659
Node: Update PAIR Matching106412
Node: Updates on a Region107712
Node: Delete Customization109164
Node: Development111885
Node: Creating 'ipe-mode-pairs' PAIRs Using Emacs Lisp112187
Node: Binding MNEMONICs to Keys118009
Node: Defining Custom 'ipe--movement' Functions118972
Node: Adding 'ipe' ERTs (Emacs Regression Tests)121787
Node: Running 'ipe' ERTs (Emacs Regression Tests)124600
Node: Indexes125550
Node: Concept Index125776
Node: Function Index128851
Node: Keys Index138313
Node: Variable Index149963

End Tag Table


Local Variables:
coding: utf-8
End:
