This is ipe.info, produced by makeinfo version 7.1 from ipe.texi.

Copyright © 2023 Brian Kavanagh


File: ipe.info,  Node: Top,  Next: Overview,  Up: (dir)

Insert Pair Edit (ipe)
**********************

This documentation describes the 'Insert Pair Edit' (ipe) *Emacs*
package.

* Menu:

* Overview::                     An overview of the 'Insert Pair Edit' (ipe) package.
* Installation::                 How to install the 'Insert Pair Edit' (ipe) package.
* Basic Usage::                  The 'insert-pair-edit' command.
* Basic Mode Key Bindings::      Basic 'ipe-edit-mode' key bindings.
* Other Major Commands::         Other major 'insert-pair-edit-*' commands.
* Customization::                The 'ipe' customization group.
* Other ipe-edit-mode Commands:: Other 'ipe-edit-mode' commands.
* Other Features::               Other 'insert-pair-edit' / 'ipe-edit-mode' features.
* Development::                  Documentation for developers.
* Index::                        Complete index.


File: ipe.info,  Node: Overview,  Next: Installation,  Prev: Top,  Up: Top

1 Overview
**********

At it's simplest, the 'Insert Pair Edit' (ipe) package is an *Emacs*
package that just supplies a command, ‘insert-pair-edit’.  This command
can be used to position and insert two pieces of text into an *Emacs*
buffer: an OPEN string, and a CLOSE string.  (Or, as it is named within
this package, a 'PAIR'.)

   For example, the ‘insert-pair-edit’ command can be used to position
and insert an open parenthesis '(', and, a close parenthesis ')', around
a given piece of text.

   The particular PAIR to be inserted by the ‘insert-pair-edit’ command
is identified by a customizable MNEMONIC, (usually a single character)
which is entered into the *Emacs* _minibuffer_ after running the
‘insert-pair-edit’ command, at the "Insert Pair: " prompt,

   Once identified by the MNEMONIC, this PAIR is displayed within the
current buffer (as overlays) around a _lexical unit_ surrounding POINT,
and these overlays can then be moved about the buffer (using a set of
pre-configured movement keys) to visually define the position at which
the PAIR is to be inserted into the buffer.

   The MNEMONIC and the text used for its associated OPEN and CLOSE
strings are customizable, can be _mode-dependent_, and offer options to:

   • Define the _lexical unit_ used for initial positioning and
     movement.
   • Update / Delete / Replace _existing_ PAIRs.
   • Edit the text enclosed within the PAIR.
   • Search for similar PAIRs.
   • Handle the editing / movement of multiple PAIRs at once.
   • Escape specific enclosing strings.
   • Indent intervening lines.
   • Insert prefix strings (INFIXes) at the beginning of intervening
     lines.
   • Re-position POINT and MARK on insert.

* Menu:

* Expected Usage::


File: ipe.info,  Node: Expected Usage,  Up: Overview

1.1 Expected Usage
==================

One target use for the functionality supplied by the 'Insert Pair Edit'
(ipe) package is _marking up_ text.

   For example:

   • Binding a set of HTML opening and closing tags:

          e.g.
            MNEMONIC: "1"  OPEN: "<h1>"     CLOSE: "</h1>"
            MNEMONIC: "e"  OPEN: "<em>"     CLOSE: "</em>"
            MNEMONIC: "s"  OPEN: "<strong>" CLOSE: "</strong>"
            etc...

     to a ‘html-mode’, and using the ‘insert-pair-edit’ command to add /
     edit these tags around existing text within a ‘.html’ file.

   • Binding a set of opening and closing strings representing
     _markdown_:

          e.g.
            MNEMONIC: "1"  OPEN: "#"   CLOSE: "#"
            MNEMONIC: "*"  OPEN: "**"  CLOSE: "**"
            MNEMONIC: "_"  OPEN: "_"   CLOSE: "_"
            etc...

     to a ‘markdown-mode’, and using the ‘insert-pair-edit’ to add /
     edit these tags around existing text within a ‘.md’ file.

   Another target use for this functionality is the addition of paired
programming constructs within a programming mode:

   For example:

   • Binding language specific paired quotes / keywords / comments:

          e.g.
            MNEMONIC: "/"  OPEN: "/*"   CLOSE: "*/"   INFIX: "**"
            MNEMONIC: "d"  OPEN: "/**"  CLOSE: " */"  INFIX: " * "
            MNEMONIC: ";"  OPEN: "// "  CLOSE: ""     INFIX: "// "
            etc...

     and using the ‘insert-pair-edit’ command to accelerate the process
     of writing in the given language.


File: ipe.info,  Node: Installation,  Next: Basic Usage,  Prev: Overview,  Up: Top

2 Installation
**************

To install the 'Insert Pair Edit' (ipe) package, download
‘insert-pair-edit’ from:

   <http://github.com/brians.emacs/insert-pair-edit>

   Add the following to your ‘.emacs’ file:

     (add-to-list 'load-path "<path-to-ipe-download-dir>")
     (require 'insert-pair-edit)

   Add your preferred key-binding for the ‘insert-pair-edit’ command.

   For example, to bind ‘insert-pair-edit’ to <META> + <(>:

     (global-set-key (kbd "M-(") 'insert-pair-edit)

   To configure the package:

   • Run the command:

          <M-x> customize-group <RET>

     And when prompted for a group via:

          Customize-Group:

     Enter:

          ipe

   • Or, select the:

          - Edit >
            ...
            - Pairs >
              ...
              - Options

     menu option

   Customize the ‘insert-pair-edit’ package according to your
preferences.  (*Note Customization::)


File: ipe.info,  Node: Basic Usage,  Next: Basic Mode Key Bindings,  Prev: Installation,  Up: Top

3 Basic Usage
*************

The functionality supplied ‘insert-pair-edit’ package can be accessed in
two main ways, using the ‘insert-pair-edit’ command, or, using the
‘Edit’ -> ‘Pairs’ menu.

* Menu:

* Running insert-pair-edit::
* The 'Edit' -> 'Pairs' menu::


File: ipe.info,  Node: Running insert-pair-edit,  Next: The 'Edit' -> 'Pairs' menu,  Up: Basic Usage

3.1 Running ‘insert-pair-edit’
==============================

     <M-(> - (Suggested Binding)

   Running ‘insert-pair-edit’ (via a pre-configured key-binding) (e.g.
<M-(>) will prompt the User (using the _minibuffer_) with the string:

   ‘Insert Pair: ’

   At this prompt, the User can then enter one of a set of MNEMONICs
(*Note Customization::.)  The set of available MNEMONICs will be visible
using _minibuffer_ TAB completion.

   TAB completion will display prompts of the form:

     'MNEMONIC1' - Insert Opening 'OPEN1' and Closing 'CLOSE1'
     'MNEMONIC2' - Insert Opening 'OPEN2' and Closing 'CLOSE2'
     'MNEMONIC3' - Insert Opening 'OPEN3' and Closing 'CLOSE3'
     ...

   Entering a valid MNEMONIC will then cause a PAIR of overlays (*Note
Display Customization::) to be added to the current buffer (at positions
around POINT) for both the desired OPEN and CLOSE string.

   For example, assuming that:

   • The ‘insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>, and;
   • The buffer contains the following text:

          The quick brown |fox jumps over the lazy dog.

     (Where the <|> character represents the current position of POINT.)

   Then, inserting a PAIR using the following keystrokes:

     <M-(> <(>

   Will add the <(> <)> PAIR around "fox", resulting in the buffer:

     The quick brown (|fox) jumps over the lazy dog.

   (Where the <(> <)> strings are overlays that can be moved by the
‘ipe-edit-mode’ key-bindings (*Note Basic Movement::))

   The initial position of the OPEN and CLOSE overlays will be
determined by the _lexical unit_ associated with the PAIR (either:
character, word, line or list.)  This can be set when customizing the
definition of the PAIR. (*Note Movement Units::)

   Once the overlays have been initially positioned, the
‘insert-pair-edit’ command will activate the ‘ipe-edit-mode’ minor-mode
to allow these overlays to be further adjusted.

* Menu:

* ipe-edit-mode::
* Other `insert-pair-edit-*' commands::


File: ipe.info,  Node: ipe-edit-mode,  Next: Other `insert-pair-edit-*' commands,  Up: Running insert-pair-edit

3.1.1 ipe-edit-mode
-------------------

The ‘ipe-edit-mode’ will set up a set of simple key bindings (*Note
Basic Mode Key Bindings::) to move the OPEN and CLOSE overlays of the
PAIR selected by one of the ‘insert-pair-edit’ commands.  Movement is
via a selected _lexical unit_, either:

   • "by characters"
   • "by words"
   • "by lines"
   • "by lists".

   This "movement mode" can be changed.  (*Note Movement Units::.)

   The ‘ipe-edit-mode’ will also set up a set of simple key bindings to
either process or abort the insertion of this PAIR of strings into the
buffer.  (*Note Inserting and Aborting::)

   Inserting or aborting the PAIR will then remove all of the
‘ipe-edit-mode’ key bindings, and return the User to the normal *Emacs*
mode for the given buffer.


File: ipe.info,  Node: Other `insert-pair-edit-*' commands,  Prev: ipe-edit-mode,  Up: Running insert-pair-edit

3.1.2 Other 'insert-pair-edit-*' commands
-----------------------------------------

Prefixing the call to the ‘insert-pair-edit’ command with one or more of
the *Emacs* ‘universal-argument’ (Usually bound to <C-u> by default) can
be used to modify the behaviour of the ‘insert-pair-edit’ command.

   For example, if using the suggested <M-(> binding for
‘insert-pair-edit’, the following keystrokes can be used to invoke
_other_ 'Insert Pair Edit' (ipe) commands:

<C-u> <M-(>
     Update an existing PAIR. (*Note Updating PAIRs::)

     (Command: ‘insert-pair-edit-update’)

<C-u> <C-u> <M-(>
     Delete an existing PAIR. (*Note Deleting PAIRs::)

     (Command: ‘insert-pair-edit-delete’)

<C-u> <C-u> <C-u> <M-(>
     Replace an existing PAIR with a REPLACEMENT PAIR. (*Note Replacing
     PAIRs::)

     (Command: ‘insert-pair-edit-replace’)


File: ipe.info,  Node: The 'Edit' -> 'Pairs' menu,  Prev: Running insert-pair-edit,  Up: Basic Usage

3.2 The 'Edit' -> 'Pairs' menu
==============================

     - Edit >
       ...
       - Pairs >
         - Insert PAIR >
           - 'OPEN' ... 'CLOSE'
           - ...
         - Update PAIR >
           - 'OPEN' ... 'CLOSE'
           - ...
         - Delete PAIR >
           - 'OPEN' ... 'CLOSE'
           - ...
         - Edit PAIR Definitions >
           - ...
         - Options
         - Info
         - Help

   If running *Emacs* in a graphical environment which supports menus,
the ‘insert-pair-edit’ package can add an extra ‘Pairs’ menu item to the
standard *Emacs* ‘Edit’ Menu.

   *NOTE*: The 'Insert Pair Edit' (ipe) menu bar is enabled using the
‘ipe-menu-support-p’ option.  (Default: *t*))

   The set of PAIRs listed under the ‘Insert PAIR’ / ‘Update PAIR’ /
‘Delete PAIR’ sub-menus will change dynamically based upon the current
buffer's ‘major-mode’.

   Selecting a menu item under ‘Insert PAIR’ will insert the selected
PAIR into the current buffer around POINT, and enter ‘ipe-edit-mode’.

   Selecting a menu item under ‘Update PAIR’ will update the _nearest_
(*Note Update Search Process::) PAIR (of the given type) and enter
‘ipe-edit-mode’.

   Selecting a menu item under ‘Delete PAIR’ will delete the _nearest_
(*Note Update Search Process::) PAIR (of the given type) and remain in
the current *Emacs* mode.


File: ipe.info,  Node: Basic Mode Key Bindings,  Next: Other Major Commands,  Prev: Basic Usage,  Up: Top

4 Basic Mode Key Bindings
*************************

The following sections describe the basic key bindings (and associated
commands) active when the ‘ipe-edit-mode’ is activated.

* Menu:

* Basic Movement::          Keys to move OPEN and CLOSE overlays.
* Basic Movement Options::  Alternate movement keys.
* Inserting and Aborting::  Keys to exit ‘ipe-edit-mode’.
* Movement Units::          Keys to change OPEN and CLOSE movement.
* Changing PAIRs::          Keys to change OPEN and CLOSE strings.
* Mouse Movement::          Movement enacted by mouse actions.


File: ipe.info,  Node: Basic Movement,  Next: Basic Movement Options,  Up: Basic Mode Key Bindings

4.1 Basic Movement
==================

Once ‘ipe-edit-mode’ is activated, the OPEN and CLOSE overlays of a PAIR
can be moved about the buffer.  By default, this is expected to be
achieved using a set of _twelve_ key-bindings.  _Six_ that control the
direction of movement of the OPEN overlay, and _six_ that control the
direction of movement of the CLOSE overlay.

   These basic movement key bindings can be configured using the
customization option, ‘ipe-edit-movement-keyset’, which can be used to
control which of a set of _pre-canned_ key bindings is activated when
‘ipe-edit-mode’ is active, or, can be used to set up a _user-defined_
set of bindings.

   By default, ‘ipe-edit-movement-keyset’ is set to activate the
following key bindings, which are similar to those normally used for
standard *Emacs* character and word movement.

                 <C-p>                            <M-p>
                   ^                                ^
                   |                                |
     <C-a> <C-b>  OPEN  <M-f> <M-e>  <M-a> <M-b>  CLOSE  <C-f> <C-e>
                   |                                |
                   v                                v
                 <M-n>                            <C-n>

<C-a>
     Move OPEN to the 'beginning' (Command: ‘ipe-edit--open-beg’)
<C-p>
     Move OPEN 'up' (Command: ‘ipe-edit--open-up’)
<C-b>
     Move OPEN 'backward' (Command: ‘ipe-edit--open-backward’)
<M-f>
     Move OPEN 'forward' (Command: ‘ipe-edit--open-forward’)
<M-n>
     Move OPEN 'down' (Command: ‘ipe-edit--open-down’)
<M-e>
     Move OPEN to the 'end' (Command: ‘ipe-edit--open-end’)

<M-a>
     Move CLOSE to the 'beginning' (Command: ‘ipe-edit--close-beg’)
<M-p>
     Move CLOSE 'up' (Command: ‘ipe-edit--close-up’)
<M-b>
     Move CLOSE 'backward' (Command: ‘ipe-edit--close-backward’)
<C-f>
     Move CLOSE 'forward' (Command: ‘ipe-edit--close-forward’)
<C-n>
     Move CLOSE 'down' (Command: ‘ipe-edit--close-down’)
<C-e>
     Move CLOSE to the 'end' (Command: ‘ipe-edit--close-end’)

   The amount each command moves its overlay is dependent upon the
current "movement mode", which is controlled using the IPE-MOVEMENT
variable.

   By default, IPE-MOVEMENT is set to ‘word’, which means that the keys
for the forward (‘ipe-edit--open-forward’ / ‘ipe-edit--close-forward’)
and backward (‘ipe-edit--open-backward’ / ‘ipe-edit--close-backward’)
commands will move the OPEN and CLOSE overlays forward and backward "by
words", and, up and down "by lines".


File: ipe.info,  Node: Basic Movement Options,  Next: Inserting and Aborting,  Prev: Basic Movement,  Up: Basic Mode Key Bindings

4.2 Basic Movement Options
==========================

The set of _movement_ key bindings that are active within
‘ipe-edit-mode’, can be changed using the customizable option
‘ipe-edit-movement-keyset’.

   To configure this option, run the command:

     <M-x> customize-variable <RET> ipe-edit-movement-keyset <RET>

   This option allows for the definition of either one or more
pre-canned "keysets" (_Alphabetic_, _Arrows_, _Modifiers_, _WASD_, _VI_)
to be toggled on and off independently, or, for a "user defined" keyset
to be installed.

   (i.e.  If using the pre-canned keyset, it is possible to activate
both the _Alphabetic_ and the _Arrows_ options, and be able to move the
OPEN and CLOSE overlays using both the alphabetic and arrows keys, or,
the User can simply define the own preferred movement key bindings and
use those instead.)

* Menu:

* Basic Movement (Alphabetic)::
* Basic Movement (Arrows)::
* Basic Movement (WASD)::
* Basic Movement (VI)::
* Basic Movement (Custom)::


File: ipe.info,  Node: Basic Movement (Alphabetic),  Next: Basic Movement (Arrows),  Up: Basic Movement Options

4.2.1 Alphabetic
----------------

If the ‘ipe-edit-movement-keyset’ option includes the _Alphabetic_ flag,
then, when in ‘ipe-edit-mode’, the basic movement of the OPEN and CLOSE
overlays is controlled by the same set of key bindings as the standard
*Emacs* character movement keys, but without the keyboard modifiers.

             <p>                    <P>
              ^                      ^
              |                      |
     <a> <b> OPEN <F> <E>  <A> <B> CLOSE <f> <e>
              |                      |
              v                      v
             <N>                    <n>

<a>
     Move OPEN to the 'beginning' (Command: ‘ipe-edit--open-beg’)
<p>
     Move OPEN 'up' (Command: ‘ipe-edit--open-up’)
<b>
     Move OPEN 'backward' (Command: ‘ipe-edit--open-backward’)
<F>
     Move OPEN 'forward' (Command: ‘ipe-edit--open-forward’)
<N>
     Move OPEN 'down' (Command: ‘ipe-edit--open-down’)
<E>
     Move OPEN to the 'end' (Command: ‘ipe-edit--open-end’)

<A>
     Move CLOSE to the 'beginning' (Command: ‘ipe-edit--close-beg’)
<P>
     Move CLOSE 'up' (Command: ‘ipe-edit--close-up’)
<B>
     Move CLOSE 'backward' (Command: ‘ipe-edit--close-backward’)
<f>
     Move CLOSE 'forward' (Command: ‘ipe-edit--close-forward’)
<n>
     Move CLOSE 'down' (Command: ‘ipe-edit--close-down’)
<e>
     Move CLOSE to the 'end' (Command: ‘ipe-edit--close-end’)


File: ipe.info,  Node: Basic Movement (Arrows),  Next: Basic Movement (WASD),  Prev: Basic Movement (Alphabetic),  Up: Basic Movement Options

4.2.2 Arrows
------------

If the ‘ipe-edit-movement-keyset’ option includes the _Arrows_ flag,
then, when in ‘ipe-edit-mode’, the basic movement of the OPEN and CLOSE
overlays is controlled by the arrows keys (<up>, <left>, <right>,
<down>), the <home> and <end> keys, and the <CTRL> modifier.

                   <up>                                      <C-up>
                    ^                                          ^
                    |                                          |
     <home> <left> OPEN <C-right> <C-end>  <C-home> <C-left> CLOSE <right> <end>
                    |                                          |
                    v                                          v
                 <C-down>                                    <down>

<home>
     Move OPEN to the 'beginning' (Command: ‘ipe-edit--open-beg’)
<up>
     Move OPEN 'up' (Command: ‘ipe-edit--open-up’)
<left>
     Move OPEN 'backward' (Command: ‘ipe-edit--open-backward’)
<C-right>
     Move OPEN 'forward' (Command: ‘ipe-edit--open-forward’)
<C-down>
     Move OPEN 'down' (Command: ‘ipe-edit--open-down’)
<C-end>
     Move OPEN to the 'end' (Command: ‘ipe-edit--open-end’)

<C-home>
     Move CLOSE to the 'beginning' (Command: ‘ipe-edit--close-beg’)
<C-up>
     Move CLOSE 'up' (Command: ‘ipe-edit--close-up’)
<C-left>
     Move CLOSE 'backward' (Command: ‘ipe-edit--close-backward’)
<right>
     Move CLOSE 'forward' (Command: ‘ipe-edit--close-forward’)
<down>
     Move CLOSE 'down' (Command: ‘ipe-edit--close-down’)
<end>
     Move CLOSE to the 'end' (Command: ‘ipe-edit--close-end’)


File: ipe.info,  Node: Basic Movement (WASD),  Next: Basic Movement (VI),  Prev: Basic Movement (Arrows),  Up: Basic Movement Options

4.2.3 WASD
----------

If the ‘ipe-edit-movement-keyset’ option includes the _WASD_ flag, then,
when in ‘ipe-edit-mode’, the basic movement of the OPEN and CLOSE
overlays is controlled by the (<q>, <w>, <a>, <s>, <d>, <e>) keys and
their uppercase counterparts.

             <w>                    <W>
              ^                      ^
              |                      |
     <q> <a> OPEN <D> <E>  <Q> <A> CLOSE <d> <e>
              |                      |
              v                      v
             <S>                    <s>

<q>
     Move OPEN to the 'beginning' (Command: ‘ipe-edit--open-beg’)
<w>
     Move OPEN 'up' (Command: ‘ipe-edit--open-up’)
<a>
     Move OPEN 'backward' (Command: ‘ipe-edit--open-backward’)
<D>
     Move OPEN 'forward' (Command: ‘ipe-edit--open-forward’)
<S>
     Move OPEN 'down' (Command: ‘ipe-edit--open-down’)
<E>
     Move OPEN to the 'end' (Command: ‘ipe-edit--open-end’)

<Q>
     Move CLOSE to the 'beginning' (Command: ‘ipe-edit--close-beg’)
<W>
     Move CLOSE 'up' (Command: ‘ipe-edit--close-up’)
<A>
     Move CLOSE 'backward' (Command: ‘ipe-edit--close-backward’)
<d>
     Move CLOSE 'forward' (Command: ‘ipe-edit--close-forward’)
<s>
     Move CLOSE 'down' (Command: ‘ipe-edit--close-down’)
<e>
     Move CLOSE to the 'end' (Command: ‘ipe-edit--close-end’)


File: ipe.info,  Node: Basic Movement (VI),  Next: Basic Movement (Custom),  Prev: Basic Movement (WASD),  Up: Basic Movement Options

4.2.4 VI
--------

If the ‘ipe-edit-movement-keyset’ option includes the _VI_ flag, then,
when in ‘ipe-edit-mode’, the basic movement of the OPEN and CLOSE
overlays is controlled by the VI basic character movement keys (<k>,
<h>, <l>, <j>) and their uppercase counterparts, plus the VI start and
end of line keys (<0>, <$>), and the VI word movement keys (<B> and <W>)
for the ‘ipe-edit--open-beg’ / ‘ipe-edit--open-end’ /
‘ipe-edit--close-beg’ / ‘ipe-edit--close-end’ commands.

             <k>                    <K>
              ^                      ^
              |                      |
     <0> <h> OPEN <L> <B>  <W> <H> CLOSE <l> <$>
              |                      |
              v                      v
             <J>                    <j>

<0>
     Move OPEN to the 'beginning' (Command: ‘ipe-edit--open-beg’)
<k>
     Move OPEN 'up' (Command: ‘ipe-edit--open-up’)
<h>
     Move OPEN 'backward' (Command: ‘ipe-edit--open-backward’)
<L>
     Move OPEN 'forward' (Command: ‘ipe-edit--open-forward’)
<J>
     Move OPEN 'down' (Command: ‘ipe-edit--open-down’)
<B>
     Move OPEN to the 'end' (Command: ‘ipe-edit--open-end’)

<W>
     Move CLOSE to the 'beginning' (Command: ‘ipe-edit--close-beg’)
<K>
     Move CLOSE 'up' (Command: ‘ipe-edit--close-up’)
<H>
     Move CLOSE 'backward' (Command: ‘ipe-edit--close-backward’)
<l>
     Move CLOSE 'forward' (Command: ‘ipe-edit--close-forward’)
<j>
     Move CLOSE 'down' (Command: ‘ipe-edit--close-down’)
<$>
     Move CLOSE to the 'end' (Command: ‘ipe-edit--close-end’)


File: ipe.info,  Node: Basic Movement (Custom),  Prev: Basic Movement (VI),  Up: Basic Movement Options

4.2.5 Custom Movement Keyset
----------------------------

A "user defined" set of 'Insert Pair Edit' (ipe) ‘ipe-edit-mode’
movement key bindings can be set using the customization option
‘ipe-edit--custom-movement-keyset’.

   To configure this option, run the command:

     <M-x> customize-variable <RET> ipe-edit--custom-movement-keyset <RET>

   Or, select the _'Insert Pair Edit' - Movement Keys: Custom Key Set_
option from the ‘Edit’ -> ‘Pairs’ menu:

     - Edit >
       ...
       - Pairs >
         ...
         - Options
           ...
           * 'Insert Pair Edit' - Movement Keys: Custom Key Set

   menu option.


File: ipe.info,  Node: Inserting and Aborting,  Next: Movement Units,  Prev: Basic Movement Options,  Up: Basic Mode Key Bindings

4.3 Inserting and Aborting
==========================

To exit ‘ipe-edit-mode’, the User either _inserts_ the PAIR, or
_aborts_.

4.3.1 Inserting
---------------

<RET> (in ‘ipe-edit-mode’)

   Once the OPEN and CLOSE overlays have been used to correctly position
the OPEN and CLOSE strings of an 'Insert Pair Edit' (ipe) PAIR within
the buffer, they can be inserted into the buffer using the command:
‘ipe-edit--insert-pair’.

 -- Function: ipe-edit--insert-pair
     This command will insert the OPEN and CLOSE strings of an 'Insert
     Pair Edit' (ipe) PAIR into the buffer, exit the ‘ipe-edit-mode’,
     and, restore all key bindings to normal.

   Other "Insert And..."  commands are available.  (*Note Insert And...
Commands::)

4.3.2 Aborting
--------------

<C-g> (in ‘ipe-edit-mode’)

   If it is not desirable to insert the OPEN and CLOSE strings
represented by the overlays within ‘ipe-edit-mode’, the mode can be
aborted using the command: ‘ipe-edit--abort’.

 -- Function: ipe-edit--abort
     This command will exit the ‘ipe-edit-mode’ and restore all key
     bindings to normal, without inserting the OPEN or CLOSE strings
     into the buffer.


File: ipe.info,  Node: Movement Units,  Next: Changing PAIRs,  Prev: Inserting and Aborting,  Up: Basic Mode Key Bindings

4.4 Movement Units
==================

The _default_ movement unit for a given 'Insert Pair Edit' (ipe) PAIR is
"by words", however, each individual PAIR can define its own _initial
movement_ (*Note Customization::.)

   Movement can be:

     "by characters"
     "by words"
     "by lines"
     "by lists"

   In addition to each PAIR defining its own _initial movement_,
movement can be changed in ‘ipe-edit-mode’ using the following commands,
(Bound to the <m> prefix in ‘ipe-edit-mode’ by default.)

     <m> <c> (in ‘ipe-edit-mode’)

      -- Function: ipe-edit--movement-by-char
          Changes the movement made by the ‘ipe-edit-mode’ basic
          movement (*Note Basic Movement::) commands to be "by
          characters".

     <m> <w> (in ‘ipe-edit-mode’)

      -- Function: ipe-edit--movement-by-word
          Changes the movement made by the ‘ipe-edit-mode’ basic
          movement (*Note Basic Movement::) commands to be "by words".

     <m> <l> (in ‘ipe-edit-mode’)
      -- Function: ipe-edit--movement-by-line
          Changes the movement made by the ‘ipe-edit-mode’ basic
          movement (*Note Basic Movement::) commands to be "by lines".
          (*Note Line Movement::)

     <m> <x> (in ‘ipe-edit-mode’)

      -- Function: ipe-edit--movement-by-list
          Changes the movement made by the ‘ipe-edit-mode’ basic
          movement (*Note Basic Movement::) commands to be "by lists".
          (*Note List Movement::)


File: ipe.info,  Node: Changing PAIRs,  Next: Mouse Movement,  Prev: Movement Units,  Up: Basic Mode Key Bindings

4.5 Changing PAIRs
==================

The text to be inserted by the OPEN and CLOSE overlays of an 'Insert
Pair Edit' (ipe) PAIR can be changed on the fly.

   <(> (in ‘ipe-edit-mode’)

 -- Function: ipe-edit--change-pair
     Prompts for a MNEMONIC used to identify a PAIR from the
     ‘customize’-able IPE-PAIRS / IPE-MODE-PAIRS variables, and replaces
     the currently displayed strings within the OPEN and CLOSE overlays
     with the OPEN and CLOSE strings for the newly identified PAIR.

   For example, assuming that:

   • The ‘insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>; and
   • The <[> MNEMONIC is bound to the PAIR <[> <]>.

   If you had originally used the keystrokes:

     <M-(> <(>

   To insert a <(> <)> PAIR into the buffer, you could change the this
to a <[> <]> PAIR after entering ‘ipe-edit-mode’ by using the
keystrokes:

     <(> <[>

   This can be especially useful when _Updating_ PAIRs, as a PAIR with a
given MNEMONIC can be selected by using the keystrokes:

     <M-u> <M-(> _MNEMONIC_

   And then changed to a new PAIR using the keystrokes:

     <(> _NEW-MNEMONIC_


File: ipe.info,  Node: Mouse Movement,  Prev: Changing PAIRs,  Up: Basic Mode Key Bindings

4.6 Mouse Movement
==================

If enabled via the ‘ipe-mouse-support-p’ option (Default: *t*), 'Insert
Pair Edit' (ipe) PAIRs can be moved using the Mouse.

<mouse-1> (in ‘ipe-edit-mode’)
     Left clicking on a location within the buffer, will reposition the
     currently displayed OPEN overlay to the start of the closest
     _lexical unit_.

     (Command: ‘ipe-mouse--open’)

<mouse-2> (in ‘ipe-edit-mode’)
     Clicking on a location within the buffer with the _mouse-2_ button,
     will reposition the currently displayed CLOSE overlay to the end of
     the closest _lexical unit_.

     (Command: ‘ipe-mouse--close’)

<drag-mouse-1> (in ‘ipe-edit-mode’)
     Selecting a _region_ by left clicking, and dragging the mouse from
     one location to another, will position the OPEN overlay at the
     _lexical unit_ closest to the start of the _region_, and the CLOSE
     overlay at the _lexical unit_ closest to the end of the _region_.

     (Command: ‘ipe-mouse--drag’)

<wheel-up> / <wheel-down> (in ‘ipe-edit-mode’)
     If available, mouse wheel actions can be used to move the OPEN and
     CLOSE overlays forward and backward.

     (Commands: ‘ipe-mouse--open-backward’ / ‘ipe-mouse--close-forward’)

<C-wheel-up> / <C-wheel-down> (in ‘ipe-edit-mode’)
     Holding the <CTRL> key while using the mouse wheel can be used to
     move the OPEN and CLOSE overlays in the opposite directions.

     (Commands: ‘ipe-mouse--open-forward’ / ‘ipe-mouse--close-backward’)

<S-wheel-up> / <S-wheel-down> / <C-S-wheel-up> / <C-S-wheel-down> (in ‘ipe-edit-mode’)
     Holding the <SHIFT> key while using the mouse wheel can be used to
     move the OPEN and CLOSE overlays using alternate movements (i.e.
     "by-char" regardless of the current _Movement Mode_)

      
      (Commands: 
      ‘ipe-mouse--open-forward-alt’ / 
      ‘ipe-mouse--close-backward-alt’ / 
      ‘ipe-mouse--open-backward-alt’ / 
      ‘ipe-mouse--close-forward-alt’ 
      )

<M-wheel-up> / <M-wheel-down> (in ‘ipe-edit-mode’)
     Holding the <META> key while using the mouse wheel can be used to
     change the current "movement mode".

     (Commands: ‘ipe-mouse--next-movement’ /
     ‘ipe-mouse--previous-movement’)


File: ipe.info,  Node: Other Major Commands,  Next: Customization,  Prev: Basic Mode Key Bindings,  Up: Top

5 Other Major Insert-Pair-Edit Commands
***************************************

The following sections describe the other _Major_ 'Insert Pair Edit'
(ipe) commands.

* Menu:

* Updating PAIRs::  Commands to update existing PAIRs.
* Deleting PAIRs::  Commands to delete existing PAIRs.
* Replacing PAIRs:: Commands to replace existing PAIRs.


File: ipe.info,  Node: Updating PAIRs,  Next: Deleting PAIRs,  Up: Other Major Commands

5.1 Updating PAIRs
==================

     <C-u> <M-(> _MNEMONIC_

   The positions of existing PAIRs within a buffer can be _updated_ by
using the command:

 -- Function: insert-pair-edit-update
     This command updates the position of the OPEN and CLOSE strings of
     an 'Insert Pair Edit' (ipe) PAIR. The OPEN and CLOSE strings of the
     PAIR are determined by: prompting for, and looking up, a MNEMONIC
     in the ‘customize’-able IPE-PAIRS / IPE-MODE-PAIRS variables.

   Calling the ‘insert-pair-edit-update’ command will search the current
buffer for a PAIR which matches the OPEN and CLOSE strings for the given
MNEMONIC. It will replace the OPEN and CLOSE strings with overlays,
which can then be moved using the standard 'Insert Pair Edit' (ipe)
*Note Basic Movement:: commands.

   This command can be also be invoked by invoking the
'universal-argument' (Generally bound to <C-u>), before a call to
‘insert-pair-edit’.

   For example, assuming that:

   • The ‘insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>;
   • The _Modifiers_ ‘ipe-edit-movement-keyset’ has been enabled, and;
   • The buffer contains the following text:

          The quick brown (|fox) jumps over the lazy dog.

     (*Where*: The <|> character is used to represent the current
     position of POINT.)

   To update the position of the <(> <)> PAIR around "fox" you would use
the keystrokes:

     <C-u> <M-(> <(>

   Which will call ‘insert-pair-edit-update’, select the <(> <)> PAIR
around "fox", and enter ‘ipe-edit-mode’.

   To then move the existing parenthesis around "fox" to "over", you
would then use the keystroke:

     <M-f>

   Which will result in the buffer:

     The quick brown |fox (jumps) over the lazy dog.

   To then insert the <(> <)> PAIR into the buffer use the keystroke:

     <RET>

   *NOTE*: The ‘insert-pair-edit-update’ command will search for the
_nearest_ (*Note Update Search Process::) PAIR to POINT. The direction
of the search is determined by the option ‘ipe-update-forward-first’.


File: ipe.info,  Node: Deleting PAIRs,  Next: Replacing PAIRs,  Prev: Updating PAIRs,  Up: Other Major Commands

5.2 Deleting PAIRs
==================

     <C-u> <C-u> <M-(> _MNEMONIC_

   Existing PAIRs within a buffer can be _deleted_ by using the command:

 -- Function: insert-pair-edit-delete
     This command deletes the OPEN and CLOSE strings of an 'Insert Pair
     Edit' (ipe) PAIR. The OPEN and CLOSE strings of the PAIR are
     determined by: prompting for, and looking up, a MNEMONIC in the
     ‘customize’-able IPE-PAIRS / IPE-MODE-PAIRS variables.

   Calling the ‘insert-pair-edit-delete’ command will search the current
buffer for a PAIR which matches the OPEN and CLOSE strings matching the
given MNEMONIC. If a PAIR is found, it will delete the OPEN and CLOSE
strings.

   This command can be also be invoked by invoking two
‘universal-argument’ (Generally bound to <C-u>) calls before a call to
‘insert-pair-edit’.

   For example, assuming that:

   • The ‘insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>, and;
   • The buffer contains the following text:

          The quick brown (|fox) jumps over the lazy dog.

     (*Where*: the <|> character is used to represent the current
     position of POINT.)

   To delete the parenthesis around "fox" you would use the keystrokes:

     <C-u> <C-u> <M-(> <(>

   Which will result in the buffer:

     The quick brown |fox jumps over the lazy dog.

   NOTE: The ‘insert-pair-edit-delete’ command will search for the
_nearest_ (*Note Update Search Process::) PAIR to POINT. The direction
of the search is determined by the ‘ipe-update-forward-first’ option.


File: ipe.info,  Node: Replacing PAIRs,  Prev: Deleting PAIRs,  Up: Other Major Commands

5.3 Replacing PAIRs
===================

     <C-u> <C-u> <C-u> <M-(> _MNEMONIC_

   An existing PAIR within a buffer can be _replaced_ with the OPEN and
CLOSE string of another PAIR by using the command:

 -- Function: insert-pair-edit-replace
     This command replaces the OPEN and CLOSE strings of an 'Insert Pair
     Edit' (ipe) PAIR. The OPEN and CLOSE strings of the PAIR to be
     replaced are determined by: prompting for, and looking up, a
     MNEMONIC in the ‘customize’-able IPE-PAIRS / IPE-MODE-PAIRS
     variables.  The PAIR specifying the replacement OPEN and CLOSE
     strings is also determined by prompting for, and looking up, a
     MNEMONIC in the ‘customize’-able IPE-PAIRS / IPE-MODE-PAIRS
     variables

   The ‘insert-pair-edit-replace’ command will search the current buffer
for a PAIR which matches the OPEN and CLOSE strings matching the given
MNEMONIC. If a PAIR is found, it will replace the OPEN and CLOSE strings
with overlays containing the new OPEN and CLOSE strings for the PAIR
identified by the second REPLACEMENT MNEMONIC. These new OPEN and CLOSE
strings can then be moved using the standard 'Insert Pair Edit' (ipe)
basic movement (*Note Basic Movement::) commands.

   This command can be also be invoked by invoking the
‘universal-argument’ (Generally bound to <C-u>), three times before a
call to ‘insert-pair-edit’.

   For example, assuming that:

   • The ‘insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>;
   • The <[> MNEMONIC is bound to the PAIR <[> <]>, and;
   • The buffer contains the following text:

          The quick brown (|fox) jumps over the lazy dog.

     (*Where*: The <|> character is used to represent the current
     position of POINT.)

   To replace the <(> <)> PAIR around "fox" with <[> <]>, you would use
the keystrokes:

     <C-u> <C-u> <C-u> <M-(> <(> <[>

   Which will result in the buffer:

     The quick brown [|fox] jumps over the lazy dog.

   NOTE: The ‘insert-pair-edit-replace’ command will search for the
_nearest_ (*Note Update Search Process::) PAIR to POINT. The direction
of the search is determined by the ‘ipe-update-forward-first’ option.


File: ipe.info,  Node: Customization,  Next: Other ipe-edit-mode Commands,  Prev: Other Major Commands,  Up: Top

6 Customization
***************

The set of PAIRs that can be inserted, updated or deleted using the
‘insert-pair-edit’ command is controlled by the:

     IPE-PAIRS
     IPE-MODE-PAIRS

   Variables.

   These variables can be used to define several different _types_ of
PAIRs (*Note Types of PAIR Definition::.)

   These variables can be edited in a number of ways:

* Menu:

* Types of PAIR Definition::
* Customization using 'customize'::
* Customization using the 'Pairs' Menu::
* Inline Customization::
* Display Customization::


File: ipe.info,  Node: Types of PAIR Definition,  Next: Customization using 'customize',  Up: Customization

6.1 Types of PAIR Definition
============================

There are four _types_ of 'Insert Pair Edit' (ipe) PAIR definition:

     BASIC - A simple PAIR definition with just an OPEN and CLOSE
     string.
     INTERMEDIATE - A more complex PAIR definition which can have a
     predefined initial movement, an INFIX string, escapes, and can be
     _Auto-Inserted_.
     ADVANCED - An even more complex PAIR definition which can have all
     of the customization of an INTERMEDIATE PAIR, but with additional
     properties that define the position at which POINT is placed when a
     PAIR is inserted, a custom _indentation_ function, and a _menu_
     definition.
     CUSTOM MOVEMENT - A PAIR definition based upon a _custom movement_
     function.  (See: *Note Defining custom 'ipe--movement' Functions::)

   Each customization option (Using 'customize', Using the "Edit" menu,
or _inline_) offers options to select the _type_ of PAIR that is to be
_added_, _edited_, or _deleted_.


File: ipe.info,  Node: Customization using 'customize',  Next: Customization using the 'Pairs' Menu,  Prev: Types of PAIR Definition,  Up: Customization

6.2 Customization using 'customize'
===================================

To edit the global set of 'Insert Pair Edit' (ipe) PAIRs using the
*Emacs* ‘customize’ package, run the command:

     <M-x> customize-variable <RET> ipe-pairs <RET>

   This will display a ‘custom-mode’ buffer in which the values within
the IPE-PAIRS variable can be edited using standard *Emacs* ‘customize’
widgets.  These widgets can be used to enter the four _types_ of PAIRs
(*Note Types of PAIR Definition::) (Identified by the *Emacs*
‘customize’ VALUE MENU.)

   To edit a _Mode-Specific_ set of PAIRs using the *Emacs* ‘customize’
package, run the command:

     <M-x> customize-variable <RET> ipe-mode-pairs <RET>

   This will display a ‘custom-mode’ buffer in which the values within
the IPE-MODE-PAIRS variable can be edited using standard *Emacs*
‘customize’ widgets.  Each entry within the IPE-MODE-PAIRS variable,
associates a _mode_ with a set of PAIR definitions.


File: ipe.info,  Node: Customization using the 'Pairs' Menu,  Next: Inline Customization,  Prev: Customization using 'customize',  Up: Customization

6.3 Customization using the 'Pairs' Menu
========================================

 - Edit > 
 ...  
  - Pairs > 
 ...  
  - Edit PAIR Definitions > 
 ...  

   If running in a graphical environment which supports a menu bar, (and
the *Emacs* ‘menu-bar-mode’ has been enabled,) the 'Insert Pair Edit'
(ipe) package can be customized using the *Emacs* menu bar.

   *NOTE*: The 'Insert Pair Edit' (ipe) menu bar is enabled using the
‘ipe-menu-support-p’ option.  (Default: *t*)

   The ‘Edit Pair Definitions >’ sub-menu contains a number of sub-menus
which can be used to _Add_, _Modify_ and _Delete_ 'Insert Pair Edit'
(ipe) PAIR definitions.

   ‘Edit Pair Definitions >’ sub menus:

‘Add PAIR Definition...’
     Displays a Window in which the definition of a new _Global_ PAIR
     can be edited using *Emacs* widgets.

‘Add Mode-Specific PAIR Definition...’
     Prompts the user for a MAJOR-MODE, and then displays a Window in
     which the definition of a new _Mode-Specific_ PAIR can be edited
     using *Emacs* widgets.

‘Edit PAIR Definition’
     Offers a sub-menu for each _Global_ PAIR, which if selected,
     displays a Window in which the definition of the selected _Global_
     PAIR can be edited using *Emacs* widgets.

‘Edit Mode-Specific PAIR Definition’
     Offers a sub-menu for each _Mode-Specific_ PAIR (for the current
     ‘major-mode’), which if selected, displays a Window in which the
     definition of the selected _Mode-Specific_ PAIR can be edited using
     *Emacs* widgets.  (This menu will only be enabled if there are
     existing _Mode-Specific_ PAIR definitions for the current buffer's
     ‘major-mode’.)

‘Edit MNEMONIC Definition...’
     Prompts the User for an MNEMONIC for an existing _Global_ PAIR
     (using the _minibuffer_), then prompts the User for a REPLACEMENT
     mnemonic, and then changes the MNEMONIC for the given _Global_ PAIR
     to the given REPLACEMENT MNEMONIC.

‘Edit Mode-Specific MNEMONIC Definition...’
     Prompts the User for an MNEMONIC for an existing _Mode-Specific_
     PAIR (using the _minibuffer_), then prompts the User for a
     REPLACEMENT MNEMONIC, and then changes the MNEMONIC for the given
     _Mode-Specific_ PAIR to the given REPLACEMENT mnemonic.  (This menu
     will only be enabled if there are existing _Mode-Specific_ PAIR
     definitions for the current buffer's ‘major-mode’.)

‘Delete PAIR Definition’
     Offers a sub-menu for each _Global_ PAIR, which if selected,
     deletes the given _Global_ PAIR.

‘Delete Mode-Specific PAIR Definition’
     Offers a sub-menu for each _Mode-Specific_ PAIR (for the current
     ‘major-mode’), which if selected, deletes the given _Mode-Specific_
     PAIR from the current mode.  (This menu will only be enabled if
     there are existing _Mode-Specific_ PAIR definitions for the current
     buffer's ‘major-mode’.)

‘Delete PAIR Definition...’
     Prompts the User for a MNEMONIC for an existing _Global_ PAIR
     (using the _minibuffer_), and then deletes the selected _Global_
     PAIR definition from the IPE-PAIRS variable.

‘Delete Mode-Specific PAIR Definition...’
     Prompts the User for a ‘major-mode’ and a MNEMONIC for an existing
     _Mode-Specific_ PAIR (using the _minibuffer_), and then deletes the
     selected _Mode-Specific_ PAIR from the IPE-MODE-PAIRS variable.


File: ipe.info,  Node: Inline Customization,  Next: Display Customization,  Prev: Customization using the 'Pairs' Menu,  Up: Customization

6.4 Inline Customization
========================

'Insert Pair Edit' (ipe) PAIR definitions can also be added / updated or
deleted _inline_, by using key bindings which execute customization
commands from within the ‘insert-pair-edit’ _minibuffer_ prompt, or when
within the ‘ipe-edit-mode’ itself.

   Bindings are supplied for the following commands:

<C-+> (at the ‘insert-pair-edit’ prompt or in ‘ipe-edit-mode’)
     Prompts the User (using the ‘minibuffer’) to create a new 'Insert
     Pair Edit' (ipe) PAIR definition for a given MNEMONIC.

     (Command: ‘ipe-defn--edit-pair’)

<M-+> (at the ‘insert-pair-edit’ prompt or in ‘ipe-edit-mode’)
     Prompts the User (using the ‘minibuffer’) to create a new
     _Mode-Specific_ 'Insert Pair Edit' (ipe) PAIR definition for a
     given MNEMONIC.

     (Command: ‘ipe-defn--edit-mode-pair’)

<C-%> (at the ‘insert-pair-edit’ prompt or in ‘ipe-edit-mode’)
     Prompts the User (using the ‘minibuffer’) to change the MNEMONIC
     for an existing 'Insert Pair Edit' (ipe) PAIR.

     (Command: ‘ipe-defn--change-pair-mnemonic’)

<M-%> (at the ‘insert-pair-edit’ prompt or in ‘ipe-edit-mode’)
     Prompts the User (using the ‘minibuffer’) to change the MNEMONIC
     for an existing _Mode-Specific_ 'Insert Pair Edit' (ipe) PAIR.

     (Command: ‘ipe-defn--change-mode-pair-mnemonic’)

<C-*> (at the ‘insert-pair-edit’ prompt or in ‘ipe-edit-mode’)
     Prompts the User (using the ‘minibuffer’) to delete an existing
     'Insert Pair Edit' (ipe) PAIR.

     (Command: ‘ipe-defn--delete-pair’)

<M-*> (at the ‘insert-pair-edit’ prompt or in ‘ipe-edit-mode’)
     Prompts the User (using the ‘minibuffer’) to delete an existing
     _Mode-Specific_ 'Insert Pair Edit' (ipe) PAIR.

     (Command: ‘ipe-defn--delete-mode-pair’)

* Menu:

* Inline Customization Prompts::


File: ipe.info,  Node: Inline Customization Prompts,  Up: Inline Customization

6.4.1 Inline Customization Prompts
----------------------------------

When creating a new 'Insert Pair Edit' (ipe) PAIR (or editing an
existing PAIR) using the _Inline Customization_ commands, the User will
be prompted to enter the following information (using the ‘minibuffer’):

‘Create new 'Insert Pair Edit' PAIR for - MNEMONIC:’
     At this prompt, enter the (generally single character) MNEMONIC
     that will be used at the ‘insert-pair-edit’ prompt to identify the
     PAIR. (*Note Running insert-pair-edit::)

‘OPEN:’
     At this prompt, enter the OPEN string of the 'Insert Pair Edit'
     (ipe) PAIR to be associated with the given MNEMONIC.

‘CLOSE:’
     At this prompt, enter the CLOSE string of the 'Insert Pair Edit'
     (ipe) PAIR to be associated with the given MNEMONIC.

‘Set 'Intermediate' options?’
     At this prompt, enter a ‘y’ / ‘n’ answer.  Entering ‘n’ will
     complete the PAIR definition and exit the ‘minibuffer’.

‘Movement:’
     At this prompt, enter either:

        • characters
        • words
        • lines
        • lists

     This will define the _Initial Movement_ (*Note Movement Units::) of
     the PAIR to be associated with the given MNEMONIC.

‘INFIX:’
     If the ‘Movement:’ is set to ‘lines’, the User will be prompted to
     enter an (optional) ‘INFIX’.  (*Note Defining line PAIRs with an
     INFIX::.)  This may be left blank if no ‘INFIX’ is desired for the
     PAIR to be associated with MNEMONIC.

‘Include Escapes?’
     At this prompt, enter a ‘y’ / ‘n’ answer.  Entering ‘y’ will prompt
     the User to enter a list of ESCAPE / REPLACEMENT strings for the
     PAIR to be associated with MNEMONIC. (*Note Escaping Text within a
     PAIR::.)  This may be left blank if no ‘ESCAPEs’ are desired for
     the PAIR to be associated associated with MNEMONIC.

‘Escape Match Text:’
     If the ‘Include Escapes?’ is set to ‘y’, the ‘Escape Match Text:’
     prompt will be displayed.  At this prompt, enter ESCAPE text.
     Matches to this substring found between the OPEN and CLOSE strings
     will be replaced with the text entered at the next prompt.  (To
     ignore escaping completely, or to exit the ‘Escape Match Text’
     input after entering multiple ESCAPE / REPLACEMENT strings, leave
     this prompt blank and press <RET>.)

‘Escape Replacement Text:’
     If the ‘Include Escapes?’ is set to ‘y’, the ‘Escape Replacement
     Text:’ prompt will be displayed after entering an ESCAPE within the
     ‘Escape Match Text’ prompt.  At this prompt, enter the REPLACEMENT
     text corresponding to the ESCAPE text entered at the previous
     prompt.  Matches to the ESCAPE text found between the OPEN and
     CLOSE strings will be replaced with this text.  After entering the
     REPLACEMENT string, the User will be returned to the ‘Escape Match
     Text:’ prompt to enter further ESCAPES.

‘Auto-Insert?’
     At this prompt, enter a ‘y’ / ‘n’ answer.  Entering ‘y’ will
     indicate that when this PAIR is selected using the
     ‘insert-pair-edit’ prompt, the OPEN and CLOSE strings will be
     instantly inserted into the buffer without entering
     ‘ipe-edit-mode’.  (*Note Auto Insertion::)

‘Set 'Advanced' options?’
     At this prompt, enter a ‘y’ / ‘n’ answer.  Entering ‘n’ will
     complete the PAIR definition and exit the ‘minibuffer’.

‘Move Point on Insert:’
     At this prompt, enter either:

        • close-beg
        • close-end
        • open-beg
        • open-end
        • resume

     This will define the position at which POINT is set when the PAIR
     is inserted into the buffer (*Note Positioning POINT and MARK::.)

‘Indent Function:’
     At this prompt, enter either:

        • none
        • current
        • previous

     Indicating the position at which to indent the PAIR / intervening
     text for PAIRS with an _Initial Movement_ of "by lines".

‘Menu:’
     At this prompt, enter a string indicating the location of the newly
     defined PAIR within the ‘Pairs -> Edit’ menu.  (Sub-menus can be
     defined by using a "/" character as a separator.)


File: ipe.info,  Node: Display Customization,  Prev: Inline Customization,  Up: Customization

6.5 Display Customization
=========================

The fonts and colours used by the overlays that display the position of
the OPEN and CLOSE strings in ‘ipe-edit-mode’ can be customized by:

   Using ‘customize-face’ command for the following *Emacs* _faces_:

   • IPE-OPEN-HIGHLIGHT - The face used by OPEN overlay.

     It can be ‘customize’'d by running the command:

          <M-x> customize-face <RET> ipe-open-highlight <RET>

     (By default, the OPEN overlay will be displayed using the HIGHLIGHT
     face.)

   • IPE-CLOSE-HIGHLIGHT - The face used by the CLOSE overlay.

     It can be ‘customize’'d by running the command:

          <M-x> customize-face <RET> ipe-close-highlight <RET>

     (By default, the CLOSE overlay will be displayed using the
     SHOW-PAREN-MATCH face.)

   Or by using the *Emacs* menu option:  
 
 - Edit > 
 ...  
  - Pairs > 
 ...  
  - Options 

   And selecting ‘'Insert Pair Edit' - Display Options’;

   Other faces used by the ‘ipe-edit-mode’ are:

   • IPE-ESCAPE-HIGHLIGHT - The face used by the ESCAPE overlays.

     (*Note Escaping Text within a PAIR::)

   • IPE-HIGHLIGHT-INFIX - The Face used by the INFIX overlays.

     (*Note Defining line PAIRs with an INFIX::)

   • IPE-EMPTY-PAIR-HIGHLIGHT - The face used to highlight EMPTY OPEN /
     CLOSE string positions.

     (*Note PAIRs With Empty OPEN / CLOSE::)


File: ipe.info,  Node: Other ipe-edit-mode Commands,  Next: Other Features,  Prev: Customization,  Up: Top

7 Other ipe-edit-mode Commands
******************************

The following sections describe some of the other commands /
key-bindings available within ‘ipe-edit-mode’.

* Menu:

* Insert And... Commands::
* Edit CONTENTS Commands::
* Next / Previous Commands::
* Multiple PAIRs Commands::
* Escaping Text within a PAIR::


File: ipe.info,  Node: Insert And... Commands,  Next: Edit CONTENTS Commands,  Up: Other ipe-edit-mode Commands

7.1 Insert And... Commands
==========================

When in ‘ipe-edit-mode’, to perform an action on insert of a PAIR (*Note
Inserting and Aborting::), the following keystrokes / commands can be
used:

<O> (in ‘ipe-edit-mode’)
     Insert the current PAIR at the given location and move POINT to the
     start of the OPEN string.  (Ignoring the _per-PAIR_ and default
     ‘ipe-set-mark-on-insert’ settings.)

     (Command: ‘ipe-edit--ia-goto-open’)

<C> (in ‘ipe-edit-mode’)
     Insert the current PAIR at the given location and move POINT to the
     start of the CLOSE string.  (Ignoring the _per-PAIR_ and default
     ‘ipe-set-mark-on-insert’ settings.)

     (Command: ‘ipe-edit--ia-goto-close’)

<U> (in ‘ipe-edit-mode’)
     Insert the current PAIR at the given location and leave POINT at
     its original location (Ignoring the _per-PAIR_ and default
     ‘ipe-set-mark-on-insert’ settings.)

     (Command: ‘ipe-edit--ia-resume’)

<Y> (in ‘ipe-edit-mode’)
     Insert the current PAIR and copy the text between the OPEN and
     CLOSE strings to the _kill-ring_.

     (Command: ‘ipe-edit--ia-copy-text’)

<K> (in ‘ipe-edit-mode’)
     Insert the current PAIR and kill the text between the OPEN and
     CLOSE strings.

     (Command: ‘ipe-edit--ia-kill-text’)


File: ipe.info,  Node: Edit CONTENTS Commands,  Next: Next / Previous Commands,  Prev: Insert And... Commands,  Up: Other ipe-edit-mode Commands

7.2 Edit CONTENTS Commands
==========================

When in ‘ipe-edit-mode’, to edit the _text_ between the OPEN and CLOSE
overlays (without exiting ‘ipe-edit-mode’), the following keystrokes /
commands can be used:

<C-k> (in ‘ipe-edit-mode’)
     Kill the text between the OPEN and CLOSE overlays, and remain in
     ‘ipe-edit-mode’.

     (Command: ‘ipe-edit--contents-kill’)

<M-w> (in ‘ipe-edit-mode’)
     Copy the text between the OPEN and CLOSE overlays to the *Emacs*
     _kill-ring_, and remain in ‘ipe-edit-mode’.

     (Command: ‘ipe-edit--contents-copy’)

<C-y> (in ‘ipe-edit-mode’)
     Paste the last killed text between the OPEN and CLOSE overlays
     (replacing the existing text), and remain in ‘ipe-edit-mode’.

     (Command: ‘ipe-edit--contents-yank’)

<%> (in ‘ipe-edit-mode’)
     Prompt the User for replacement text, and replace the text between
     the OPEN and CLOSE overlays with the text entered by the User.

     (Command: ‘ipe-edit--contents-replace’)

<C-SPC> (in ‘ipe-edit-mode’)
     Remove whitespace around the text between the OPEN and CLOSE
     overlays, and remain in ‘ipe-edit-mode’.

     (Command: ‘ipe-edit--contents-trim’)

<M-u> (in ‘ipe-edit-mode’)
     Convert the text between the OPEN and CLOSE overlays to uppercase,
     and remain in ‘ipe-edit-mode’.

     (Command: ‘ipe-edit--contents-upcase’)

<M-c> (in ‘ipe-edit-mode’)
     Capitalize the text between the OPEN and CLOSE overlays, and remain
     in ‘ipe-edit-mode’.

     (Command: (‘ipe-edit--contents-capitalize’))

<M-l> (in ‘ipe-edit-mode’)
     Convert the text between the OPEN and CLOSE overlays to lowercase,
     and remain in ‘ipe-edit-mode’.

     (Command: (‘ipe-edit--contents-downcase’))


File: ipe.info,  Node: Next / Previous Commands,  Next: Multiple PAIRs Commands,  Prev: Edit CONTENTS Commands,  Up: Other ipe-edit-mode Commands

7.3 Next / Previous Commands
============================

* Menu:

* Next / Previous PAIRs::
* Next / Previous CONTENTS::
* Next / Previous OPEN / CLOSE::


File: ipe.info,  Node: Next / Previous PAIRs,  Next: Next / Previous CONTENTS,  Up: Next / Previous Commands

7.3.1 Next / Previous PAIRs
---------------------------

To search for the next or previous PAIR (while in ‘ipe-edit-mode’) use
the commands:

   • <C-r> (in ‘ipe-edit-mode’)

     (Command: ‘ipe-edit--update-previous-pair’)

   • <C-s> (in ‘ipe-edit-mode’)

     (Command: ‘ipe-edit--update-next-pair’)

   These commands will search for the _next_ or _previous_ OPEN and
CLOSE string, and, if found, insert the current PAIR; create a new PAIR
of overlays over the next / previous PAIR, and; remain in
‘ipe-edit-mode’, allowing the User to continue editing the new PAIR.

   For example, assuming that:

   • The ‘insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>, and;
   • The buffer contains the following text:

          The (quick) brown (|fox) jumps (over) the lazy dog.

     (Where the <|> character represents the current position of POINT.)

   Then, updating a PAIR using the following keystrokes:

     <M-(> <(>

   Will enter ‘ipe-edit-mode’ and edit the <(> <)> PAIR around "fox".

   Searching forward using the keystroke:

     <C-s>

   Will edit the <(> <)> PAIR around "over".

   Searching backward using the keystrokes:

     <C-r> <C-r>

   Will edit the <(> <)> PAIR around "quick".


File: ipe.info,  Node: Next / Previous CONTENTS,  Next: Next / Previous OPEN / CLOSE,  Prev: Next / Previous PAIRs,  Up: Next / Previous Commands

7.3.2 Next / Previous CONTENTS
------------------------------

To create a new PAIR around text which matches the CONTENTS contained
between the OPEN and CLOSE strings of an 'Insert Pair Edit' (ipe) PAIR
(while in ‘ipe-edit-mode’) use the commands:

   • <M-r> (in ‘ipe-edit-mode’)

     (Command: ‘ipe-edit--update-previous-contents’)

   • <M-s> (in ‘ipe-edit-mode’)

     (Command: ‘ipe-edit--update-next-contents’)

   These commands will search for the _next_ or _previous_ piece of text
which matches the text currently contained between the selected OPEN and
CLOSE strings, and, if found, insert the current PAIR; create a new PAIR
of overlays around the next / previous piece of text, and; remain in
‘ipe-edit-mode’, allowing the User to continue editing the new PAIR.

   For example, assuming that:

   • The ‘insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>, and;
   • The buffer contains the following text:

          The Quick Brown Fox |Jumps Over (The) Lazy Dog.

     (Where the <|> character represents the current position of POINT.)

   Then, updating a PAIR using the following keystrokes:

     <M-(> <(>

   Will enter ‘ipe-edit-mode’ and edit the <(> <)> PAIR around the
second "The".

   Searching backward for the text "The" using the keystroke:

     <M-r>

   Will insert the brackets around the second "The", and add a new <(>
<)> PAIR around the first "The".

   Which will result in the buffer:

     (The) Quick Brown Fox |Jumps Over (The) Lazy Dog.


File: ipe.info,  Node: Next / Previous OPEN / CLOSE,  Prev: Next / Previous CONTENTS,  Up: Next / Previous Commands

7.3.3 Next / Previous OPEN / CLOSE
----------------------------------

To change the matched location of either the OPEN or CLOSE string of an
'Insert Pair Edit' (ipe) PAIR _individually_ (while in ‘ipe-edit-mode’)
use the commands:

   • <C-<> (in ‘ipe-edit-mode’)

     (Command: ‘ipe-edit--update-previous-open’)

   • <M->> (in ‘ipe-edit-mode’)

     (Command: ‘ipe-edit--update-next-open’)

   • <M-<> (in ‘ipe-edit-mode’)

     (Command: ‘ipe-edit--update-previous-close’)

   • <C->> (in ‘ipe-edit-mode’)

     (Command: ‘ipe-edit--update-next-close’)

   These commands will search for the _next_ or _previous_ OPEN or CLOSE
string of an 'Insert Pair Edit' (ipe) PAIR, and, if found, insert just
the current OPEN or CLOSE string (without inserting its corresponding
partner.)  The command will then create a new overlay over the next /
previous OPEN or CLOSE and remain in ‘ipe-edit-mode’, allowing the User
to continue editing the new PAIR.

   *NOTE*: Searches for OPEN and CLOSE strings will be bounded by their
corresponding partner string.  It will not be possible to select a CLOSE
before the currently selected OPEN, or to select an OPEN after the
currently selected CLOSE.

   For example, assuming that:

   • The ‘insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>, and;
   • The buffer contains the following text:

          The (quick) brown (|fox) jumps (over) the lazy dog.

     (Where the <|> character represents the current position of POINT.)

   Then, updating a PAIR using the following keystrokes:

     <M-(> <(>

   Will enter ‘ipe-edit-mode’ and edit the <(> <)> PAIR around "fox".

   Searching forward for the next CLOSE using the keystroke:

     <C->>

   Will edit the <(> <)> PAIR around "fox jumps over".

   Searching backward for the previous OPEN using the keystroke:

     <C-<>

   Will edit the <(> <)> PAIR around "quick brown fox jumps over".


File: ipe.info,  Node: Multiple PAIRs Commands,  Next: Escaping Text within a PAIR,  Prev: Next / Previous Commands,  Up: Other ipe-edit-mode Commands

7.4 Multiple PAIRs Commands
===========================

When in ‘ipe-edit-mode’, it is possible to edit multiple PAIRs at once.
All basic ‘ipe-edit-mode’ movement commands (*Note Basic Movement::)
will operate on all active PAIRs, and all commands which edit the
CONTENTS of a PAIR (*Note Edit CONTENTS Commands::), will also operate
on all active PAIRs.

   Adding / removing multiple PAIRs can be done in a number of different
ways:

* Menu:

* Adding Multiple PAIRs using the Emacs Region::
* Adding Multiple PAIRs using insert-pair-edit::
* Adding Multiple PAIRs using Existing OPEN / CLOSE::
* Adding Multiple PAIRs using PAIR CONTENT::
* Removing PAIRs::


File: ipe.info,  Node: Adding Multiple PAIRs using the Emacs Region,  Next: Adding Multiple PAIRs using insert-pair-edit,  Up: Multiple PAIRs Commands

7.4.1 Adding Multiple PAIRs using the Emacs Region
--------------------------------------------------

If the *Emacs* _region_ is _active_ when running one of the 'Insert Pair
Edit' (ipe) commands:

   • ‘insert-pair-edit-update’
   • ‘insert-pair-edit-replace’

   These commands will operate upon all PAIRs found within the _region_.
OPEN and CLOSE overlays will be created for each PAIR found within the
active *Emacs* _region_.

   For example, assuming that:

   • The ‘insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The _Modifiers_ ‘ipe-edit-movement-keyset’ has been enabled;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>, and;
   • The buffer contains the following text:

          |The (quick) brown (fox) jumps (over) the lazy dog.@

     (Where the <|> character represents the current position of POINT,
     and the <@> character represents the current position of MARK for
     an active *Emacs* _region_.)

   Then, updating the set of PAIRs using the following keystrokes:

     <C-u> <M-(> <(>

   Will enter ‘ipe-edit-mode’ and edit all three of the <(> <)> PAIRs
(around "quick", "fox" and "over"):

   Moving the PAIRs forward one word using the following keystroke:

     <M-f>

   Which will result in the buffer:

     |The quick (brown) fox (jumps) over (the) lazy dog.@


File: ipe.info,  Node: Adding Multiple PAIRs using insert-pair-edit,  Next: Adding Multiple PAIRs using Existing OPEN / CLOSE,  Prev: Adding Multiple PAIRs using the Emacs Region,  Up: Multiple PAIRs Commands

7.4.2 Adding Multiple PAIRs using insert-pair-edit
--------------------------------------------------

The simplest way to add additional 'Insert Pair Edit' (ipe) PAIRs when
already in ‘ipe-edit-mode’ is to re-run the ‘insert-pair-edit’ command.
When already in ‘ipe-edit-mode’ mode, re-running ‘insert-pair-edit’ will
insert another PAIR (with the same OPEN and CLOSE strings as the active
PAIR) at POINT.

   For example, assuming that:

   • The ‘insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The _Modifiers_ ‘ipe-edit-movement-keyset’ has been enabled;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>, and;
   • The buffer contains the following text:

          The quick brown (|fox) jumps over the lazy dog.

     (Where the <|> character represents the current position of POINT.)

   Then, updating a PAIR using the following keystrokes:

     <M-(> <(>

   Will enter ‘ipe-edit-mode’ and edit the <(> <)> PAIR around "fox".

   Moving the PAIR forward two words using the following keystrokes:

     <C-f> <C-f>

   Which will result in the buffer:

     The quick brown |fox jumps (over) the lazy dog.

   And then running ‘insert-pair-edit’ again (without exiting
‘ipe-edit-mode’), using the keystroke:

     <M-(>

   Will add a second PAIR around "fox":

   Which will result in the buffer:

     The quick brown (|fox) jumps (over) the lazy dog.

   Both of which can be moved one word forward using the keystroke:

     <C-f>

   Which will result in the buffer:

     The quick brown |fox (jumps) over (the) lazy dog.


File: ipe.info,  Node: Adding Multiple PAIRs using Existing OPEN / CLOSE,  Next: Adding Multiple PAIRs using PAIR CONTENT,  Prev: Adding Multiple PAIRs using insert-pair-edit,  Up: Multiple PAIRs Commands

7.4.3 Adding Multiple PAIRs using Existing OPEN / CLOSE
-------------------------------------------------------

Additional 'Insert Pair Edit' (ipe) PAIRs from can be added within
‘ipe-edit-mode’ by searching the buffer for existing text which matches
the OPEN and CLOSE strings of the currently active PAIR. This can be
useful when _marking up_ a common set of existing PAIRs.

   Keystrokes / commands are supplied in ‘ipe-edit-mode’ to:

<s> (in ‘ipe-edit-mode’)
     Search forward (from the end of the current CLOSE overlay) for
     matches to the current OPEN and CLOSE strings, and, if they exist,
     delete them from the buffer and replace them with a new 'Insert
     Pair Edit' (ipe) PAIR.

     (Command: ‘ipe-edit--add-next-pair’)

<r> (in ‘ipe-edit-mode’)
     Search backward (from the start of the current OPEN overlay) for
     matches to the current OPEN and CLOSE strings, and, if they exist,
     delete them from the buffer and replace them with a new 'Insert
     Pair Edit' (ipe) PAIR.

     (Command: ‘ipe-edit--add-previous-pair’)

   For example, assuming that:

   • The ‘insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The _Modifiers_ ‘ipe-edit-movement-keyset’ has been enabled;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>;
   • The <[> MNEMONIC is bound to the PAIR <[> <]>, and;
   • The buffer contains the following text:

          The (quick) brown (|fox) jumps (over) the lazy dog.

     (Where the <|> character represents the current position of POINT.)

   Then, updating a PAIR using the following keystrokes:

     <M-(> <(>

   Will enter ‘ipe-edit-mode’ and edit the <(> <)> PAIR around the
"fox".

   Searching forward for another <(> <)> PAIR can be achieved using the
following keystroke:

     <s>

   Which will result in the PAIR around "over" being added as a second
'Insert Pair Edit' (ipe) PAIR.

   Searching backward for another <(> <)> PAIR can be achieved using the
following keystroke:

     <r>

   Which will result in the PAIR around "quick" being added as a third
'Insert Pair Edit' (ipe) PAIR.

   These three PAIRs can then be edited as one by the ‘ipe-edit-mode’
commands.

   For example, to change all of the PAIRs from <(> <)> PAIRs, to <[>
<]> PAIRs, you would enter the keystrokes:

     <(> <[>

   Which will result in the buffer:

     The [quick] brown [|fox] jumps [over] the lazy dog.


File: ipe.info,  Node: Adding Multiple PAIRs using PAIR CONTENT,  Next: Removing PAIRs,  Prev: Adding Multiple PAIRs using Existing OPEN / CLOSE,  Up: Multiple PAIRs Commands

7.4.4 Adding Multiple PAIRs using PAIR CONTENT
----------------------------------------------

Additional 'Insert Pair Edit' (ipe) PAIRs can be added within
‘ipe-edit-mode’ by searching the buffer for existing text which matches
the text between OPEN and CLOSE strings of the currently active PAIR.
This can be useful when _marking up_ the same word / phrase with a
common PAIR.

   Keystrokes / commands are supplied in ‘ipe-edit-mode’ to:

<S> (in ‘ipe-edit-mode’)
     Search forward (from the end of the current CLOSE overlay) for
     matches to the text between the current OPEN and CLOSE strings,
     and, if it exists, add a new 'Insert Pair Edit' (ipe) PAIR around
     the text.

     (Command: ‘ipe-edit--add-next-contents’)

<R> (in ‘ipe-edit-mode’)
     Search backward (from the start of the current OPEN overlay) for
     matches to the text between the current OPEN and CLOSE strings,
     and, if it exists, add a new 'Insert Pair Edit' (ipe) PAIR around
     the text.

     (Command: ‘ipe-edit--add-previous-contents’)

   For example, assuming that:

   • The ‘insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The _Modifiers_ ‘ipe-edit-movement-keyset’ has been enabled;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>;
   • The <[> MNEMONIC is bound to the PAIR <[> <]>, and;
   • The buffer contains the following text:

          The quick brown fox jumps over the lazy dog.
          The quick brown (|fox) jumps over the lazy dog.
          The quick brown fox jumps over the lazy dog.

     (Where the <|> character represents the current position of POINT.)

   Then, updating a PAIR using the following keystrokes:

     <M-(> <(>

   Will enter ‘ipe-edit-mode’ and edit the <(> <)> PAIR around the
middle "fox".

   Searching forward for another match to the string "fox" can be
achieved using the following keystroke:

     <S>

   Which will result in a new PAIR being added around "fox" on the third
line.

   Which will result in the buffer:

     The quick brown fox jumps over the lazy dog.a
     The quick brown (|fox) jumps over the lazy dog.
     The quick brown (fox) jumps over the lazy dog.

   Searching backward for another "fox" string can be achieved using the
following keystroke:

     <R>

   Which will result in a new PAIR being added around "fox" on the first
line.

   Which will result in the buffer:

     The quick brown (fox) jumps over the lazy dog.
     The quick brown (|fox) jumps over the lazy dog.
     The quick brown (fox) jumps over the lazy dog.

   These three PAIRs can then be edited as one by the ‘ipe-edit-mode’
commands.

   For example, To change all of the PAIRs from <(> <)> PAIRs, to <[>
<]> PAIRs, use the following keystrokes:

     <(> <[>

   Which will result in the buffer:

     The quick brown [fox] jumps over the lazy dog.
     The quick brown [|fox] jumps over the lazy dog.
     The quick brown [fox] jumps over the lazy dog.


File: ipe.info,  Node: Removing PAIRs,  Prev: Adding Multiple PAIRs using PAIR CONTENT,  Up: Multiple PAIRs Commands

7.4.5 Removing PAIRs
--------------------

To remove a PAIR when using ‘ipe-edit-mode’ to edit multiple PAIRs at
once, the following keystrokes / commands are supplied:

<C-d> (in ‘ipe-edit-mode’)
     Remove the first 'Insert Pair Edit' (ipe) OPEN and CLOSE overlay.
     If there are no remaining PAIRs after the first PAIR has been
     removed, it will exit ‘ipe-edit-mode’.

     (Command: ‘ipe-edit--delete-first-pair’)

<DEL> (in ‘ipe-edit-mode’)
     Remove the last 'Insert Pair Edit' (ipe) OPEN and CLOSE overlay.
     If there are no remaining PAIRs after the last PAIR has been
     removed, it will exit ‘ipe-edit-mode’.

     (Command: ‘ipe-edit--delete-last-pair’)

   *NOTE*: Mouse click / drag commands (*Note Mouse Movement::) will
always remove all but one PAIR.


File: ipe.info,  Node: Escaping Text within a PAIR,  Prev: Multiple PAIRs Commands,  Up: Other ipe-edit-mode Commands

7.5 Escaping Text within a PAIR
===============================

_Intermediate_ and _Advanced_ (*Note Types of PAIR Definition::) 'Insert
Pair Edit' (ipe) PAIRs can define ESCAPE strings.

   When present between an OPEN and CLOSE overlay within
‘ipe-edit-mode’, ESCAPE strings will be _replaced_ with overlays
displaying a REPLACEMENT string.  These REPLACEMENT strings will also be
inserted into the buffer if the PAIR is inserted into the buffer using
the ‘ipe-edit--insert-pair’ command.

   This can be useful when using the 'Insert Pair Edit' (ipe) library to
insert PAIRs of "quotes".

   REPLACEMENT strings will be displayed using the IPE-ESCAPE-HIGHLIGHT
face.

   For example, if an 'Insert Pair Edit' (ipe) PAIR was defined with:

   • A MNEMONIC <'>;
   • <'> as its OPEN string, and;
   • <'> as its CLOSE string.

   The User could define an ESCAPE for the PAIR which replaced internal
<'> strings between the OPEN and CLOSE string with <\'> (backslash +
quote) strings, thus allowing internal quote strings to be distinguished
from the outer PAIR of quotes.

   For example, assuming that:

   • The ‘insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The _Modifiers_ ‘ipe-edit-movement-keyset’ has been enabled;
   • The <'> MNEMONIC is bound to the PAIR <'> <'>;
   • The _ESCAPES_ for the <'> MNEMONIC have been defined as:  
      
      ' -> \' 
      \ -> \\ 
      

     and;
   • The buffer contains the following text:

          The quick brown '|fox' jumps over the lazy dog.

     (Where the <|> character represents the current position of POINT.)

   Then, inserting a PAIR using the following keystrokes:

     <M-(> <'>

   And then moving the OPEN backward and the CLOSE forward using the
following keystrokes:

     <C-b> <C-f>

   Will position the <'> characters around the phrase "brown fox jumps",
and ESCAPE the <'> characters around "fox", by replacing them with <\'>
REPLACEMENTS.

   Which will result in the buffer:

     The quick 'brown \'fox\' jumps' over the lazy dog.

   *NOTE*: The 'Insert Pair Edit' (ipe) _Update_ commands (*Note
Updating Existing PAIRs::) recognise ESCAPE strings, and adjust their
matching algorithms accordingly.


File: ipe.info,  Node: Other Features,  Next: Development,  Prev: Other ipe-edit-mode Commands,  Up: Top

8 Other Features
****************

The following sections describe the more advanced features (and
associated commands / key-bindings) of the 'Insert Pair Edit' (ipe)
package.

* Menu:

* Line Movement::
* List Movement::
* Defining line PAIRs with an INFIX::
* Auto Insertion::
* Positioning POINT and MARK::
* PAIRs With Empty OPEN / CLOSE::
* Updating Existing PAIRs::


File: ipe.info,  Node: Line Movement,  Next: List Movement,  Up: Other Features

8.1 Line Movement
=================

_Intermediate_ and _Advanced_ (*Note Types of PAIR Definition::) 'Insert
Pair Edit' (ipe) PAIRs can be defined with an _Initial Movement_ of "by
lines".  (The User can also change the current movement lexical unit
_on-the-fly_ within ‘ipe-edit-mode’ to "by lines" using the
‘ipe-edit--movement-by-line’ command.  (*Note Movement Units::))

   The behaviour of the basic movement (*Note Basic Movement::) commands
is modified for PAIRs with a "by lines" movement type.

   The _up_ and _down_ commands:

   • ‘ipe-edit--open-up’
   • ‘ipe-edit--open-down’
   • ‘ipe-edit--close-up’
   • ‘ipe-edit--close-down’

   operate as per other movement modes ("by characters", "by words".)

   However, the other basic movement commands are re-bound to have
different behaviour:

* Menu:

* Line Movement - Forward / Backward::
* Line Movement - Beginning / End::


File: ipe.info,  Node: Line Movement - Forward / Backward,  Next: Line Movement - Beginning / End,  Up: Line Movement

8.1.1 Line Movement - Forward / Backward
----------------------------------------

The Forward / Backward basic movement (*Note Basic Movement::) of
'Insert Pair Edit' (ipe) PAIRS with an _Initial Movement_ of "by lines"
is modified from the standard pattern used by the "by characters" / "by
words" movements.

   The:

   • ‘ipe-edit--open-forward’
   • ‘ipe-edit--open-backward’
   • ‘ipe-edit--close-forward’
   • ‘ipe-edit--close-backward’

   commands, are re-bound so that instead of moving the OPEN and CLOSE
overlays, they are used to insert whitespace at the beginning of each
intervening line between the OPEN and CLOSE overlays.

   For example, assuming that:

   • The ‘insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The _Modifiers_ ‘ipe-edit-movement-keyset’ has been enabled;
   • The <{> MNEMONIC is bound to the PAIR <{> and <}>;
   • The _Initial Movement_ for the <{> MNEMONIC is "by lines", and;
   • The buffer contains the following text:

          {
          The quick brown fox jumps over the lazy dog.
          The quick brown fox jumps over the lazy dog.
          The quick brown fox jumps over the lazy dog.
          }

   To indent the lines between the <{> and <}> in the following text by
two spaces you would used the keystrokes:

     <C-u> <M-(> <{>

   Which will edit the <{> <}> PAIR and enter ‘ipe-edit-mode’.

   You would then use the keystrokes:

     <C-f> <C-f>

   To indent the text between the <{> <}> by two spaces.

   Which will result in the buffer:

     {
       The quick brown fox jumps over the lazy dog.
       The quick brown fox jumps over the lazy dog.
       The quick brown fox jumps over the lazy dog.
     }

   To remove the indent of the text between the <{> <}>, you would use
the keystrokes:

     <M-b> <M-b>

   Which will result in the buffer:

     {
     The quick brown fox jumps over the lazy dog.
     The quick brown fox jumps over the lazy dog.
     The quick brown fox jumps over the lazy dog.
     }


File: ipe.info,  Node: Line Movement - Beginning / End,  Prev: Line Movement - Forward / Backward,  Up: Line Movement

8.1.2 Line Movement - Beginning / End
-------------------------------------

The Beginning / End basic movement (*Note Basic Movement::) of 'Insert
Pair Edit' (ipe) PAIRS with an _Initial Movement_ of "by lines" is
modified from the standard pattern used by the "by characters" / "by
words" movements.

   The:

   • ‘ipe-edit--open-beg’
   • ‘ipe-edit--open-end’
   • ‘ipe-edit--close-beg’
   • ‘ipe-edit--close-end’

   commands, are re-bound so that instead of moving the OPEN and CLOSE
overlays to beginning / end of a line, they are instead used to _toggle_
the insertion of an empty line before / after the OPEN / CLOSE overlay.

   For example, assuming that:

   • The ‘insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The _Modifiers_ ‘ipe-edit-movement-keyset’ has been enabled;
   • The <{> MNEMONIC is bound to the PAIR <{> and <}>;
   • The _Initial Movement_ for the <{> MNEMONIC is "by lines", and;
   • The buffer contains the following text:

          The quick brown fox jumps over the lazy dog.
          {The quick brown fox jumps over the lazy dog.}
          The quick brown fox jumps over the lazy dog.

   To add extra empty lines before and after the <{> and <}>, you would
first use the keystrokes:

     <C-u> <M-(> <{>

   Which will update the existing <{> <}> PAIR, and enter
‘ipe-edit-mode’.

   You would then use the keystrokes:

     <C-a>

   Which will add an empty line before the OPEN overlay.

   Which will result in the buffer:

     The quick brown fox jumps over the lazy dog.
     {
     The quick brown fox jumps over the lazy dog.}
     The quick brown fox jumps over the lazy dog.

   And you would then use the keystrokes:

     <C-e>

   To add an empty line after the CLOSE overlay.

   Which will result in the buffer:

     The quick brown fox jumps over the lazy dog.
     {
     The quick brown fox jumps over the lazy dog.
     }
     The quick brown fox jumps over the lazy dog.

   These empty lines can be removed by the ‘ipe-edit--open-end’ /
‘ipe-edit--close-beg’ commands, using the keystrokes:

     <M-a> <M-e>

   Which will result in the buffer:

     The quick brown fox jumps over the lazy dog.
     {The quick brown fox jumps over the lazy dog.}
     The quick brown fox jumps over the lazy dog.


File: ipe.info,  Node: List Movement,  Next: Defining line PAIRs with an INFIX,  Prev: Line Movement,  Up: Other Features

8.2 List Movement
=================

_Intermediate_ and _Advanced_ (*Note Types of PAIR Definition::) 'Insert
Pair Edit' (ipe) PAIRs can be defined with an _Initial Movement_ of "by
lists".  (The User can also change the current movement lexical unit
_on-the-fly_ within ‘ipe-edit-mode’ to "by lists" using the
‘ipe-edit--movement-by-list’ command.  (*Note Movement Units::))

   The behaviour of the basic movement (*Note Basic Movement::) commands
is modified for PAIRs with a "by lists" movement type.

* Menu:

* List Movement - Forward / Backward::
* List Movement - Up / Down::
* List Movement - Beginning / End::


File: ipe.info,  Node: List Movement - Forward / Backward,  Next: List Movement - Up / Down,  Up: List Movement

8.2.1 List Movement - Forward / Backward
----------------------------------------

The Forward / Backward basic movement (*Note Basic Movement::) of
'Insert Pair Edit' (ipe) PAIRS with an _Initial Movement_ of "by lists"
is modified from the standard pattern used by the "by characters" / "by
words" movements.

   The:

   • ‘ipe-edit--open-forward’
   • ‘ipe-edit--open-backward’
   • ‘ipe-edit--close-forward’
   • ‘ipe-edit--close-backward’

   commands, are re-bound so that instead of moving the OPEN and CLOSE
overlays forward / backward over text, they instead move as per the
*Emacs* ‘forward-list’ / ‘backward-list’ commands.

   For example, assuming that:

   • The ‘insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The _Modifiers_ ‘ipe-edit-movement-keyset’ has been enabled;
   • The <[> MNEMONIC is bound to the PAIR <[> <]>;
   • The _Initial Movement_ for the <[> MNEMONIC is "by lists", and;
   • The buffer contains the following text:

          ([(a b c)](d e f)(g h i))

   To edit the <[> <]> PAIR, you would enter the keystrokes:

     <M-(> <[>

   Which will edit the <[> <]> PAIR around "(a b c)", and enter
‘ipe-edit-mode’.

   Then, to move the _closing_ <]> around "(a b c)" _forward_, you would
use the keystroke:

     <C-f>

   Which will move the <]> forward "by list".

   Which will result in the buffer:

     ([(a b c)(d e f)](g h i))

   Then, to move the _opening_ square bracket around "(a b c)(d e f)"
_forward_, you would use the keystroke:

     <M-f>

   Which will move the <[> forward "by list".

   Which will result in the buffer:

     ((a b c)[(d e f)](g h i))


File: ipe.info,  Node: List Movement - Up / Down,  Next: List Movement - Beginning / End,  Prev: List Movement - Forward / Backward,  Up: List Movement

8.2.2 List Movement - Up / Down
-------------------------------

The Up / Down basic movement (*Note Basic Movement::) of 'Insert Pair
Edit' (ipe) PAIRS with an _Initial Movement_ of "by lists" is modified
from the standard pattern used by the "by characters" / "by words"
movements.

   The:

   • ‘ipe-edit--open-up’
   • ‘ipe-edit--open-down’
   • ‘ipe-edit--close-up’
   • ‘ipe-edit--close-down’

   commands, are re-bound so that instead of moving the OPEN and CLOSE
overlays up / down lines of text, they instead move as per the *Emacs*
‘up-list’ / ‘down-list’ commands.

   For example, assuming that:

   • The ‘insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The _Modifiers_ ‘ipe-edit-movement-keyset’ has been enabled;
   • The <[> MNEMONIC is bound to the PAIR <[> <]>;
   • The _Initial Movement_ for the <[> MNEMONIC is "by lists", and;
   • The buffer contains the following text:

          ([(a b c)](d e f)(g h i))

   To edit the <[> <]> PAIR, you would enter the keystrokes:

     <M-(> <[>

   Which will edit the <[> <]> PAIR around "(a b c)", and enter
‘ipe-edit-mode’.

   Then, to move the <[> <]> PAIR around "(a b c)" _up_, you would use
the keystroke:

     <C-p>

   Which will move the <[> <]> PAIR up "by list".

   Which will result in the buffer:

     [((a b c)(d e f)(g h i))]

   Then, to move the <[> <]> PAIR around the entire buffer back _down_,
you would use the keystroke:

     <M-n>

   Which will move the <[> <]> PAIR down "by list".

   Which will result in the buffer:

     ([(a b c)(d e f)(g h i)])

   To move the <[> <]> PAIR now around the "(a b c)(d e f)(g h i)"
further _down_, you would used the keystroke:

     <M-n>

   Which will move the <[> <]> PAIR down "by list".

   Which will result in the buffer:

     (([a b c])(d e f)(g h i))


File: ipe.info,  Node: List Movement - Beginning / End,  Prev: List Movement - Up / Down,  Up: List Movement

8.2.3 List Movement - Beginning / End
-------------------------------------

The Beginning / End basic movement (*Note Basic Movement::) of 'Insert
Pair Edit' (ipe) PAIRS with an _Initial Movement_ of "by lists" is
modified from the standard pattern used by the "by characters" / "by
words" movements.

   The:

   • ‘ipe-edit--open-beg’
   • ‘ipe-edit--open-end’
   • ‘ipe-edit--close-beg’
   • ‘ipe-edit--close-end’

   commands, are re-bound so that instead of moving the OPEN and CLOSE
overlays to the beginning / end of lines, they instead move as per the
*Emacs* ‘beginning-of-defun’ / ‘end-of-defun’ commands.

   For example, assuming that:

   • The ‘insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The _Modifiers_ ‘ipe-edit-movement-keyset’ has been enabled;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>;
   • The <[> MNEMONIC is bound to the PAIR <[> <]>;
   • The _Initial Movement_ for the <[> MNEMONIC is "by lists", and;
   • The buffer contains the following text:

          ((a b c)(d [e] f)(g h i))

   To edit the <[> <]> PAIR, you would enter the keystrokes:

     <M-(> <[>

   Which will edit the <[> <]> around "e", and enter ‘ipe-edit-mode’.

   Then, to move the <[> <]> PAIR around "e" to the _beginning_, you
would use the keystroke:

     <C-a>

   Which will result in the buffer:

     []((a b c)(d e f)(g h i))

   Then, to move the <[> <]> PAIR to the _end_, you would use the
keystroke:

     <C-e>

   Which will result in the buffer:

     ((a b c)(d e f)(g h i))[]


File: ipe.info,  Node: Defining line PAIRs with an INFIX,  Next: Auto Insertion,  Prev: List Movement,  Up: Other Features

8.3 Defining line PAIRs with an INFIX
=====================================

_Intermediate_ and _Advanced_ (*Note Types of PAIR Definition::) 'Insert
Pair Edit' (ipe) PAIRs that are defined with an _Initial Movement_ of
"by lines" can also define an INFIX.

   This INFIX will be inserted at the start of each intervening line
between the OPEN and CLOSE overlays.

   The _indent_ (*Note Line Movement::) commands:

   • ‘ipe-edit--open-forward’
   • ‘ipe-edit--open-backward’
   • ‘ipe-edit--close-forward’
   • ‘ipe-edit--close-backward’

   Can be used to add indentation both _before_ and _after_ the INFIX.

   For example, assuming that:

   • The ‘insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The _Modifiers_ ‘ipe-edit-movement-keyset’ has been enabled;
   • The </> MNEMONIC is bound to the PAIR </* > < */>;
   • The _Initial Movement_ for the </> MNEMONIC is 'by line';
   • The INFIX for the </> PAIR is < **>, and;
   • The current buffer contains the following text:

          The quick brown fox jumps over the lazy dog.
          The quick brown fox jumps over the lazy dog.
          The quick brown |fox jumps over the lazy dog.
          The quick brown fox jumps over the lazy dog.
          The quick brown fox jumps over the lazy dog.

   To insert and indent C-style comments around the text, you would
enter the keystrokes:

     <C-u> <M-(> </>

   Which will insert a ‘/*’ ‘*/’ PAIR around the middle line, and enter
‘ipe-edit-mode’.

   Which will result in the buffer:

     The quick brown fox jumps over the lazy dog.
     The quick brown fox jumps over the lazy dog.
     /* The quick brown |fox jumps over the lazy dog. */
     The quick brown fox jumps over the lazy dog.
     The quick brown fox jumps over the lazy dog.

   And then, to move the OPEN overlay up a line, and the CLOSE overlay
down a line, you would enter the keystrokes:

     <C-n> <C-p>

   Which will result in the buffer:

     The quick brown fox jumps over the lazy dog.
     /* The quick brown fox jumps over the lazy dog.
     ** The quick brown |fox jumps over the lazy dog.
     ** The quick brown fox jumps over the lazy dog. */
     The quick brown fox jumps over the lazy dog.

   To then indent the comment two spaces, you would enter the
keystrokes:

   <C-b> <C-b>

   Which will result in the buffer:

     The quick brown fox jumps over the lazy dog.
       /* The quick brown fox jumps over the lazy dog.
       ** The quick brown fox jumps over the lazy dog.
       ** The quick brown fox jumps over the lazy dog. */
     The quick brown fox jumps over the lazy dog.

   And then, to indent the text after the comment two spaces, you would
enter the keystrokes:

     <C-f> <C-f>

   Which will result in the buffer:

     The quick brown fox jumps over the lazy dog.
       /*   The quick brown fox jumps over the lazy dog.
       **   The quick brown fox jumps over the lazy dog.
       **   The quick brown fox jumps over the lazy dog. */
     The quick brown fox jumps over the lazy dog.


File: ipe.info,  Node: Auto Insertion,  Next: Positioning POINT and MARK,  Prev: Defining line PAIRs with an INFIX,  Up: Other Features

8.4 Auto Insertion
==================

_Intermediate_ and _Advanced_ (*Note Types of PAIR Definition::) 'Insert
Pair Edit' (ipe) PAIRs can be defined with an _Auto-Insert_ flag equal
to ‘y’.

   Running ‘insert-pair-edit’ and entering the MNEMONIC for a PAIR with
an _Auto-Insert_ equal to ‘y’, will instantly insert the OPEN and CLOSE
strings for the given PAIR without entering ‘ipe-edit-mode’.  (This can
be used to offer behaviour similar to the standard *Emacs*
‘insert-parentheses’, but for different PAIRs.)

   PAIRs with an _Auto-Insert_ equal to ‘y’ will still honour the
_Initial Movement_ PAIR option, so inserting a PAIR of this type with:

   • An _Initial Movement_ equal to ‘character’

     Will insert a PAIR around POINT.

   • An _Initial Movement_ equal to ‘word’

     Will insert a PAIR around the nearest word.

   • An _Initial Movement_ equal to ‘line’

     Will insert a PAIR around the current line.

   To _edit_ a PAIR with an _Auto-Insert_ equal to ‘y’, execute the
command ‘insert-pair-edit-update’ using the keystrokes:

     <C-u> <M-(> _MNEMONIC_

   After the PAIR has been inserted.


File: ipe.info,  Node: Positioning POINT and MARK,  Next: PAIRs With Empty OPEN / CLOSE,  Prev: Auto Insertion,  Up: Other Features

8.5 Positioning POINT and MARK
==============================

The position at which POINT (the *Emacs* cursor) is placed on insert of
an 'Insert Pair Edit' (ipe) PAIR is controlled by:

 -- User Option: ipe--move-point-on-insert
     This option is consulted when inserting (*Note Inserting and
     Aborting::) an 'Insert Pair Edit' (ipe) PAIR into the buffer.

     If *nil*, POINT will remain at the position it was when the PAIR
     was first inserted.

     If *non-nil*, this option is expected to be one of the following
     values:

        • resume - POINT will remain at its original position before the
          PAIR was inserted.
        • open-beg - POINT will be moved to the beginning of the OPEN
          string.
        • open-end - POINT will be moved to the end of the OPEN string.
        • close-beg - POINT will be moved to the beginning of the CLOSE
          string.
        • close-end - POINT will be moved to the end of the CLOSE
          string.

   The position at which the *Emacs* MARK is placed on insert of a PAIR
controlled by:

 -- User Option: ipe-set-mark-on-insert
     This option is consulted when inserting (*Note Inserting and
     Aborting::) an 'Insert Pair Edit' (ipe) PAIR into the buffer.

     If *nil*, MARK will not be set.

     If *non*-nil, MARK, this option is expected to be one of the
     following values:

        • open-beg - MARK will be set to the beginning of the OPEN
          string.
        • open-end - MARK will be set to the end of the OPEN string.
        • close-beg - MARK will be set to the beginning of the CLOSE
          string.
        • close-end - MARK will be set to the end of the CLOSE string.

   _Intermediate_ and _Advanced_ (*Note Types of PAIR Definition::)
'Insert Pair Edit' (ipe) PAIRs can define the position at which to place
POINT on _insert_ of the PAIR into the buffer 'per-PAIR'.


File: ipe.info,  Node: PAIRs With Empty OPEN / CLOSE,  Next: Updating Existing PAIRs,  Prev: Positioning POINT and MARK,  Up: Other Features

8.6 PAIRs With Empty OPEN / CLOSE
=================================

'Insert Pair Edit' (ipe) PAIRs can be defined with an _empty_ OPEN or
CLOSE string.

   The position of an _empty_ OPEN or CLOSE string will still be
maintained within ‘ipe-edit-mode’, and can be moved about the buffer
using the ‘ipe-edit-mode’ movement keys (*Note Basic Movement::.)  Empty
OPEN and CLOSE strings can be used to delimit operations which act upon
the CONTENTS of a PAIR (*Note Edit CONTENTS Commands::.)

   The position of an empty OPEN or CLOSE string is displayed within
‘ipe-edit-mode’ by overlays containing:

 -- User Option: ipe-empty-open-string
     (Default: ‘(’)

 -- User Option: ipe-empty-close-string
     (Default: ‘)’)

   These overlays are highlighted using the _face_:

 -- User Option: ipe-empty-pair-highlight
     (Default: ‘warning’)

   The ‘ipe-empty-open-string’ / ‘ipe-empty-close-string’ strings are
_not_ inserted into the buffer by ‘ipe-edit--insert-pair’.


File: ipe.info,  Node: Updating Existing PAIRs,  Prev: PAIRs With Empty OPEN / CLOSE,  Up: Other Features

8.7 Updating Existing PAIRs
===========================

In addition to inserting PAIRs, the 'Insert Pair Edit' (ipe) package
also offers a number of commands to _update_ the PAIRs which already
exist within an *Emacs* buffer.

   • *Note Updating PAIRs::
   • *Note Deleting PAIRs::
   • *Note Replacing PAIRs::

   The following sub-sections describe some of the more advanced
features of these commands, and some of the options used to update PAIRS
when within ‘ipe-edit-mode’.

* Menu:

* Update Search Process::
* Update PAIR Matching::
* Updates on a Region::


File: ipe.info,  Node: Update Search Process,  Next: Update PAIR Matching,  Up: Updating Existing PAIRs

8.7.1 Update Search Process
---------------------------

The PAIRs updated by the 'Insert Pair Edit' (ipe) commands:

   • ‘insert-pair-edit-update’ (*Note Updating PAIRs::);
   • ‘insert-pair-edit-delete’ (*Note Deleting PAIRs::), and;
   • ‘insert-pair-edit-replace’ (*Note Replacing PAIRs::.)

   All locate the PAIRs to be updated by searching for the _nearest_
PAIR (or, if the _region_ is active, for all the PAIRs within the
_region_.)

   The direction of the search is determined by the
‘ipe-update-forward-first’ option.  (Default: *nil*)

 -- User Option: ipe-update-forward-first

     If nil, the PAIR to be updated by any of the _insert-pair-edit-*_
     commands will be searched for by:

        • Searching backward from POINT for an OPEN string, then:
        • Searching _forward_ from the OPEN string for a _matching_
          CLOSE string, or;
        • If no OPEN string is found by searching _backward_, by
          searching _forward_ from POINT for an OPEN string, then:
        • Searching _forward_ from the OPEN string for a _matching_
          CLOSE string.

     If non-nil, the PAIR to be updated by the previous set of commands
     will first be searched for by:

        • Searching _forward_ from POINT for an OPEN string, then:
        • Searching _forward_ from the OPEN string for a _matching_
          CLOSE string, or;
        • If no OPEN string is found by searching _forward_, by
          searching _backward_ from POINT for an OPEN string, then:
        • Searching _forward_ from the OPEN string for a _matching_
          CLOSE string.


File: ipe.info,  Node: Update PAIR Matching,  Next: Updates on a Region,  Prev: Update Search Process,  Up: Updating Existing PAIRs

8.7.2 Update PAIR Matching
--------------------------

The PAIRs selected by the 'Insert Pair Edit' (ipe) commands are
_matched_, thus allowing the OPEN and CLOSE strings of a PAIR to be
nested.  Searching forward / backward for PAIRs (*Note Update Search
Process::) will attempt to match the _corresponding_ OPEN and CLOSE
strings.

   For example, assuming that:

   • The ‘insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>;
   • The <[> MNEMONIC is bound to the PAIR <[> <]>, and;
   • The buffer contains the following text:

          The (quick (|brown (fox) jumps) over) the lazy dog.

     (Where the <|> character represents the current position of POINT.)

   Then, to update the <(> <)> PAIR you would enter the keystrokes:

     <C-u> <M-(> <(>

   Which will match the PAIR around the text "brown fox jumps".
(Because the <(> <)> PAIR around "fox" is _nested_ within the outer PAIR
around "brown fox jumps".)

   Changing the PAIR using the keystrokes:

     <(> <[>

   Which will result in the buffer:

     The (quick [|brown (fox) jumps] over) the lazy dog.


File: ipe.info,  Node: Updates on a Region,  Prev: Update PAIR Matching,  Up: Updating Existing PAIRs

8.7.3 Updates on Region
-----------------------

If the *Emacs* _region_ is active, running any of the 'Insert Pair Edit'
(ipe) commands:

   • ‘insert-pair-edit-update’
   • ‘insert-pair-edit-delete’
   • ‘insert-pair-edit-replace’

   Will act upon all of the PAIRs within the _region_.  This will allow
multiple PAIRs to be edited at once.

   (*Note Multiple PAIRs Commands::.)

   For example, assuming that:

   • The ‘insert-pair-edit’ command has been bound to the suggested
     <M-(> binding;
   • The <(> MNEMONIC is bound to the PAIR <(> <)>, and;
   • The buffer contains the following text:

          The quick (brown) fox jumps (over) the lazy dog.
          |The quick (brown) fox jumps (over) the lazy dog.
          The quick (brown) fox jumps (over) the lazy dog.@

     (Where the <|> character represents the current position of POINT,
     and the <@> key represents the current position of MARK for an
     active *Emacs* _region_.)

   Then, deleting a PAIR using the following keystrokes:

     <C-u> <C-u> <M-(> <(>

   Will delete all of the <(> <)> PAIRs between POINT and MARK.

   Which will result in the buffer:

     The quick (brown) fox jumps (over) the lazy dog.
     |The quick brown fox jumps over the lazy dog.
     The quick brown fox jumps over the lazy dog.@


File: ipe.info,  Node: Development,  Next: Index,  Prev: Other Features,  Up: Top

9 Development
*************

* Menu:

* Creating 'ipe-mode-pairs' PAIRs using Emacs Lisp::
* Binding MNEMONICs to Keys::
* Defining custom 'ipe--movement' Functions::
* Adding 'ipe' ERTs (Emacs Regression Tests)::


File: ipe.info,  Node: Creating 'ipe-mode-pairs' PAIRs using Emacs Lisp,  Next: Binding MNEMONICs to Keys,  Up: Development

9.1 Creating 'ipe-mode-pairs' PAIRs using Emacs Lisp
====================================================

The 'Insert Pair Edit' (ipe) package is specifically designed to cater
for _Mode-Specific_ PAIR bindings.  Several _Mode-Specific_ bindings
come bundled with the 'Insert Pair Edit' (ipe) package:

   • texinfo-mode - (‘ipe-textinfo-mode.el’)
   • c-mode - (‘ipe-c-mode.el’)
   • html-mode - (‘ipe-html-mode.el’)
   • mhtml-mode - (‘ipe-html-mode.el’)
   • markdown-mode - (‘ipe-markdown-mode.el’)

   These bindings are automatically activated whenever one of the
'Insert Pair Edit' (ipe) commands is invoked within a buffer with the
given ‘major-mode’.

   While bindings for _Major Modes_ can be added dynamically using the
'Insert Pair Edit' customization options (*Note Customization::), they
can also be added using *Emacs Lisp*.  This may be a more desirable
option for Users wanting to supply 'Insert Pair Edit' (ipe) PAIRs for
their own *Emacs* ‘major-mode’.

   To add new 'Insert Pair Edit' (ipe) PAIR bindings for a new *Emacs*
‘major-mode’ using *Emacs Lisp*, use the following functions (available
from the ‘ipe-custom.el’ / ‘ipe.el’ libraries.)

   • ‘ipe-custom--pair-list-get’
   • ‘ipe-mode-pairs-add’

 -- Function: ipe-custom--pair-list-get DEFN
     Converts a list (‘DEFN’) describing a set of 'Insert Pair Edit'
     (ipe) PAIRs into the format used by the *Emacs* ‘customize’
     widgets.

     The list to be converted is expected to a list of ‘PAIR
     DEFINITIONS’ of the form:

            (MNEMONIC OPEN CLOSE)
          or
            (MNEMONIC OPEN CLOSE (PLIST))

     Where:

        • ‘MNEMONIC’ Is a string input into the minibuffer by the User
          after calling ‘insert-pair-edit’ to indicate which OPEN and
          CLOSE strings are to be inserted.
        • ‘OPEN’ Is a string placed at the beginning of a lexical unit,
          and then moved by the 'Insert Pair Edit' commands.
        • ‘CLOSE’ Is a string placed at the end of a lexical unit, and
          then moved by the 'Insert Pair Edit' commands.
        • ‘PLIST’ Is a property list specifying a set of optional
          _Advanced_ options that can be included to specify extra
          configuration passed to _specialised_ movement functions.
          (see: ‘ipe-move-by-movements’)

          Known PLIST properties are:

               :movement        MOVEMENT
               :infix           INFIX
               :escapes         ESCAPES
               :auto-insert     AUTO-INSERT
               :move-point      MOVE-POINT
               :indent-function INDENT-FUNCTION
               :menu            MENU

             - MOVEMENT The initial lexical unit indicating the type of
               movements made by the 'Insert Pair Edit' commands.
               (pre-defined values: 'char, 'word, 'line, 'list; default:
               'word.)
             - INFIX A string added to the front of lines between the
               OPEN and CLOSE PAIR when ‘MOVEMENT’ = 'line.
             - ESCAPES Is a list of pairs of strings.  Each pair of
               strings (MATCH REPLACE) represents an escape sequence.
               Each MATCH between OPEN and CLOSE will be replaced by
               REPLACE.
             - AUTO-INSERT If non-nil, will cause the ‘insert-pair-edit’
               function to automatically insert the PAIR without
               entering ‘ipe-edit-mode’.
             - MOVE-POINT Indicates where to move _POINT_ when a new
               PAIR is inserted.  This is a PAIR-specific override to
               the global IPE-MOVE-POINT-ON-INSERT setting, and takes
               the same values ('resume, 'open-beg, 'open-end,
               'close-beg, 'close-end)
             - INDENT-FUNCTION is either *nil*, or a function used to
               indent the OPEN and CLOSE strings.
             - MENU Is a forward slash ('/') separated string of the
               names of the menus under which the PAIR is displayed
               within the *Emacs* 'Insert Pair Edit' menus.

 -- Function: ipe-mode-pairs-add MODE DEFN
     Adds a binding for the PAIR definition list (‘DEFN’) to the
     IPE-MODE-PAIRS variable for the given ‘MODE’.

   For example, for a fictional ‘xxx-mode’, to create a set of _Mode
Specific_ 'ipe' PAIR Definitions, create a new file, ‘ipe-xxx-mode.el’,
and add the following *Emacs Lisp*:

     ;;; ipe-xxx-mode.el --- Insert Pair Edit - xxx-mode definitions

     (require 'ipe-custom)
     (require 'ipe)

     ; Create a new 'Insert Pair Edit' mode-specific PAIRs variable
     ; 'ipe-xxx-pairs' which maps:
     ;
     ;   o => <open> / <close>
     ;   - => -      / -
     ;   ; => ;      / ;       (with a ';' INFIX)
     ;
     (defcustom
       ipe-xxx-pairs
       (ipe-custom--pair-list-get
       '(("o" "<open>" "<close>")
         ("-" "-"      "-"       :movement char)
         (";" ";"      ";"       :movement line :infix ";")))
       "'insert-pair-edit' customizations for 'xxx-mode'."
       :group 'ipe-mode-pairs
       :tag   "'Insert Pair Edit' - xxx-mode PAIRs"
       :link  '(function-link insert-pair-edit)
       :set   'ipe-custom-pair-list-set
       :get   'ipe-custom-pair-list-get
       :type  '(ipe-custom-pair-list
     	   :tag "PAIRs used by 'insert-pair-edit' in 'xxx-mode'."))

     ; Activate the new 'ipe-xxx-pairs' whenever in 'xxx-mode'.
     (ipe-mode-pairs-add 'xxx-mode 'ipe-xxx-pairs)

     (provide 'ipe-xxx-mode)


File: ipe.info,  Node: Binding MNEMONICs to Keys,  Next: Defining custom 'ipe--movement' Functions,  Prev: Creating 'ipe-mode-pairs' PAIRs using Emacs Lisp,  Up: Development

9.2 Binding MNEMONICs to Keys
=============================

To bind an 'Insert Pair Edit' (ipe) PAIR directly to the key
representing its MNEMONIC (so that typing the MNEMONIC inserts the PAIR)
use the function:

 -- Function: insert-pair-edit-cmd

   For example:

     (local-set-key "(" 'insert-pair-edit-cmd)

   This will bind the <(> key to the 'Insert Pair Edit' (ipe) MNEMONIC
<(>.  Typing <(> within a buffer where this has been set will insert the
PAIR associated with the <(> MNEMONIC, and enter ‘ipe-edit-mode’.

   If the PAIR definition for the given MNEMONIC has an _Auto-Insert_
flag set to ‘y’, this can be used to automatically enter matched PAIRS
every time the OPEN key for the PAIR is pressed.  (Without entering
‘ipe-edit-mode’.)


File: ipe.info,  Node: Defining custom 'ipe--movement' Functions,  Next: Adding 'ipe' ERTs (Emacs Regression Tests),  Prev: Binding MNEMONICs to Keys,  Up: Development

9.3 Defining custom 'ipe-movement Functions
===========================================

The movements (‘character’, ‘word’, ‘line’, ‘list’) supplied within
‘ipe-edit-mode’ are _pluggable_.

   They are defined by entries within:

 -- Variable: ipe-move-by-movements

     This is a _list_ of 4-tuples:

          (SYMBOL MOVE-BY-FUNCTION POS-SET-FUNCTION DESCRIPTION)

        • *SYMBOL* is the identifier defining the type of movement.

        • *MOVE-BY-FUNCTION*

          Is a function that returns the position of the OPEN and CLOSE
          strings for a given _lexical unit_ movement mode.  It should
          have a signature of the form:

               (MOVE-BY-FUNCTION DEFN N SIDE ACTION POS OTHER UNITS PUSH)

          Where:

             - DEFN - Is the definition of the PAIR from IPE-PAIRS.
             - N - Is the position of the PAIR in IPE-PAIR-POS-LIST.
             - SIDE - Is either ‘'open’ or ‘'close’.
             - ACTION - Is either ‘'init’, ‘'beg’, ‘'up’, ‘'backward’,
               ‘'forward’, ‘'down’, ‘'end’, or ‘'reset’.
             - POS - Is the position from which the movement begins.
             - OTHER - Is the position of the other member of the PAIR.
             - UNITS - Are the number of units to move.
             - PUSH - Indicates that this is a _push_ move from the
               other member of the PAIR.

          It should return the position to which the given part of the
          PAIR (‘'open’ or ‘'close’) is set when the given movement
          command (‘'beg’, ‘'up’, ‘'down’, ‘'backward’, ‘'forward’,
          ‘'end’) is entered by the User.

          If ‘POS’ is nil, movement should be calculated from ‘POINT’.

        • POS-SET-FUNCTION

          Is an (optional) function that is called whenever
          ‘ipe--pos-property-set’ is called to perform movement specific
          updates to the ‘ipe--pair-pos-list’ state variable.  It should
          have a signature of the form:

               (POS-SET-FUNCTION N)

          Where:

             - N Is the position of the PAIR in ‘ipe--pair-pos-list’ for
               which a ‘ipe--pos-property-set’ call has just been made.

        • DESCRIPTION Is the text output to the echo area to describe
          the movement.

   To create a new _movement_:

   • Create a new _move-by_ function.
   • Add a new entry to IPE-MOVE-BY-MOVEMENTS variable.
   • Add a new binding to the IPE-EDIT-MODE-MOVEMENT-MAP for new
     movement mode.


File: ipe.info,  Node: Adding 'ipe' ERTs (Emacs Regression Tests),  Prev: Defining custom 'ipe--movement' Functions,  Up: Development

9.4 Adding 'ipe' ERT (Emacs Regression Tests)
=============================================

Regression tests (Using the *Emacs* ERT (_Emacs Regression Test_))
package can be defined using the EMACS macro:

 -- Macro: ipe-test-def-kbd NAME PARAM DOC CUSTOM SETUP BUFFER-TEXT
          EXPECTED KEYSTROKES &optional TEARDOWN)

     Customized version of ‘ert-deftest’ for ‘ipe’ unit testing.

     This macro will define an ERT test, which runs a set of keyboard
     commands, KEYSTROKES, against the BUFFER-TEXT within a temporary
     buffer, and compares the resulting text in the buffer after the
     commands have been run, to the EXPECTED result.

     For this test, the ‘insert-pair-edit’ will be bound to <M-(>.

        • ‘NAME’ The name of the ‘ert’ test.  This will be prefixed with
          ’ipe-test-’.
        • ‘PARAM’ Placeholder - for future ERT extensibility.
        • ‘DOC’ Documentation string for the ‘ert-deftest’ definition.
        • ‘CUSTOM’ List of ’ipe’ customizations for the test.
        • ‘SETUP’ Commands used to initialize the temporary test buffer.
        • ‘BUFFER-TEXT’ Starting text within the temporary buffer.
        • ‘EXPECTED’ Expected text within the temporary buffer after
          test completion.
        • ‘KEYSTROKES’ A string representing the keystrokes to be
          executed as user input against the temporary buffer.  (This
          should be in a format that can be parsed by the ‘kbd’
          command.)
        • ‘TEARDOWN’ Commands used to clean up the temporary test
          buffer.

     (setq ipe-test-xxx-options
           '((ipe-edit--movement-keysets '(modifiers))
             (ipe-pairs                  '(("(" "(" ")" (:movement char))
                                           ("[" "[" "]"))))

     (ipe-test-def-kbd xxx-test ()
       "Test `insert-pair-edit'"
       ipe-test-xxx-options
       nil
       "|The quick brown fox jumps over the lazy dog."
       "(|)The quick brown fox jumps over the lazy dog."
       "M-( ( RET")

* Menu:

* Running 'ipe' ERTs (Emacs Regression Tests)::


File: ipe.info,  Node: Running 'ipe' ERTs (Emacs Regression Tests),  Up: Adding 'ipe' ERTs (Emacs Regression Tests)

9.4.1 Running 'ipe' ERTs (Emacs Regression Tests)
-------------------------------------------------

To run _Emacs Regression Test_s defined by the ‘ipe-test-def-kbd’ macro,
the following convenience functions are supplied:

 -- Function: ipe-test-run

     An interactive function to run an *ERT* test that has prefix
     ‘ipe-test--’.

     Prompt for the name of an ‘ipe-test-def’ or ‘ipe-test-def-kbd’ test
     to be run, and run it.  The input PATTERN is a regular expression
     that will match the NAMEs of the tests to be run.

 -- Function: ipe-test-run-all

     An interactive function to run all of the *ERT* test cases that
     start with ‘ipe-test--’.

     This interactive function runs all of the tests created using the
     ‘ipe-test-def’ or ‘ipe-test-def-kbd’ macros.


File: ipe.info,  Node: Index,  Prev: Development,  Up: Top

Index
*****

 [index ]
* Menu:

* Basic Mode Key Bindings:               Basic Mode Key Bindings.
                                                               (line  6)
* Basic Movement:                        Basic Movement.       (line  6)
* Basic Movement (Alphabetic):           Basic Movement (Alphabetic).
                                                               (line  6)
* Basic Movement (Arrows):               Basic Movement (Arrows).
                                                               (line  6)
* Basic Movement (Custom):               Basic Movement (Custom).
                                                               (line  6)
* Basic Movement (Modifiers):            Basic Movement.       (line 22)
* Basic Movement (VI):                   Basic Movement (VI).  (line  6)
* Basic Movement (WASD):                 Basic Movement (WASD).
                                                               (line  6)
* Basic Usage:                           Basic Usage.          (line  6)
* Changing PAIRs:                        Changing PAIRs.       (line  6)
* Customization:                         Customization.        (line  6)
* Customization using 'customize':       Customization using 'customize'.
                                                               (line  6)
* Customization using the 'Pairs' Menu:  Customization using the 'Pairs' Menu.
                                                               (line  6)
* Deleting PAIRs:                        Deleting PAIRs.       (line  6)
* Development:                           Development.          (line  6)
* Expected Usage:                        Expected Usage.       (line  6)
* Inline Customization:                  Inline Customization. (line  6)
* Inserting and Aborting:                Inserting and Aborting.
                                                               (line  6)
* Installation:                          Installation.         (line  6)
* Mouse Movement:                        Mouse Movement.       (line  6)
* Movement Units:                        Movement Units.       (line  6)
* Other Features:                        Other Features.       (line  6)
* Other ipe-edit-mode Commands:          Other ipe-edit-mode Commands.
                                                               (line  6)
* Other Major Insert-Pair-Edit Commands: Other Major Commands. (line  6)
* Overview:                              Overview.             (line  6)
* Replacing PAIRs:                       Replacing PAIRs.      (line  6)
* Running insert-pair-edit:              Running insert-pair-edit.
                                                               (line  6)
* The 'Edit' -> 'Pairs' menu:            The 'Edit' -> 'Pairs' menu.
                                                               (line  6)
* Types of PAIR Definition:              Types of PAIR Definition.
                                                               (line  6)
* Updating PAIRs:                        Updating PAIRs.       (line  6)



Tag Table:
Node: Top101
Node: Overview1002
Node: Expected Usage2843
Node: Installation4462
Node: Basic Usage5494
Node: Running insert-pair-edit5875
Node: ipe-edit-mode8077
Node: Other `insert-pair-edit-*' commands8992
Node: The 'Edit' -> 'Pairs' menu9985
Node: Basic Mode Key Bindings11494
Node: Basic Movement12177
Node: Basic Movement Options14868
Node: Basic Movement (Alphabetic)16006
Node: Basic Movement (Arrows)17558
Node: Basic Movement (WASD)19351
Node: Basic Movement (VI)20867
Node: Basic Movement (Custom)22616
Node: Inserting and Aborting23370
Node: Movement Units24699
Node: Changing PAIRs26323
Node: Mouse Movement27653
Node: Other Major Commands30050
Node: Updating PAIRs30504
Node: Deleting PAIRs32739
Node: Replacing PAIRs34487
Node: Customization36840
Node: Types of PAIR Definition37497
Node: Customization using 'customize'38601
Node: Customization using the 'Pairs' Menu39742
Node: Inline Customization43315
Node: Inline Customization Prompts45387
Node: Display Customization49772
Node: Other ipe-edit-mode Commands51281
Node: Insert And... Commands51720
Node: Edit CONTENTS Commands53171
Node: Next / Previous Commands55138
Node: Next / Previous PAIRs55444
Node: Next / Previous CONTENTS56887
Node: Next / Previous OPEN / CLOSE58641
Node: Multiple PAIRs Commands60793
Node: Adding Multiple PAIRs using the Emacs Region61618
Node: Adding Multiple PAIRs using insert-pair-edit63142
Node: Adding Multiple PAIRs using Existing OPEN / CLOSE64974
Node: Adding Multiple PAIRs using PAIR CONTENT67637
Node: Removing PAIRs70818
Node: Escaping Text within a PAIR71749
Node: Other Features74121
Node: Line Movement74602
Node: Line Movement - Forward / Backward75609
Node: Line Movement - Beginning / End77797
Node: List Movement80271
Node: List Movement - Forward / Backward81025
Node: List Movement - Up / Down82841
Node: List Movement - Beginning / End84881
Node: Defining line PAIRs with an INFIX86593
Node: Auto Insertion89827
Node: Positioning POINT and MARK91138
Node: PAIRs With Empty OPEN / CLOSE93175
Node: Updating Existing PAIRs94329
Node: Update Search Process95015
Node: Update PAIR Matching96748
Node: Updates on a Region98050
Node: Development99486
Node: Creating 'ipe-mode-pairs' PAIRs using Emacs Lisp99786
Node: Binding MNEMONICs to Keys105501
Node: Defining custom 'ipe--movement' Functions106444
Node: Adding 'ipe' ERTs (Emacs Regression Tests)109221
Node: Running 'ipe' ERTs (Emacs Regression Tests)111519
Node: Index112459

End Tag Table


Local Variables:
coding: utf-8
End:
